{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n//   const [editMode, setEditMode] = useState(null);\n//   const [formValues, setFormValues] = useState({});\n\n//   // Fetch schedules on component mount\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Function to fetch train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/representative/schedules');\n//       setSchedules(response.data.schedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle delete schedule\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   // Handle edit schedule\n//   const editSchedule = (schedule) => {\n//     setEditMode(schedule.ScheduleID);\n//     setFormValues({\n//       TransitLineName: schedule.TransitLineName,\n//       DepartureDateTime: schedule.DepartureDateTime,\n//       ArrivalDateTime: schedule.ArrivalDateTime,\n//       TravelTime: schedule.TravelTime,\n//     });\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormValues({ ...formValues, [name]: value });\n//   };\n\n//   // Handle save edited schedule\n//   const saveSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n//       setEditMode(null);\n//       fetchSchedules();\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update schedule.');\n//     }\n//   };\n\n//   // Render\n//   return (\n//     <div>\n//       <h2>Manage Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line</th>\n//             <th>Departure Time</th>\n//             <th>Arrival Time</th>\n//             <th>Travel Time</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"text\"\n//                     name=\"TransitLineName\"\n//                     value={formValues.TransitLineName}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TransitLineName\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"DepartureDateTime\"\n//                     value={formValues.DepartureDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.DepartureDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"ArrivalDateTime\"\n//                     value={formValues.ArrivalDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.ArrivalDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"time\"\n//                     name=\"TravelTime\"\n//                     value={formValues.TravelTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TravelTime\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <>\n//                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={() => setEditMode(null)}>Cancel</button>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n//                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//                   </>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime}</td>\n//               <td>{schedule.DepartureDateTime}</td>\n//               <td>{schedule.TrainID}</td>\n//               <td>\n//                 <button\n//                   onClick={() => console.log('Edit schedule')}\n//                   style={{ marginRight: '5px' }}\n//                 >\n//                   Edit\n//                 </button>\n//                 {schedule.ReservationCount === 0 ? (\n//                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                 ) : (\n//                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [transitLineName, setTransitLineName] = useState('');\n//   const [travelTime, setTravelTime] = useState('');\n//   const [arrivalDateTime, setArrivalDateTime] = useState('');\n//   const [departureDateTime, setDepartureDateTime] = useState('');\n//   const [trainID, setTrainID] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Handle adding a new schedule\n//   const handleAddSchedule = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n//         TransitLineName: transitLineName,\n//         TravelTime: travelTime,\n//         ArrivalDateTime: arrivalDateTime,\n//         DepartureDateTime: departureDateTime,\n//         TrainID: trainID,\n//       });\n\n//       setSuccess(response.data.message);\n//       setError('');\n//       fetchSchedules(); // Refresh the schedule list\n\n//       // Clear form fields\n//       setTransitLineName('');\n//       setTravelTime('');\n//       setArrivalDateTime('');\n//       setDepartureDateTime('');\n//       setTrainID('');\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Error adding train schedule.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n\n//       {/* Add Train Schedule Form */}\n//       <div>\n//         <h3>Add Train Schedule</h3>\n//         <form onSubmit={handleAddSchedule}>\n//           <div>\n//             <label>Transit Line Name:</label>\n//             <input\n//               type=\"text\"\n//               value={transitLineName}\n//               onChange={(e) => setTransitLineName(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Travel Time (hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={travelTime}\n//               onChange={(e) => setTravelTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={arrivalDateTime}\n//               onChange={(e) => setArrivalDateTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={departureDateTime}\n//               onChange={(e) => setDepartureDateTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Train ID:</label>\n//             <input\n//               type=\"text\"\n//               value={trainID}\n//               onChange={(e) => setTrainID(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Add Schedule</button>\n//         </form>\n//         {error && <p className=\"error\">{error}</p>}\n//         {success && <p className=\"success\">{success}</p>}\n//       </div>\n\n//       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [stationName, setStationName] = useState('');\n//   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setFilteredSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Fetch schedules by station name\n//   const fetchSchedulesByStation = async () => {\n//     if (!stationName) {\n//       setError(\"Please enter a station name.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n//         params: { stationName },\n//       });\n//       setFilteredSchedules(response.data.trainSchedules);\n//       if (response.data.trainSchedules.length === 0) {\n//         setError(\"No schedules found for this station.\");\n//       } else {\n//         setError(\"\");\n//       }\n//     } catch (err) {\n//       console.error('Error fetching schedules by station:', err);\n//       setError('Failed to fetch schedules for the specified station.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter schedules\"\n//           value={stationName}\n//           onChange={(e) => setStationName(e.target.value)}\n//           style={{ padding: '10px', marginRight: '10px' }}\n//         />\n//         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n//       </div>\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredSchedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ManageSchedulesTab = () => {\n  _s();\n  const [schedules, setSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n  const [stationName, setStationName] = useState('');\n  const [filteredSchedules, setFilteredSchedules] = useState([]);\n  useEffect(() => {\n    fetchSchedules();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setFilteredSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = schedule => {\n    var _schedule$ArrivalDate, _schedule$DepartureDa;\n    setEditingSchedule({\n      ...schedule,\n      ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n      ArrivalTime: (_schedule$ArrivalDate = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate === void 0 ? void 0 : _schedule$ArrivalDate.substring(0, 5),\n      DepartureDate: schedule.DepartureDateTime.split('T')[0],\n      DepartureTime: (_schedule$DepartureDa = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa === void 0 ? void 0 : _schedule$DepartureDa.substring(0, 5)\n    });\n  };\n\n  // Handle input change for editable fields\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditingSchedule(prev => {\n      const updatedSchedule = {\n        ...prev,\n        [name]: value\n      };\n\n      // Automatically calculate travel time if arrival or departure changes\n      if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n        const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n        const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n        if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n          const arrival = new Date(arrivalDateTime);\n          const departure = new Date(departureDateTime);\n\n          // Calculate the travel time in hours and minutes\n          const diffMs = Math.abs(arrival - departure);\n          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n          const diffMinutes = Math.floor(diffMs % (1000 * 60 * 60) / (1000 * 60));\n          updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n        }\n      }\n      return updatedSchedule;\n    });\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async scheduleId => {\n    try {\n      const updatedSchedule = {\n        ...editingSchedule,\n        ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n        DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`\n      };\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async scheduleId => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter(schedule => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  // Fetch schedules by station name\n  const fetchSchedulesByStation = async () => {\n    if (!stationName) {\n      setError(\"Please enter a station name.\");\n      return;\n    }\n    try {\n      const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n        params: {\n          stationName\n        }\n      });\n      setFilteredSchedules(response.data.trainSchedules);\n      if (response.data.trainSchedules.length === 0) {\n        setError(\"No schedules found for this station.\");\n      } else {\n        setError(\"\");\n      }\n    } catch (err) {\n      console.error('Error fetching schedules by station:', err);\n      setError('Failed to fetch schedules for the specified station.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1810,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1811,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Manage Train Schedules (Edit/Delete)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1814,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Schedule ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1818,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transit Line Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1819,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Travel Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1820,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1821,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1822,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1823,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1824,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Train ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1825,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1826,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1817,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1816,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: schedules.map(schedule => {\n          var _schedule$ArrivalDate2, _schedule$DepartureDa2;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1834,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"TransitLineName\",\n                  value: editingSchedule.TransitLineName,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1836,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1835,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingSchedule.TravelTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1843,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  name: \"ArrivalDate\",\n                  value: editingSchedule.ArrivalDate,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1845,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1844,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  name: \"ArrivalTime\",\n                  value: editingSchedule.ArrivalTime,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1853,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1852,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  name: \"DepartureDate\",\n                  value: editingSchedule.DepartureDate,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1861,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1860,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  name: \"DepartureTime\",\n                  value: editingSchedule.DepartureTime,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1869,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1868,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"TrainID\",\n                  value: editingSchedule.TrainID,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1877,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1876,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSave(schedule.ScheduleID),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1885,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleCancel,\n                  style: {\n                    marginLeft: '5px'\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1886,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1884,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1891,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TransitLineName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1892,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TravelTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1893,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ArrivalDateTime.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1894,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_schedule$ArrivalDate2 = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate2 === void 0 ? void 0 : _schedule$ArrivalDate2.substring(0, 5)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1895,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.DepartureDateTime.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1896,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_schedule$DepartureDa2 = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa2 === void 0 ? void 0 : _schedule$DepartureDa2.substring(0, 5)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1897,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TrainID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1898,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEditClick(schedule),\n                  style: {\n                    marginRight: '5px'\n                  },\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1900,\n                  columnNumber: 21\n                }, this), schedule.ReservationCount === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDelete(schedule.ScheduleID),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1904,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: true,\n                  title: \"Cannot delete. Reservations exist.\",\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1906,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1899,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, schedule.ScheduleID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1831,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1829,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1815,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search Train Schedules by Station (Origin or Destination)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1917,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter station name to filter schedules\",\n        value: stationName,\n        onChange: e => setStationName(e.target.value),\n        style: {\n          padding: '10px',\n          marginRight: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1919,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchSchedulesByStation,\n        children: \"Search Schedules by Station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1926,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1918,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Schedule ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1932,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transit Line Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1933,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Travel Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1934,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1935,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1936,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1937,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1938,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Train ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1939,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1931,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1930,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredSchedules.map(schedule => {\n          var _schedule$ArrivalDate3, _schedule$DepartureDa3;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ScheduleID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1945,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TransitLineName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1946,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TravelTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1947,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ArrivalDateTime.split('T')[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1948,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (_schedule$ArrivalDate3 = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate3 === void 0 ? void 0 : _schedule$ArrivalDate3.substring(0, 5)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1949,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.DepartureDateTime.split('T')[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1950,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (_schedule$DepartureDa3 = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa3 === void 0 ? void 0 : _schedule$DepartureDa3.substring(0, 5)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1951,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TrainID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1952,\n              columnNumber: 15\n            }, this)]\n          }, schedule.ScheduleID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1944,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1942,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1929,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1809,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageSchedulesTab, \"gcM8YEyuzEop1DXXt1nFGrP4lUQ=\");\n_c = ManageSchedulesTab;\nexport default ManageSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"ManageSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","Fragment","_Fragment","ManageSchedulesTab","_s","schedules","setSchedules","editingSchedule","setEditingSchedule","error","setError","stationName","setStationName","filteredSchedules","setFilteredSchedules","fetchSchedules","response","get","data","trainSchedules","err","console","handleEditClick","schedule","_schedule$ArrivalDate","_schedule$DepartureDa","ArrivalDate","ArrivalDateTime","split","ArrivalTime","substring","DepartureDate","DepartureDateTime","DepartureTime","handleInputChange","e","name","value","target","prev","updatedSchedule","arrivalDateTime","departureDateTime","arrival","Date","departure","diffMs","Math","abs","diffHours","floor","diffMinutes","TravelTime","handleSave","scheduleId","put","handleCancel","handleDelete","delete","filter","ScheduleID","fetchSchedulesByStation","params","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","_schedule$ArrivalDate2","_schedule$DepartureDa2","type","TransitLineName","onChange","TrainID","onClick","style","marginLeft","marginRight","ReservationCount","disabled","title","marginBottom","placeholder","padding","_schedule$ArrivalDate3","_schedule$DepartureDa3","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n//   const [editMode, setEditMode] = useState(null);\n//   const [formValues, setFormValues] = useState({});\n\n//   // Fetch schedules on component mount\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Function to fetch train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/representative/schedules');\n//       setSchedules(response.data.schedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle delete schedule\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   // Handle edit schedule\n//   const editSchedule = (schedule) => {\n//     setEditMode(schedule.ScheduleID);\n//     setFormValues({\n//       TransitLineName: schedule.TransitLineName,\n//       DepartureDateTime: schedule.DepartureDateTime,\n//       ArrivalDateTime: schedule.ArrivalDateTime,\n//       TravelTime: schedule.TravelTime,\n//     });\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormValues({ ...formValues, [name]: value });\n//   };\n\n//   // Handle save edited schedule\n//   const saveSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n//       setEditMode(null);\n//       fetchSchedules();\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update schedule.');\n//     }\n//   };\n\n//   // Render\n//   return (\n//     <div>\n//       <h2>Manage Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line</th>\n//             <th>Departure Time</th>\n//             <th>Arrival Time</th>\n//             <th>Travel Time</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"text\"\n//                     name=\"TransitLineName\"\n//                     value={formValues.TransitLineName}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TransitLineName\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"DepartureDateTime\"\n//                     value={formValues.DepartureDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.DepartureDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"ArrivalDateTime\"\n//                     value={formValues.ArrivalDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.ArrivalDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"time\"\n//                     name=\"TravelTime\"\n//                     value={formValues.TravelTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TravelTime\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <>\n//                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={() => setEditMode(null)}>Cancel</button>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n//                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//                   </>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime}</td>\n//               <td>{schedule.DepartureDateTime}</td>\n//               <td>{schedule.TrainID}</td>\n//               <td>\n//                 <button\n//                   onClick={() => console.log('Edit schedule')}\n//                   style={{ marginRight: '5px' }}\n//                 >\n//                   Edit\n//                 </button>\n//                 {schedule.ReservationCount === 0 ? (\n//                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                 ) : (\n//                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [transitLineName, setTransitLineName] = useState('');\n//   const [travelTime, setTravelTime] = useState('');\n//   const [arrivalDateTime, setArrivalDateTime] = useState('');\n//   const [departureDateTime, setDepartureDateTime] = useState('');\n//   const [trainID, setTrainID] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Handle adding a new schedule\n//   const handleAddSchedule = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n//         TransitLineName: transitLineName,\n//         TravelTime: travelTime,\n//         ArrivalDateTime: arrivalDateTime,\n//         DepartureDateTime: departureDateTime,\n//         TrainID: trainID,\n//       });\n\n//       setSuccess(response.data.message);\n//       setError('');\n//       fetchSchedules(); // Refresh the schedule list\n\n//       // Clear form fields\n//       setTransitLineName('');\n//       setTravelTime('');\n//       setArrivalDateTime('');\n//       setDepartureDateTime('');\n//       setTrainID('');\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Error adding train schedule.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n\n//       {/* Add Train Schedule Form */}\n//       <div>\n//         <h3>Add Train Schedule</h3>\n//         <form onSubmit={handleAddSchedule}>\n//           <div>\n//             <label>Transit Line Name:</label>\n//             <input\n//               type=\"text\"\n//               value={transitLineName}\n//               onChange={(e) => setTransitLineName(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Travel Time (hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={travelTime}\n//               onChange={(e) => setTravelTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={arrivalDateTime}\n//               onChange={(e) => setArrivalDateTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={departureDateTime}\n//               onChange={(e) => setDepartureDateTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Train ID:</label>\n//             <input\n//               type=\"text\"\n//               value={trainID}\n//               onChange={(e) => setTrainID(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Add Schedule</button>\n//         </form>\n//         {error && <p className=\"error\">{error}</p>}\n//         {success && <p className=\"success\">{success}</p>}\n//       </div>\n\n//       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n      \n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n          \n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [stationName, setStationName] = useState('');\n//   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setFilteredSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Fetch schedules by station name\n//   const fetchSchedulesByStation = async () => {\n//     if (!stationName) {\n//       setError(\"Please enter a station name.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n//         params: { stationName },\n//       });\n//       setFilteredSchedules(response.data.trainSchedules);\n//       if (response.data.trainSchedules.length === 0) {\n//         setError(\"No schedules found for this station.\");\n//       } else {\n//         setError(\"\");\n//       }\n//     } catch (err) {\n//       console.error('Error fetching schedules by station:', err);\n//       setError('Failed to fetch schedules for the specified station.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter schedules\"\n//           value={stationName}\n//           onChange={(e) => setStationName(e.target.value)}\n//           style={{ padding: '10px', marginRight: '10px' }}\n//         />\n//         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n//       </div>\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredSchedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ManageSchedulesTab = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n  const [stationName, setStationName] = useState('');\n  const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n  useEffect(() => {\n    fetchSchedules();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setFilteredSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = (schedule) => {\n    setEditingSchedule({\n      ...schedule,\n      ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n      ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n      DepartureDate: schedule.DepartureDateTime.split('T')[0],\n      DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n    });\n  };\n\n  // Handle input change for editable fields\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setEditingSchedule((prev) => {\n      const updatedSchedule = {\n        ...prev,\n        [name]: value,\n      };\n\n      // Automatically calculate travel time if arrival or departure changes\n      if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n        const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n        const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n        if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n          const arrival = new Date(arrivalDateTime);\n          const departure = new Date(departureDateTime);\n\n          // Calculate the travel time in hours and minutes\n          const diffMs = Math.abs(arrival - departure);\n          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n          const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n          updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n        }\n      }\n\n      return updatedSchedule;\n    });\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async (scheduleId) => {\n    try {\n      const updatedSchedule = {\n        ...editingSchedule,\n        ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n        DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n      };\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async (scheduleId) => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  // Fetch schedules by station name\n  const fetchSchedulesByStation = async () => {\n    if (!stationName) {\n      setError(\"Please enter a station name.\");\n      return;\n    }\n\n    try {\n      const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n        params: { stationName },\n      });\n      setFilteredSchedules(response.data.trainSchedules);\n      if (response.data.trainSchedules.length === 0) {\n        setError(\"No schedules found for this station.\");\n      } else {\n        setError(\"\");\n      }\n    } catch (err) {\n      console.error('Error fetching schedules by station:', err);\n      setError('Failed to fetch schedules for the specified station.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Manage Train Schedules</h2>\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Manage Train Schedules Section */}\n      <h3>Manage Train Schedules (Edit/Delete)</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Schedule ID</th>\n            <th>Transit Line Name</th>\n            <th>Travel Time</th>\n            <th>Arrival Date</th>\n            <th>Arrival Time</th>\n            <th>Departure Date</th>\n            <th>Departure Time</th>\n            <th>Train ID</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {schedules.map((schedule) => (\n            <tr key={schedule.ScheduleID}>\n              {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n                <>\n                  <td>{schedule.ScheduleID}</td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"TransitLineName\"\n                      value={editingSchedule.TransitLineName}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>{editingSchedule.TravelTime}</td>\n                  <td>\n                    <input\n                      type=\"date\"\n                      name=\"ArrivalDate\"\n                      value={editingSchedule.ArrivalDate}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"time\"\n                      name=\"ArrivalTime\"\n                      value={editingSchedule.ArrivalTime}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"date\"\n                      name=\"DepartureDate\"\n                      value={editingSchedule.DepartureDate}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"time\"\n                      name=\"DepartureTime\"\n                      value={editingSchedule.DepartureTime}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"TrainID\"\n                      value={editingSchedule.TrainID}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n                    <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n                  </td>\n                </>\n              ) : (\n                <>\n                  <td>{schedule.ScheduleID}</td>\n                  <td>{schedule.TransitLineName}</td>\n                  <td>{schedule.TravelTime}</td>\n                  <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n                  <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n                  <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n                  <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n                  <td>{schedule.TrainID}</td>\n                  <td>\n                    <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n                      Edit\n                    </button>\n                    {schedule.ReservationCount === 0 ? (\n                      <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n                    ) : (\n                      <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n                    )}\n                  </td>\n                </>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {/* Search Train Schedules by Station Section */}\n      <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n      <div style={{ marginBottom: '20px' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter station name to filter schedules\"\n          value={stationName}\n          onChange={(e) => setStationName(e.target.value)}\n          style={{ padding: '10px', marginRight: '10px' }}\n        />\n        <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n      </div>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Schedule ID</th>\n            <th>Transit Line Name</th>\n            <th>Travel Time</th>\n            <th>Arrival Date</th>\n            <th>Arrival Time</th>\n            <th>Departure Date</th>\n            <th>Departure Time</th>\n            <th>Train ID</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredSchedules.map((schedule) => (\n            <tr key={schedule.ScheduleID}>\n              <td>{schedule.ScheduleID}</td>\n              <td>{schedule.TransitLineName}</td>\n              <td>{schedule.TravelTime}</td>\n              <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n              <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n              <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n              <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n              <td>{schedule.TrainID}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ManageSchedulesTab;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}