{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState('');\n// //   const [editMode, setEditMode] = useState(null);\n// //   const [formValues, setFormValues] = useState({});\n\n// //   // Fetch schedules on component mount\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Function to fetch train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/representative/schedules');\n// //       setSchedules(response.data.schedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle delete schedule\n// //   const deleteSchedule = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete schedule.');\n// //     }\n// //   };\n\n// //   // Handle edit schedule\n// //   const editSchedule = (schedule) => {\n// //     setEditMode(schedule.ScheduleID);\n// //     setFormValues({\n// //       TransitLineName: schedule.TransitLineName,\n// //       DepartureDateTime: schedule.DepartureDateTime,\n// //       ArrivalDateTime: schedule.ArrivalDateTime,\n// //       TravelTime: schedule.TravelTime,\n// //     });\n// //   };\n\n// //   // Handle form input changes\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setFormValues({ ...formValues, [name]: value });\n// //   };\n\n// //   // Handle save edited schedule\n// //   const saveSchedule = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// //       setEditMode(null);\n// //       fetchSchedules();\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update schedule.');\n// //     }\n// //   };\n\n// //   // Render\n// //   return (\n// //     <div>\n// //       <h2>Manage Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line</th>\n// //             <th>Departure Time</th>\n// //             <th>Arrival Time</th>\n// //             <th>Travel Time</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <input\n// //                     type=\"text\"\n// //                     name=\"TransitLineName\"\n// //                     value={formValues.TransitLineName}\n// //                     onChange={handleInputChange}\n// //                   />\n// //                 ) : (\n// //                   schedule.TransitLineName\n// //                 )}\n// //               </td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     name=\"DepartureDateTime\"\n// //                     value={formValues.DepartureDateTime}\n// //                     onChange={handleInputChange}\n// //                   />\n// //                 ) : (\n// //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// //                 )}\n// //               </td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     name=\"ArrivalDateTime\"\n// //                     value={formValues.ArrivalDateTime}\n// //                     onChange={handleInputChange}\n// //                   />\n// //                 ) : (\n// //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// //                 )}\n// //               </td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <input\n// //                     type=\"time\"\n// //                     name=\"TravelTime\"\n// //                     value={formValues.TravelTime}\n// //                     onChange={handleInputChange}\n// //                   />\n// //                 ) : (\n// //                   schedule.TravelTime\n// //                 )}\n// //               </td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <>\n// //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// //                   </>\n// //                 ) : (\n// //                   <>\n// //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// //                   </>\n// //                 )}\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainId: '',\n// //   });\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// //   };\n\n// //   const addSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// //       fetchSchedules(); // Refresh the list after adding a new schedule\n// //     } catch (err) {\n// //       console.error('Error adding schedule:', err);\n// //       setError('Failed to add new schedule.');\n// //     }\n// //   };\n\n// //   const editSchedule = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       fetchSchedules(); // Refresh the list after editing\n// //     } catch (err) {\n// //       console.error('Error editing schedule:', err);\n// //       setError('Failed to edit schedule.');\n// //     }\n// //   };\n\n// //   const deleteSchedule = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       fetchSchedules(); // Refresh the list after deleting\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Form to Add New Schedule */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"time\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainId\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainId}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <button onClick={addSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Schedule Table */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.TransitLineName}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"time\"\n// //                   value={schedule.TravelTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   value={schedule.ArrivalDateTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   value={schedule.DepartureDateTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.TrainID}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainId: '',\n// //   });\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// //   };\n\n// //   const addSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       fetchSchedules(); // Refresh the list after adding a new schedule\n// //     } catch (err) {\n// //       console.error('Error adding schedule:', err);\n// //       setError('Failed to add new schedule.');\n// //     }\n// //   };\n\n// //   const editSchedule = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       fetchSchedules(); // Refresh the list after editing\n// //     } catch (err) {\n// //       console.error('Error editing schedule:', err);\n// //       setError('Failed to edit schedule.');\n// //     }\n// //   };\n\n// //   const deleteSchedule = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       fetchSchedules(); // Refresh the list after deleting\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Form to Add New Schedule */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"time\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainId\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainId}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <button onClick={addSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Schedule Table */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.TransitLineName}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"time\"\n// //                   value={schedule.TravelTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.ArrivalDateTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.DepartureDateTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.TrainID}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>{schedule.TransitLineName}</td>\n// //               <td>{schedule.TravelTime}</td>\n// //               <td>{schedule.ArrivalDateTime}</td>\n// //               <td>{schedule.DepartureDateTime}</td>\n// //               <td>{schedule.TrainID}</td>\n// //               <td>\n// //                 <button\n// //                   onClick={() => console.log('Edit schedule')}\n// //                   style={{ marginRight: '5px' }}\n// //                 >\n// //                   Edit\n// //                 </button>\n// //                 {schedule.ReservationCount === 0 ? (\n// //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                 ) : (\n// //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                 )}\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule(schedule);\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TravelTime\"\n// //                       value={editingSchedule.TravelTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"ArrivalDateTime\"\n// //                       value={editingSchedule.ArrivalDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"DepartureDateTime\"\n// //                       value={editingSchedule.DepartureDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime}</td>\n// //                   <td>{schedule.DepartureDateTime}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule(schedule);\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TravelTime\"\n// //                       value={editingSchedule.TravelTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"ArrivalDateTime\"\n// //                       value={editingSchedule.ArrivalDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"DepartureDateTime\"\n// //                       value={editingSchedule.DepartureDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime}</td>\n// //                   <td>{schedule.DepartureDateTime}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n// //   const [transitLineName, setTransitLineName] = useState('');\n// //   const [travelTime, setTravelTime] = useState('');\n// //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// //   const [departureDateTime, setDepartureDateTime] = useState('');\n// //   const [trainID, setTrainID] = useState('');\n// //   const [success, setSuccess] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule(schedule);\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   // Handle adding a new schedule\n// //   const handleAddSchedule = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// //         TransitLineName: transitLineName,\n// //         TravelTime: travelTime,\n// //         ArrivalDateTime: arrivalDateTime,\n// //         DepartureDateTime: departureDateTime,\n// //         TrainID: trainID,\n// //       });\n\n// //       setSuccess(response.data.message);\n// //       setError('');\n// //       fetchSchedules(); // Refresh the schedule list\n\n// //       // Clear form fields\n// //       setTransitLineName('');\n// //       setTravelTime('');\n// //       setArrivalDateTime('');\n// //       setDepartureDateTime('');\n// //       setTrainID('');\n// //     } catch (err) {\n// //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// //       setSuccess('');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n\n// //       {/* Add Train Schedule Form */}\n// //       <div>\n// //         <h3>Add Train Schedule</h3>\n// //         <form onSubmit={handleAddSchedule}>\n// //           <div>\n// //             <label>Transit Line Name:</label>\n// //             <input\n// //               type=\"text\"\n// //               value={transitLineName}\n// //               onChange={(e) => setTransitLineName(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Travel Time (hh:mm:ss):</label>\n// //             <input\n// //               type=\"text\"\n// //               value={travelTime}\n// //               onChange={(e) => setTravelTime(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// //             <input\n// //               type=\"text\"\n// //               value={arrivalDateTime}\n// //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// //             <input\n// //               type=\"text\"\n// //               value={departureDateTime}\n// //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Train ID:</label>\n// //             <input\n// //               type=\"text\"\n// //               value={trainID}\n// //               onChange={(e) => setTrainID(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Add Schedule</button>\n// //         </form>\n// //         {error && <p className=\"error\">{error}</p>}\n// //         {success && <p className=\"success\">{success}</p>}\n// //       </div>\n\n// //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TravelTime\"\n// //                       value={editingSchedule.TravelTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"ArrivalDateTime\"\n// //                       value={editingSchedule.ArrivalDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"DepartureDateTime\"\n// //                       value={editingSchedule.DepartureDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime}</td>\n// //                   <td>{schedule.DepartureDateTime}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>{editingSchedule.TravelTime}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"ArrivalDate\"\n// //                       value={editingSchedule.ArrivalDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"ArrivalTime\"\n// //                       value={editingSchedule.ArrivalTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"DepartureDate\"\n// //                       value={editingSchedule.DepartureDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"DepartureTime\"\n// //                       value={editingSchedule.DepartureTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n// //   const [stationName, setStationName] = useState('');\n// //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setFilteredSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   // Fetch schedules by station name\n// //   const fetchSchedulesByStation = async () => {\n// //     if (!stationName) {\n// //       setError(\"Please enter a station name.\");\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// //         params: { stationName },\n// //       });\n// //       setFilteredSchedules(response.data.trainSchedules);\n// //       if (response.data.trainSchedules.length === 0) {\n// //         setError(\"No schedules found for this station.\");\n// //       } else {\n// //         setError(\"\");\n// //       }\n// //     } catch (err) {\n// //       console.error('Error fetching schedules by station:', err);\n// //       setError('Failed to fetch schedules for the specified station.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter schedules\"\n// //           value={stationName}\n// //           onChange={(e) => setStationName(e.target.value)}\n// //           style={{ padding: '10px', marginRight: '10px' }}\n// //         />\n// //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// //       </div>\n\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {filteredSchedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>{editingSchedule.TravelTime}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"ArrivalDate\"\n// //                       value={editingSchedule.ArrivalDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"ArrivalTime\"\n// //                       value={editingSchedule.ArrivalTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"DepartureDate\"\n// //                       value={editingSchedule.DepartureDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"DepartureTime\"\n// //                       value={editingSchedule.DepartureTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n// //   const [stationName, setStationName] = useState('');\n// //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setFilteredSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   // Fetch schedules by station name\n// //   const fetchSchedulesByStation = async () => {\n// //     if (!stationName) {\n// //       setError(\"Please enter a station name.\");\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// //         params: { stationName },\n// //       });\n// //       setFilteredSchedules(response.data.trainSchedules);\n// //       if (response.data.trainSchedules.length === 0) {\n// //         setError(\"No schedules found for this station.\");\n// //       } else {\n// //         setError(\"\");\n// //       }\n// //     } catch (err) {\n// //       console.error('Error fetching schedules by station:', err);\n// //       setError('Failed to fetch schedules for the specified station.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Manage Train Schedules Section */}\n// //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>{editingSchedule.TravelTime}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"ArrivalDate\"\n// //                       value={editingSchedule.ArrivalDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"ArrivalTime\"\n// //                       value={editingSchedule.ArrivalTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"DepartureDate\"\n// //                       value={editingSchedule.DepartureDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"DepartureTime\"\n// //                       value={editingSchedule.DepartureTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n\n// //       {/* Search Train Schedules by Station Section */}\n// //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter schedules\"\n// //           value={stationName}\n// //           onChange={(e) => setStationName(e.target.value)}\n// //           style={{ padding: '10px', marginRight: '10px' }}\n// //         />\n// //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// //       </div>\n\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {filteredSchedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>{schedule.TransitLineName}</td>\n// //               <td>{schedule.TravelTime}</td>\n// //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //               <td>{schedule.TrainID}</td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n// //   const [stationName, setStationName] = useState('');\n// //   const [originSchedules, setOriginSchedules] = useState([]);\n// //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   // Fetch schedules by station name (origin and destination)\n// //   const fetchSchedulesByStation = async () => {\n// //     if (!stationName) {\n// //       setError(\"Please enter a station name.\");\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// //         params: { stationName },\n// //       });\n// //       setOriginSchedules(response.data.originSchedules);\n// //       setDestinationSchedules(response.data.destinationSchedules);\n// //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// //         setError(\"No schedules found for this station.\");\n// //       } else {\n// //         setError(\"\");\n// //       }\n// //     } catch (err) {\n// //       console.error('Error fetching schedules by station:', err);\n// //       setError('Failed to fetch schedules for the specified station.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Manage Train Schedules Section */}\n// //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>{editingSchedule.TravelTime}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"ArrivalDate\"\n// //                       value={editingSchedule.ArrivalDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"ArrivalTime\"\n// //                       value={editingSchedule.ArrivalTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"DepartureDate\"\n// //                       value={editingSchedule.DepartureDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"DepartureTime\"\n// //                       value={editingSchedule.DepartureTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n\n// //       {/* Search Train Schedules by Station Section */}\n// //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name\"\n// //           value={stationName}\n// //           onChange={(e) => setStationName(e.target.value)}\n// //           style={{ padding: '10px', marginRight: '10px' }}\n// //         />\n// //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// //       </div>\n\n// //       <h4>Schedules with Station as Origin</h4>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {originSchedules.length > 0 ? (\n// //             originSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.TravelTime}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.TrainID}</td>\n// //               </tr>\n// //             ))\n// //           ) : (\n// //             <tr>\n// //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// //             </tr>\n// //           )}\n// //         </tbody>\n// //       </table>\n\n// //       <h4>Schedules with Station as Destination</h4>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {destinationSchedules.length > 0 ? (\n// //             destinationSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.TravelTime}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.TrainID}</td>\n// //               </tr>\n// //             ))\n// //           ) : (\n// //             <tr>\n// //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// //             </tr>\n// //           )}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Add Train Schedule</h3>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time (HH:MM)\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainID\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainID}\n//           onChange={handleInputChange}\n//         />\n\n//         <h4>Select Stops</h4>\n//         {stations.map((station) => (\n//           <div key={station.StationID}>\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 value={station.StationID}\n//                 onChange={handleStopSelection}\n//               />\n//               {station.StationName}\n//             </label>\n//             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//               <div>\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Arrival DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                   }\n//                 />\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Departure DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                   }\n//                 />\n//               </div>\n//             )}\n//           </div>\n//         ))}\n\n//         <button onClick={handleAddSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Train Schedules Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime}</td>\n//               <td>{schedule.DepartureDateTime}</td>\n//               <td>{schedule.TrainID}</td>\n//               <td>\n//                 {/* You can implement edit and delete buttons here */}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ManageSchedulesTab = () => {\n  _s();\n  const [schedules, setSchedules] = useState([]);\n  const [stations, setStations] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDateTime: '',\n    departureDateTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [searchStationName, setSearchStationName] = useState('');\n  const [searchedSchedules, setSearchedSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchSchedules();\n    fetchStations();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available stations for stops selection\n  const fetchStations = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setStations(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stations:', err);\n    }\n  };\n\n  // Handle input change for new schedule form\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewSchedule(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle stops selection\n  const handleStopSelection = e => {\n    const stationID = parseInt(e.target.value);\n    const isChecked = e.target.checked;\n    setNewSchedule(prev => {\n      const updatedStops = isChecked ? [...prev.stops, {\n        stationID,\n        arrivalDateTime: '',\n        departureDateTime: ''\n      }] : prev.stops.filter(stop => stop.stationID !== stationID);\n      return {\n        ...prev,\n        stops: updatedStops\n      };\n    });\n  };\n\n  // Handle arrival and departure date-time changes for each stop\n  const handleStopDateTimeChange = (stationID, field, value) => {\n    setNewSchedule(prev => {\n      const updatedStops = prev.stops.map(stop => {\n        if (stop.stationID === stationID) {\n          return {\n            ...stop,\n            [field]: value\n          };\n        }\n        return stop;\n      });\n      return {\n        ...prev,\n        stops: updatedStops\n      };\n    });\n  };\n\n  // Handle save button click for adding the new schedule\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDateTime: '',\n        departureDateTime: '',\n        trainID: '',\n        stops: []\n      });\n      fetchSchedules(); // Re-fetch schedules to reflect the new addition\n      setError('');\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle search for schedules by station name\n  const handleSearchSchedules = async () => {\n    if (!searchStationName) {\n      setError('Please enter a station name to search.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n      setSearchedSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error searching schedules:', err);\n      setError('Failed to search schedules.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = schedule => {\n    var _schedule$ArrivalDate, _schedule$DepartureDa;\n    setEditingSchedule({\n      ...schedule,\n      ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n      ArrivalTime: (_schedule$ArrivalDate = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate === void 0 ? void 0 : _schedule$ArrivalDate.substring(0, 5),\n      DepartureDate: schedule.DepartureDateTime.split('T')[0],\n      DepartureTime: (_schedule$DepartureDa = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa === void 0 ? void 0 : _schedule$DepartureDa.substring(0, 5)\n    });\n  };\n\n  // Handle input change for editable fields\n  const handleEditInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditingSchedule(prev => {\n      const updatedSchedule = {\n        ...prev,\n        [name]: value\n      };\n\n      // Automatically calculate travel time if arrival or departure changes\n      if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n        const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n        const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n        if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n          const arrival = new Date(arrivalDateTime);\n          const departure = new Date(departureDateTime);\n\n          // Calculate the travel time in hours and minutes\n          const diffMs = Math.abs(arrival - departure);\n          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n          const diffMinutes = Math.floor(diffMs % (1000 * 60 * 60) / (1000 * 60));\n          updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n        }\n      }\n      return updatedSchedule;\n    });\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async scheduleId => {\n    try {\n      const updatedSchedule = {\n        ...editingSchedule,\n        ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n        DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`\n      };\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async scheduleId => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter(schedule => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2697,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2698,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Train Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2702,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"transitLineName\",\n        placeholder: \"Transit Line Name\",\n        value: newSchedule.transitLineName,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2703,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"travelTime\",\n        placeholder: \"Travel Time (HH:MM)\",\n        value: newSchedule.travelTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2710,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        name: \"arrivalDateTime\",\n        placeholder: \"Arrival DateTime\",\n        value: newSchedule.arrivalDateTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2717,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        name: \"departureDateTime\",\n        placeholder: \"Departure DateTime\",\n        value: newSchedule.departureDateTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2724,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"trainID\",\n        placeholder: \"Train ID\",\n        value: newSchedule.trainID,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2731,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Stops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2739,\n        columnNumber: 9\n      }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: station.StationID,\n            onChange: handleStopSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2743,\n            columnNumber: 15\n          }, this), station.StationName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2742,\n          columnNumber: 13\n        }, this), newSchedule.stops.some(stop => stop.stationID === station.StationID) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"Arrival DateTime\",\n            onChange: e => handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2752,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"Departure DateTime\",\n            onChange: e => handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2759,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2751,\n          columnNumber: 15\n        }, this)]\n      }, station.StationID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2741,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSchedule,\n        children: \"Add Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2771,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2701,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Search Train Schedules by Station (Origin or Destination)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2776,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter station name to filter\",\n        value: searchStationName,\n        onChange: e => setSearchStationName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2777,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchSchedules,\n        children: \"Search Schedules by Station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2783,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2775,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Schedule ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2790,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transit Line Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2791,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Travel Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2792,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2793,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2794,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2795,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2796,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Train ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2797,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2798,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2789,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2788,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: searchedSchedules.length > 0 ? searchedSchedules.map(schedule => {\n          var _schedule$ArrivalDate2, _schedule$DepartureDa2;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ScheduleID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2805,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TransitLineName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2806,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TravelTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2807,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ArrivalDateTime.split('T')[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2808,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (_schedule$ArrivalDate2 = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate2 === void 0 ? void 0 : _schedule$ArrivalDate2.substring(0, 5)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2809,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.DepartureDateTime.split('T')[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2810,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (_schedule$DepartureDa2 = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa2 === void 0 ? void 0 : _schedule$DepartureDa2.substring(0, 5)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2811,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TrainID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2812,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleEditClick(schedule),\n                style: {\n                  marginRight: '5px'\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2814,\n                columnNumber: 21\n              }, this), schedule.ReservationCount === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDelete(schedule.ScheduleID),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2818,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: true,\n                title: \"Cannot delete. Reservations exist.\",\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2820,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2813,\n              columnNumber: 19\n            }, this)]\n          }, schedule.ScheduleID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2804,\n            columnNumber: 17\n          }, this);\n        }) : schedules.map(schedule => {\n          var _schedule$ArrivalDate3, _schedule$DepartureDa3;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2829,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"TransitLineName\",\n                  value: editingSchedule.TransitLineName,\n                  onChange: handleEditInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2831,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2830,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingSchedule.TravelTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2838,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  name: \"ArrivalDate\",\n                  value: editingSchedule.ArrivalDate,\n                  onChange: handleEditInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2840,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2839,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  name: \"ArrivalTime\",\n                  value: editingSchedule.ArrivalTime,\n                  onChange: handleEditInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2848,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2847,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  name: \"DepartureDate\",\n                  value: editingSchedule.DepartureDate,\n                  onChange: handleEditInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2856,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2855,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  name: \"DepartureTime\",\n                  value: editingSchedule.DepartureTime,\n                  onChange: handleEditInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2864,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2863,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"TrainID\",\n                  value: editingSchedule.TrainID,\n                  onChange: handleEditInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2872,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2871,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSave(schedule.ScheduleID),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2880,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleCancel,\n                  style: {\n                    marginLeft: '5px'\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2881,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2879,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2886,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TransitLineName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2887,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TravelTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2888,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ArrivalDateTime.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2889,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_schedule$ArrivalDate3 = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate3 === void 0 ? void 0 : _schedule$ArrivalDate3.substring(0, 5)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2890,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.DepartureDateTime.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2891,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_schedule$DepartureDa3 = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa3 === void 0 ? void 0 : _schedule$DepartureDa3.substring(0, 5)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2892,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TrainID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2893,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEditClick(schedule),\n                  style: {\n                    marginRight: '5px'\n                  },\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2895,\n                  columnNumber: 25\n                }, this), schedule.ReservationCount === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDelete(schedule.ScheduleID),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2899,\n                  columnNumber: 27\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: true,\n                  title: \"Cannot delete. Reservations exist.\",\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2901,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2894,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true)\n          }, schedule.ScheduleID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2826,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2801,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2787,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2696,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageSchedulesTab, \"YvPz/0mOOm+cY/J5AtM3C9ZGY30=\");\n_c = ManageSchedulesTab;\nexport default ManageSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"ManageSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","Fragment","_Fragment","ManageSchedulesTab","_s","schedules","setSchedules","stations","setStations","newSchedule","setNewSchedule","transitLineName","travelTime","arrivalDateTime","departureDateTime","trainID","stops","searchStationName","setSearchStationName","searchedSchedules","setSearchedSchedules","editingSchedule","setEditingSchedule","error","setError","fetchSchedules","fetchStations","response","get","data","trainSchedules","err","console","handleInputChange","e","name","value","target","prev","handleStopSelection","stationID","parseInt","isChecked","checked","updatedStops","filter","stop","handleStopDateTimeChange","field","map","handleAddSchedule","post","handleSearchSchedules","handleEditClick","schedule","_schedule$ArrivalDate","_schedule$DepartureDa","ArrivalDate","ArrivalDateTime","split","ArrivalTime","substring","DepartureDate","DepartureDateTime","DepartureTime","handleEditInputChange","updatedSchedule","arrival","Date","departure","diffMs","Math","abs","diffHours","floor","diffMinutes","TravelTime","handleSave","scheduleId","put","handleCancel","handleDelete","delete","ScheduleID","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","marginBottom","type","placeholder","onChange","station","StationID","StationName","some","onClick","length","_schedule$ArrivalDate2","_schedule$DepartureDa2","TransitLineName","TrainID","marginRight","ReservationCount","disabled","title","_schedule$ArrivalDate3","_schedule$DepartureDa3","marginLeft","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState('');\n// //   const [editMode, setEditMode] = useState(null);\n// //   const [formValues, setFormValues] = useState({});\n\n// //   // Fetch schedules on component mount\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Function to fetch train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/representative/schedules');\n// //       setSchedules(response.data.schedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle delete schedule\n// //   const deleteSchedule = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete schedule.');\n// //     }\n// //   };\n\n// //   // Handle edit schedule\n// //   const editSchedule = (schedule) => {\n// //     setEditMode(schedule.ScheduleID);\n// //     setFormValues({\n// //       TransitLineName: schedule.TransitLineName,\n// //       DepartureDateTime: schedule.DepartureDateTime,\n// //       ArrivalDateTime: schedule.ArrivalDateTime,\n// //       TravelTime: schedule.TravelTime,\n// //     });\n// //   };\n\n// //   // Handle form input changes\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setFormValues({ ...formValues, [name]: value });\n// //   };\n\n// //   // Handle save edited schedule\n// //   const saveSchedule = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// //       setEditMode(null);\n// //       fetchSchedules();\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update schedule.');\n// //     }\n// //   };\n\n// //   // Render\n// //   return (\n// //     <div>\n// //       <h2>Manage Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line</th>\n// //             <th>Departure Time</th>\n// //             <th>Arrival Time</th>\n// //             <th>Travel Time</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <input\n// //                     type=\"text\"\n// //                     name=\"TransitLineName\"\n// //                     value={formValues.TransitLineName}\n// //                     onChange={handleInputChange}\n// //                   />\n// //                 ) : (\n// //                   schedule.TransitLineName\n// //                 )}\n// //               </td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     name=\"DepartureDateTime\"\n// //                     value={formValues.DepartureDateTime}\n// //                     onChange={handleInputChange}\n// //                   />\n// //                 ) : (\n// //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// //                 )}\n// //               </td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     name=\"ArrivalDateTime\"\n// //                     value={formValues.ArrivalDateTime}\n// //                     onChange={handleInputChange}\n// //                   />\n// //                 ) : (\n// //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// //                 )}\n// //               </td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <input\n// //                     type=\"time\"\n// //                     name=\"TravelTime\"\n// //                     value={formValues.TravelTime}\n// //                     onChange={handleInputChange}\n// //                   />\n// //                 ) : (\n// //                   schedule.TravelTime\n// //                 )}\n// //               </td>\n// //               <td>\n// //                 {editMode === schedule.ScheduleID ? (\n// //                   <>\n// //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// //                   </>\n// //                 ) : (\n// //                   <>\n// //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// //                   </>\n// //                 )}\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainId: '',\n// //   });\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// //   };\n\n// //   const addSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// //       fetchSchedules(); // Refresh the list after adding a new schedule\n// //     } catch (err) {\n// //       console.error('Error adding schedule:', err);\n// //       setError('Failed to add new schedule.');\n// //     }\n// //   };\n\n// //   const editSchedule = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       fetchSchedules(); // Refresh the list after editing\n// //     } catch (err) {\n// //       console.error('Error editing schedule:', err);\n// //       setError('Failed to edit schedule.');\n// //     }\n// //   };\n\n// //   const deleteSchedule = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       fetchSchedules(); // Refresh the list after deleting\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Form to Add New Schedule */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"time\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainId\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainId}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <button onClick={addSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Schedule Table */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.TransitLineName}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"time\"\n// //                   value={schedule.TravelTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   value={schedule.ArrivalDateTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   value={schedule.DepartureDateTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.TrainID}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainId: '',\n// //   });\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// //   };\n\n// //   const addSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       fetchSchedules(); // Refresh the list after adding a new schedule\n// //     } catch (err) {\n// //       console.error('Error adding schedule:', err);\n// //       setError('Failed to add new schedule.');\n// //     }\n// //   };\n\n// //   const editSchedule = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       fetchSchedules(); // Refresh the list after editing\n// //     } catch (err) {\n// //       console.error('Error editing schedule:', err);\n// //       setError('Failed to edit schedule.');\n// //     }\n// //   };\n\n// //   const deleteSchedule = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       fetchSchedules(); // Refresh the list after deleting\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Form to Add New Schedule */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"time\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainId\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainId}\n// //           onChange={handleInputChange}\n// //           style={{ marginRight: '10px' }}\n// //         />\n// //         <button onClick={addSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Schedule Table */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.TransitLineName}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"time\"\n// //                   value={schedule.TravelTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.ArrivalDateTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.DepartureDateTime}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <input\n// //                   type=\"text\"\n// //                   value={schedule.TrainID}\n// //                   onChange={(e) =>\n// //                     setSchedules((prev) =>\n// //                       prev.map((s) =>\n// //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// //                       )\n// //                     )\n// //                   }\n// //                 />\n// //               </td>\n// //               <td>\n// //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>{schedule.TransitLineName}</td>\n// //               <td>{schedule.TravelTime}</td>\n// //               <td>{schedule.ArrivalDateTime}</td>\n// //               <td>{schedule.DepartureDateTime}</td>\n// //               <td>{schedule.TrainID}</td>\n// //               <td>\n// //                 <button\n// //                   onClick={() => console.log('Edit schedule')}\n// //                   style={{ marginRight: '5px' }}\n// //                 >\n// //                   Edit\n// //                 </button>\n// //                 {schedule.ReservationCount === 0 ? (\n// //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                 ) : (\n// //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                 )}\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule(schedule);\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TravelTime\"\n// //                       value={editingSchedule.TravelTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"ArrivalDateTime\"\n// //                       value={editingSchedule.ArrivalDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"DepartureDateTime\"\n// //                       value={editingSchedule.DepartureDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime}</td>\n// //                   <td>{schedule.DepartureDateTime}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule(schedule);\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TravelTime\"\n// //                       value={editingSchedule.TravelTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"ArrivalDateTime\"\n// //                       value={editingSchedule.ArrivalDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"DepartureDateTime\"\n// //                       value={editingSchedule.DepartureDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime}</td>\n// //                   <td>{schedule.DepartureDateTime}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n// //   const [transitLineName, setTransitLineName] = useState('');\n// //   const [travelTime, setTravelTime] = useState('');\n// //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// //   const [departureDateTime, setDepartureDateTime] = useState('');\n// //   const [trainID, setTrainID] = useState('');\n// //   const [success, setSuccess] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule(schedule);\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   // Handle adding a new schedule\n// //   const handleAddSchedule = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// //         TransitLineName: transitLineName,\n// //         TravelTime: travelTime,\n// //         ArrivalDateTime: arrivalDateTime,\n// //         DepartureDateTime: departureDateTime,\n// //         TrainID: trainID,\n// //       });\n\n// //       setSuccess(response.data.message);\n// //       setError('');\n// //       fetchSchedules(); // Refresh the schedule list\n\n// //       // Clear form fields\n// //       setTransitLineName('');\n// //       setTravelTime('');\n// //       setArrivalDateTime('');\n// //       setDepartureDateTime('');\n// //       setTrainID('');\n// //     } catch (err) {\n// //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// //       setSuccess('');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n\n// //       {/* Add Train Schedule Form */}\n// //       <div>\n// //         <h3>Add Train Schedule</h3>\n// //         <form onSubmit={handleAddSchedule}>\n// //           <div>\n// //             <label>Transit Line Name:</label>\n// //             <input\n// //               type=\"text\"\n// //               value={transitLineName}\n// //               onChange={(e) => setTransitLineName(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Travel Time (hh:mm:ss):</label>\n// //             <input\n// //               type=\"text\"\n// //               value={travelTime}\n// //               onChange={(e) => setTravelTime(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// //             <input\n// //               type=\"text\"\n// //               value={arrivalDateTime}\n// //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// //             <input\n// //               type=\"text\"\n// //               value={departureDateTime}\n// //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <div>\n// //             <label>Train ID:</label>\n// //             <input\n// //               type=\"text\"\n// //               value={trainID}\n// //               onChange={(e) => setTrainID(e.target.value)}\n// //               required\n// //             />\n// //           </div>\n// //           <button type=\"submit\">Add Schedule</button>\n// //         </form>\n// //         {error && <p className=\"error\">{error}</p>}\n// //         {success && <p className=\"success\">{success}</p>}\n// //       </div>\n\n// //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TravelTime\"\n// //                       value={editingSchedule.TravelTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"ArrivalDateTime\"\n// //                       value={editingSchedule.ArrivalDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"DepartureDateTime\"\n// //                       value={editingSchedule.DepartureDateTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime}</td>\n// //                   <td>{schedule.DepartureDateTime}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n      \n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n          \n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>{editingSchedule.TravelTime}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"ArrivalDate\"\n// //                       value={editingSchedule.ArrivalDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"ArrivalTime\"\n// //                       value={editingSchedule.ArrivalTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"DepartureDate\"\n// //                       value={editingSchedule.DepartureDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"DepartureTime\"\n// //                       value={editingSchedule.DepartureTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n// //   const [stationName, setStationName] = useState('');\n// //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setFilteredSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   // Fetch schedules by station name\n// //   const fetchSchedulesByStation = async () => {\n// //     if (!stationName) {\n// //       setError(\"Please enter a station name.\");\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// //         params: { stationName },\n// //       });\n// //       setFilteredSchedules(response.data.trainSchedules);\n// //       if (response.data.trainSchedules.length === 0) {\n// //         setError(\"No schedules found for this station.\");\n// //       } else {\n// //         setError(\"\");\n// //       }\n// //     } catch (err) {\n// //       console.error('Error fetching schedules by station:', err);\n// //       setError('Failed to fetch schedules for the specified station.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter schedules\"\n// //           value={stationName}\n// //           onChange={(e) => setStationName(e.target.value)}\n// //           style={{ padding: '10px', marginRight: '10px' }}\n// //         />\n// //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// //       </div>\n\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {filteredSchedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>{editingSchedule.TravelTime}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"ArrivalDate\"\n// //                       value={editingSchedule.ArrivalDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"ArrivalTime\"\n// //                       value={editingSchedule.ArrivalTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"DepartureDate\"\n// //                       value={editingSchedule.DepartureDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"DepartureTime\"\n// //                       value={editingSchedule.DepartureTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n// //   const [stationName, setStationName] = useState('');\n// //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setFilteredSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   // Fetch schedules by station name\n// //   const fetchSchedulesByStation = async () => {\n// //     if (!stationName) {\n// //       setError(\"Please enter a station name.\");\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// //         params: { stationName },\n// //       });\n// //       setFilteredSchedules(response.data.trainSchedules);\n// //       if (response.data.trainSchedules.length === 0) {\n// //         setError(\"No schedules found for this station.\");\n// //       } else {\n// //         setError(\"\");\n// //       }\n// //     } catch (err) {\n// //       console.error('Error fetching schedules by station:', err);\n// //       setError('Failed to fetch schedules for the specified station.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Manage Train Schedules Section */}\n// //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>{editingSchedule.TravelTime}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"ArrivalDate\"\n// //                       value={editingSchedule.ArrivalDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"ArrivalTime\"\n// //                       value={editingSchedule.ArrivalTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"DepartureDate\"\n// //                       value={editingSchedule.DepartureDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"DepartureTime\"\n// //                       value={editingSchedule.DepartureTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n\n// //       {/* Search Train Schedules by Station Section */}\n// //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter schedules\"\n// //           value={stationName}\n// //           onChange={(e) => setStationName(e.target.value)}\n// //           style={{ padding: '10px', marginRight: '10px' }}\n// //         />\n// //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// //       </div>\n\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {filteredSchedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>{schedule.TransitLineName}</td>\n// //               <td>{schedule.TravelTime}</td>\n// //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //               <td>{schedule.TrainID}</td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n// //   const [stationName, setStationName] = useState('');\n// //   const [originSchedules, setOriginSchedules] = useState([]);\n// //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   // Fetch schedules by station name (origin and destination)\n// //   const fetchSchedulesByStation = async () => {\n// //     if (!stationName) {\n// //       setError(\"Please enter a station name.\");\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// //         params: { stationName },\n// //       });\n// //       setOriginSchedules(response.data.originSchedules);\n// //       setDestinationSchedules(response.data.destinationSchedules);\n// //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// //         setError(\"No schedules found for this station.\");\n// //       } else {\n// //         setError(\"\");\n// //       }\n// //     } catch (err) {\n// //       console.error('Error fetching schedules by station:', err);\n// //       setError('Failed to fetch schedules for the specified station.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Manage Train Schedules Section */}\n// //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TransitLineName\"\n// //                       value={editingSchedule.TransitLineName}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>{editingSchedule.TravelTime}</td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"ArrivalDate\"\n// //                       value={editingSchedule.ArrivalDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"ArrivalTime\"\n// //                       value={editingSchedule.ArrivalTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"date\"\n// //                       name=\"DepartureDate\"\n// //                       value={editingSchedule.DepartureDate}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"time\"\n// //                       name=\"DepartureTime\"\n// //                       value={editingSchedule.DepartureTime}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <input\n// //                       type=\"text\"\n// //                       name=\"TrainID\"\n// //                       value={editingSchedule.TrainID}\n// //                       onChange={handleInputChange}\n// //                     />\n// //                   </td>\n// //                   <td>\n// //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                   </td>\n// //                 </>\n// //               ) : (\n// //                 <>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </>\n// //               )}\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n\n// //       {/* Search Train Schedules by Station Section */}\n// //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name\"\n// //           value={stationName}\n// //           onChange={(e) => setStationName(e.target.value)}\n// //           style={{ padding: '10px', marginRight: '10px' }}\n// //         />\n// //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// //       </div>\n\n// //       <h4>Schedules with Station as Origin</h4>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {originSchedules.length > 0 ? (\n// //             originSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.TravelTime}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.TrainID}</td>\n// //               </tr>\n// //             ))\n// //           ) : (\n// //             <tr>\n// //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// //             </tr>\n// //           )}\n// //         </tbody>\n// //       </table>\n\n// //       <h4>Schedules with Station as Destination</h4>\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {destinationSchedules.length > 0 ? (\n// //             destinationSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.TravelTime}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.TrainID}</td>\n// //               </tr>\n// //             ))\n// //           ) : (\n// //             <tr>\n// //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// //             </tr>\n// //           )}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n      \n//       {/* Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Add Train Schedule</h3>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time (HH:MM)\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainID\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainID}\n//           onChange={handleInputChange}\n//         />\n\n//         <h4>Select Stops</h4>\n//         {stations.map((station) => (\n//           <div key={station.StationID}>\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 value={station.StationID}\n//                 onChange={handleStopSelection}\n//               />\n//               {station.StationName}\n//             </label>\n//             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//               <div>\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Arrival DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                   }\n//                 />\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Departure DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                   }\n//                 />\n//               </div>\n//             )}\n//           </div>\n//         ))}\n\n//         <button onClick={handleAddSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Train Schedules Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime}</td>\n//               <td>{schedule.DepartureDateTime}</td>\n//               <td>{schedule.TrainID}</td>\n//               <td>\n//                 {/* You can implement edit and delete buttons here */}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ManageSchedulesTab = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [stations, setStations] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDateTime: '',\n    departureDateTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [searchStationName, setSearchStationName] = useState('');\n  const [searchedSchedules, setSearchedSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchSchedules();\n    fetchStations();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available stations for stops selection\n  const fetchStations = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setStations(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stations:', err);\n    }\n  };\n\n  // Handle input change for new schedule form\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewSchedule((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle stops selection\n  const handleStopSelection = (e) => {\n    const stationID = parseInt(e.target.value);\n    const isChecked = e.target.checked;\n\n    setNewSchedule((prev) => {\n      const updatedStops = isChecked\n        ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n        : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n      return { ...prev, stops: updatedStops };\n    });\n  };\n\n  // Handle arrival and departure date-time changes for each stop\n  const handleStopDateTimeChange = (stationID, field, value) => {\n    setNewSchedule((prev) => {\n      const updatedStops = prev.stops.map((stop) => {\n        if (stop.stationID === stationID) {\n          return { ...stop, [field]: value };\n        }\n        return stop;\n      });\n      return { ...prev, stops: updatedStops };\n    });\n  };\n\n  // Handle save button click for adding the new schedule\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDateTime: '',\n        departureDateTime: '',\n        trainID: '',\n        stops: []\n      });\n      fetchSchedules(); // Re-fetch schedules to reflect the new addition\n      setError('');\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle search for schedules by station name\n  const handleSearchSchedules = async () => {\n    if (!searchStationName) {\n      setError('Please enter a station name to search.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n      setSearchedSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error searching schedules:', err);\n      setError('Failed to search schedules.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = (schedule) => {\n    setEditingSchedule({\n      ...schedule,\n      ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n      ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n      DepartureDate: schedule.DepartureDateTime.split('T')[0],\n      DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n    });\n  };\n\n  // Handle input change for editable fields\n  const handleEditInputChange = (e) => {\n    const { name, value } = e.target;\n    setEditingSchedule((prev) => {\n      const updatedSchedule = {\n        ...prev,\n        [name]: value,\n      };\n      \n      // Automatically calculate travel time if arrival or departure changes\n      if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n        const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n        const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n        if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n          const arrival = new Date(arrivalDateTime);\n          const departure = new Date(departureDateTime);\n          \n          // Calculate the travel time in hours and minutes\n          const diffMs = Math.abs(arrival - departure);\n          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n          const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n          updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n        }\n      }\n\n      return updatedSchedule;\n    });\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async (scheduleId) => {\n    try {\n      const updatedSchedule = {\n        ...editingSchedule,\n        ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n        DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n      };\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async (scheduleId) => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Manage Train Schedules</h2>\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Add Train Schedule Form */}\n      <div style={{ marginBottom: '20px' }}>\n        <h3>Add Train Schedule</h3>\n        <input\n          type=\"text\"\n          name=\"transitLineName\"\n          placeholder=\"Transit Line Name\"\n          value={newSchedule.transitLineName}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"travelTime\"\n          placeholder=\"Travel Time (HH:MM)\"\n          value={newSchedule.travelTime}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"datetime-local\"\n          name=\"arrivalDateTime\"\n          placeholder=\"Arrival DateTime\"\n          value={newSchedule.arrivalDateTime}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"datetime-local\"\n          name=\"departureDateTime\"\n          placeholder=\"Departure DateTime\"\n          value={newSchedule.departureDateTime}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"trainID\"\n          placeholder=\"Train ID\"\n          value={newSchedule.trainID}\n          onChange={handleInputChange}\n        />\n\n        <h4>Select Stops</h4>\n        {stations.map((station) => (\n          <div key={station.StationID}>\n            <label>\n              <input\n                type=\"checkbox\"\n                value={station.StationID}\n                onChange={handleStopSelection}\n              />\n              {station.StationName}\n            </label>\n            {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n              <div>\n                <input\n                  type=\"datetime-local\"\n                  placeholder=\"Arrival DateTime\"\n                  onChange={(e) =>\n                    handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n                  }\n                />\n                <input\n                  type=\"datetime-local\"\n                  placeholder=\"Departure DateTime\"\n                  onChange={(e) =>\n                    handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n                  }\n                />\n              </div>\n            )}\n          </div>\n        ))}\n\n        <button onClick={handleAddSchedule}>Add Schedule</button>\n      </div>\n\n      {/* Search Train Schedules by Station */}\n      <div style={{ marginBottom: '20px' }}>\n        <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Enter station name to filter\"\n          value={searchStationName}\n          onChange={(e) => setSearchStationName(e.target.value)}\n        />\n        <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n      </div>\n\n      {/* Display Train Schedules */}\n      <table>\n        <thead>\n          <tr>\n            <th>Schedule ID</th>\n            <th>Transit Line Name</th>\n            <th>Travel Time</th>\n            <th>Arrival Date</th>\n            <th>Arrival Time</th>\n            <th>Departure Date</th>\n            <th>Departure Time</th>\n            <th>Train ID</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {searchedSchedules.length > 0\n            ? searchedSchedules.map((schedule) => (\n                <tr key={schedule.ScheduleID}>\n                  <td>{schedule.ScheduleID}</td>\n                  <td>{schedule.TransitLineName}</td>\n                  <td>{schedule.TravelTime}</td>\n                  <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n                  <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n                  <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n                  <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n                  <td>{schedule.TrainID}</td>\n                  <td>\n                    <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n                      Edit\n                    </button>\n                    {schedule.ReservationCount === 0 ? (\n                      <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n                    ) : (\n                      <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n                    )}\n                  </td>\n                </tr>\n              ))\n            : schedules.map((schedule) => (\n                <tr key={schedule.ScheduleID}>\n                  {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n                    <>\n                      <td>{schedule.ScheduleID}</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"TransitLineName\"\n                          value={editingSchedule.TransitLineName}\n                          onChange={handleEditInputChange}\n                        />\n                      </td>\n                      <td>{editingSchedule.TravelTime}</td>\n                      <td>\n                        <input\n                          type=\"date\"\n                          name=\"ArrivalDate\"\n                          value={editingSchedule.ArrivalDate}\n                          onChange={handleEditInputChange}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          type=\"time\"\n                          name=\"ArrivalTime\"\n                          value={editingSchedule.ArrivalTime}\n                          onChange={handleEditInputChange}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          type=\"date\"\n                          name=\"DepartureDate\"\n                          value={editingSchedule.DepartureDate}\n                          onChange={handleEditInputChange}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          type=\"time\"\n                          name=\"DepartureTime\"\n                          value={editingSchedule.DepartureTime}\n                          onChange={handleEditInputChange}\n                        />\n                      </td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"TrainID\"\n                          value={editingSchedule.TrainID}\n                          onChange={handleEditInputChange}\n                        />\n                      </td>\n                      <td>\n                        <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n                        <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n                      </td>\n                    </>\n                  ) : (\n                    <>\n                      <td>{schedule.ScheduleID}</td>\n                      <td>{schedule.TransitLineName}</td>\n                      <td>{schedule.TravelTime}</td>\n                      <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n                      <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n                      <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n                      <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n                      <td>{schedule.TrainID}</td>\n                      <td>\n                        <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n                          Edit\n                        </button>\n                        {schedule.ReservationCount === 0 ? (\n                          <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n                        ) : (\n                          <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n                        )}\n                      </td>\n                    </>\n                  )}\n                </tr>\n              ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ManageSchedulesTab;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}