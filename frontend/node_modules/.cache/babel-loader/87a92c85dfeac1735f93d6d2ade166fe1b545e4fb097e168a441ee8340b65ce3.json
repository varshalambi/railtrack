{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js\",\n  _s = $RefreshSig$();\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n// // //   const [editMode, setEditMode] = useState(null);\n// // //   const [formValues, setFormValues] = useState({});\n\n// // //   // Fetch schedules on component mount\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Function to fetch train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/representative/schedules');\n// // //       setSchedules(response.data.schedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle delete schedule\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit schedule\n// // //   const editSchedule = (schedule) => {\n// // //     setEditMode(schedule.ScheduleID);\n// // //     setFormValues({\n// // //       TransitLineName: schedule.TransitLineName,\n// // //       DepartureDateTime: schedule.DepartureDateTime,\n// // //       ArrivalDateTime: schedule.ArrivalDateTime,\n// // //       TravelTime: schedule.TravelTime,\n// // //     });\n// // //   };\n\n// // //   // Handle form input changes\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setFormValues({ ...formValues, [name]: value });\n// // //   };\n\n// // //   // Handle save edited schedule\n// // //   const saveSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// // //       setEditMode(null);\n// // //       fetchSchedules();\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update schedule.');\n// // //     }\n// // //   };\n\n// // //   // Render\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"text\"\n// // //                     name=\"TransitLineName\"\n// // //                     value={formValues.TransitLineName}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   schedule.TransitLineName\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"datetime-local\"\n// // //                     name=\"DepartureDateTime\"\n// // //                     value={formValues.DepartureDateTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"datetime-local\"\n// // //                     name=\"ArrivalDateTime\"\n// // //                     value={formValues.ArrivalDateTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"time\"\n// // //                     name=\"TravelTime\"\n// // //                     value={formValues.TravelTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   schedule.TravelTime\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <>\n// // //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// // //                   </>\n// // //                 ) : (\n// // //                   <>\n// // //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// // //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //                   </>\n// // //                 )}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainId: '',\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // //   };\n\n// // //   const addSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // //     } catch (err) {\n// // //       console.error('Error adding schedule:', err);\n// // //       setError('Failed to add new schedule.');\n// // //     }\n// // //   };\n\n// // //   const editSchedule = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       fetchSchedules(); // Refresh the list after editing\n// // //     } catch (err) {\n// // //       console.error('Error editing schedule:', err);\n// // //       setError('Failed to edit schedule.');\n// // //     }\n// // //   };\n\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       fetchSchedules(); // Refresh the list after deleting\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Form to Add New Schedule */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"time\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainId\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainId}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={addSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Schedule Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TransitLineName}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"time\"\n// // //                   value={schedule.TravelTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   value={schedule.ArrivalDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   value={schedule.DepartureDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TrainID}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainId: '',\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // //   };\n\n// // //   const addSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // //     } catch (err) {\n// // //       console.error('Error adding schedule:', err);\n// // //       setError('Failed to add new schedule.');\n// // //     }\n// // //   };\n\n// // //   const editSchedule = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       fetchSchedules(); // Refresh the list after editing\n// // //     } catch (err) {\n// // //       console.error('Error editing schedule:', err);\n// // //       setError('Failed to edit schedule.');\n// // //     }\n// // //   };\n\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       fetchSchedules(); // Refresh the list after deleting\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Form to Add New Schedule */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"time\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainId\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainId}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={addSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Schedule Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TransitLineName}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"time\"\n// // //                   value={schedule.TravelTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.ArrivalDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.DepartureDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TrainID}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime}</td>\n// // //               <td>{schedule.DepartureDateTime}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //               <td>\n// // //                 <button\n// // //                   onClick={() => console.log('Edit schedule')}\n// // //                   style={{ marginRight: '5px' }}\n// // //                 >\n// // //                   Edit\n// // //                 </button>\n// // //                 {schedule.ReservationCount === 0 ? (\n// // //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                 ) : (\n// // //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                 )}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [transitLineName, setTransitLineName] = useState('');\n// // //   const [travelTime, setTravelTime] = useState('');\n// // //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// // //   const [departureDateTime, setDepartureDateTime] = useState('');\n// // //   const [trainID, setTrainID] = useState('');\n// // //   const [success, setSuccess] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle adding a new schedule\n// // //   const handleAddSchedule = async (e) => {\n// // //     e.preventDefault();\n// // //     try {\n// // //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// // //         TransitLineName: transitLineName,\n// // //         TravelTime: travelTime,\n// // //         ArrivalDateTime: arrivalDateTime,\n// // //         DepartureDateTime: departureDateTime,\n// // //         TrainID: trainID,\n// // //       });\n\n// // //       setSuccess(response.data.message);\n// // //       setError('');\n// // //       fetchSchedules(); // Refresh the schedule list\n\n// // //       // Clear form fields\n// // //       setTransitLineName('');\n// // //       setTravelTime('');\n// // //       setArrivalDateTime('');\n// // //       setDepartureDateTime('');\n// // //       setTrainID('');\n// // //     } catch (err) {\n// // //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// // //       setSuccess('');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n\n// // //       {/* Add Train Schedule Form */}\n// // //       <div>\n// // //         <h3>Add Train Schedule</h3>\n// // //         <form onSubmit={handleAddSchedule}>\n// // //           <div>\n// // //             <label>Transit Line Name:</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={transitLineName}\n// // //               onChange={(e) => setTransitLineName(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Travel Time (hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={travelTime}\n// // //               onChange={(e) => setTravelTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={arrivalDateTime}\n// // //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={departureDateTime}\n// // //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Train ID:</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={trainID}\n// // //               onChange={(e) => setTrainID(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <button type=\"submit\">Add Schedule</button>\n// // //         </form>\n// // //         {error && <p className=\"error\">{error}</p>}\n// // //         {success && <p className=\"success\">{success}</p>}\n// // //       </div>\n\n// // //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       if (response.data.trainSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name to filter schedules\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {filteredSchedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       if (response.data.trainSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Manage Train Schedules Section */}\n// // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n\n// // //       {/* Search Train Schedules by Station Section */}\n// // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name to filter schedules\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {filteredSchedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [originSchedules, setOriginSchedules] = useState([]);\n// // //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name (origin and destination)\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setOriginSchedules(response.data.originSchedules);\n// // //       setDestinationSchedules(response.data.destinationSchedules);\n// // //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Manage Train Schedules Section */}\n// // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n\n// // //       {/* Search Train Schedules by Station Section */}\n// // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <h4>Schedules with Station as Origin</h4>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {originSchedules.length > 0 ? (\n// // //             originSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.TravelTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.TrainID}</td>\n// // //               </tr>\n// // //             ))\n// // //           ) : (\n// // //             <tr>\n// // //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// // //             </tr>\n// // //           )}\n// // //         </tbody>\n// // //       </table>\n\n// // //       <h4>Schedules with Station as Destination</h4>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {destinationSchedules.length > 0 ? (\n// // //             destinationSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.TravelTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.TrainID}</td>\n// // //               </tr>\n// // //             ))\n// // //           ) : (\n// // //             <tr>\n// // //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// // //             </tr>\n// // //           )}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Add Train Schedule</h3>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time (HH:MM)\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainID\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainID}\n// //           onChange={handleInputChange}\n// //         />\n\n// //         <h4>Select Stops</h4>\n// //         {stations.map((station) => (\n// //           <div key={station.StationID}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 value={station.StationID}\n// //                 onChange={handleStopSelection}\n// //               />\n// //               {station.StationName}\n// //             </label>\n// //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //               <div>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Arrival DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                   }\n// //                 />\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Departure DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                   }\n// //                 />\n// //               </div>\n// //             )}\n// //           </div>\n// //         ))}\n\n// //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Train Schedules Table */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>{schedule.TransitLineName}</td>\n// //               <td>{schedule.TravelTime}</td>\n// //               <td>{schedule.ArrivalDateTime}</td>\n// //               <td>{schedule.DepartureDateTime}</td>\n// //               <td>{schedule.TrainID}</td>\n// //               <td>\n// //                 {/* You can implement edit and delete buttons here */}\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Add Train Schedule</h3>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time (HH:MM)\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainID\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainID}\n//           onChange={handleInputChange}\n//         />\n\n//         <h4>Select Stops</h4>\n//         {stations.map((station) => (\n//           <div key={station.StationID}>\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 value={station.StationID}\n//                 onChange={handleStopSelection}\n//               />\n//               {station.StationName}\n//             </label>\n//             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//               <div>\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Arrival DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                   }\n//                 />\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Departure DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                   }\n//                 />\n//               </div>\n//             )}\n//           </div>\n//         ))}\n\n//         <button onClick={handleAddSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter\"\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//       </div>\n\n//       {/* Display Train Schedules */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {searchedSchedules.length > 0\n//             ? searchedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))\n//             : schedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                     <>\n//                       <td>{schedule.ScheduleID}</td>\n//                       <td>\n//                         <input\n//                           type=\"text\"\n//                           name=\"TransitLineName\"\n//                           value={editingSchedule.TransitLineName}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>{editingSchedule.TravelTime}</td>\n//                       <td>\n//                         <input\n//                           type=\"date\"\n//                           name=\"ArrivalDate\"\n//                           value={editingSchedule.ArrivalDate}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"time\"\n//                           name=\"ArrivalTime\"\n//                           value={editingSchedule.ArrivalTime}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"date\"\n//                           name=\"DepartureDate\"\n//                           value={editingSchedule.DepartureDate}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"time\"\n//                           name=\"DepartureTime\"\n//                           value={editingSchedule.DepartureTime}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"text\"\n//                           name=\"TrainID\"\n//                           value={editingSchedule.TrainID}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                         <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                       </td>\n//                     </>\n//                   ) : (\n//                     <>\n//                       <td>{schedule.ScheduleID}</td>\n//                       <td>{schedule.TransitLineName}</td>\n//                       <td>{schedule.TravelTime}</td>\n//                       <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                       <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                       <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                       <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                       <td>{schedule.TrainID}</td>\n//                       <td>\n//                         <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                           Edit\n//                         </button>\n//                         {schedule.ReservationCount === 0 ? (\n//                           <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                         ) : (\n//                           <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                         )}\n//                       </td>\n//                     </>\n//                   )}\n//                 </tr>\n//               ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// // export default ManageSchedulesTab;\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Button to toggle Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//         </button>\n//       </div>\n\n//       {/* Add Train Schedule Form */}\n//       {showAddScheduleForm && (\n//         <div style={{ marginBottom: '20px' }}>\n//           <h3>Add Train Schedule</h3>\n//           <input\n//             type=\"text\"\n//             name=\"transitLineName\"\n//             placeholder=\"Transit Line Name\"\n//             value={newSchedule.transitLineName}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"travelTime\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"arrivalDateTime\"\n//             placeholder=\"Arrival DateTime\"\n//             value={newSchedule.arrivalDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"departureDateTime\"\n//             placeholder=\"Departure DateTime\"\n//             value={newSchedule.departureDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"trainID\"\n//             placeholder=\"Train ID\"\n//             value={newSchedule.trainID}\n//             onChange={handleInputChange}\n//           />\n\n//           <h4>Select Stops</h4>\n//           {stations.map((station) => (\n//             <div key={station.StationID}>\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   value={station.StationID}\n//                   onChange={handleStopSelection}\n//                 />\n//                 {station.StationName}\n//               </label>\n//               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//                 <div>\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Arrival DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                     }\n//                   />\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Departure DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                     }\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       {/* Display All Train Schedules */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Current Train Schedules</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {schedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TransitLineName\"\n//                         value={editingSchedule.TransitLineName}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>{editingSchedule.TravelTime}</td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"ArrivalDate\"\n//                         value={editingSchedule.ArrivalDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"ArrivalTime\"\n//                         value={editingSchedule.ArrivalTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"DepartureDate\"\n//                         value={editingSchedule.DepartureDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"DepartureTime\"\n//                         value={editingSchedule.DepartureTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TrainID\"\n//                         value={editingSchedule.TrainID}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                     <td>\n//                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                         Edit\n//                       </button>\n//                       {schedule.ReservationCount === 0 ? (\n//                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                       ) : (\n//                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                       )}\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter\"\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {searchedSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.TravelTime}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.TrainID}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ManageSchedulesTab = () => {\n  _s();\n  const [schedules, setSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDate: '',\n    arrivalTime: '',\n    departureDate: '',\n    departureTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [availableTrains, setAvailableTrains] = useState([]);\n  const [availableStops, setAvailableStops] = useState([]);\n  useEffect(() => {\n    fetchSchedules();\n    fetchTrains();\n    fetchStops();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available trains for dropdown\n  const fetchTrains = async () => {\n    try {\n      const response = await axiosInstance.get('/trains');\n      setAvailableTrains(response.data.trains);\n    } catch (err) {\n      console.error('Error fetching trains:', err);\n      setError('Failed to fetch available trains.');\n    }\n  };\n\n  // Fetch all available stops for selection\n  const fetchStops = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setAvailableStops(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stops:', err);\n      setError('Failed to fetch available stops.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = schedule => {\n    var _schedule$ArrivalDate, _schedule$DepartureDa;\n    setEditingSchedule({\n      ...schedule,\n      ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n      ArrivalTime: (_schedule$ArrivalDate = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate === void 0 ? void 0 : _schedule$ArrivalDate.substring(0, 5),\n      DepartureDate: schedule.DepartureDateTime.split('T')[0],\n      DepartureTime: (_schedule$DepartureDa = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa === void 0 ? void 0 : _schedule$DepartureDa.substring(0, 5)\n    });\n  };\n\n  // Handle input change for editable fields\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditingSchedule(prev => {\n      const updatedSchedule = {\n        ...prev,\n        [name]: value\n      };\n\n      // Automatically calculate travel time if arrival or departure changes\n      if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n        const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n        const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n        if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n          const arrival = new Date(arrivalDateTime);\n          const departure = new Date(departureDateTime);\n\n          // Calculate the travel time in hours and minutes\n          const diffMs = Math.abs(arrival - departure);\n          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n          const diffMinutes = Math.floor(diffMs % (1000 * 60 * 60) / (1000 * 60));\n          updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n        }\n      }\n      return updatedSchedule;\n    });\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async scheduleId => {\n    try {\n      const updatedSchedule = {\n        ...editingSchedule,\n        ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n        DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`\n      };\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async scheduleId => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter(schedule => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  // Handle Add Train Schedule button click\n  const handleAddScheduleClick = () => {\n    setShowAddForm(!showAddForm);\n  };\n\n  // Handle adding a new train schedule\n  const handleAddSchedule = async () => {\n    try {\n      const newScheduleData = {\n        ...newSchedule,\n        ArrivalDateTime: `${newSchedule.arrivalDate}T${newSchedule.arrivalTime}:00`,\n        DepartureDateTime: `${newSchedule.departureDate}T${newSchedule.departureTime}:00`\n      };\n      await axiosInstance.post('/customer-rep/train-schedules', newScheduleData);\n      setShowAddForm(false);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDate: '',\n        arrivalTime: '',\n        departureDate: '',\n        departureTime: '',\n        trainID: '',\n        stops: []\n      });\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle checkbox change for stops selection\n  const handleStopChange = stationID => {\n    setNewSchedule(prev => {\n      if (prev.stops.includes(stationID)) {\n        return {\n          ...prev,\n          stops: prev.stops.filter(stop => stop !== stationID)\n        };\n      } else {\n        return {\n          ...prev,\n          stops: [...prev.stops, stationID]\n        };\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3535,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3536,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddScheduleClick,\n      children: \"Add Train Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3538,\n      columnNumber: 7\n    }, this), showAddForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Train Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3542,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Transit Line Name\",\n        value: newSchedule.transitLineName,\n        onChange: e => setNewSchedule({\n          ...newSchedule,\n          transitLineName: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3543,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        placeholder: \"Travel Time (HH:MM)\",\n        value: newSchedule.travelTime,\n        onChange: e => setNewSchedule({\n          ...newSchedule,\n          travelTime: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3549,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: newSchedule.arrivalDate,\n        onChange: e => setNewSchedule({\n          ...newSchedule,\n          arrivalDate: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3555,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: newSchedule.arrivalTime,\n        onChange: e => setNewSchedule({\n          ...newSchedule,\n          arrivalTime: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3560,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: newSchedule.departureDate,\n        onChange: e => setNewSchedule({\n          ...newSchedule,\n          departureDate: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3565,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: newSchedule.departureTime,\n        onChange: e => setNewSchedule({\n          ...newSchedule,\n          departureTime: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3570,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newSchedule.trainID,\n        onChange: e => setNewSchedule({\n          ...newSchedule,\n          trainID: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Train ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3579,\n          columnNumber: 13\n        }, this), availableTrains.map(train => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: train.TrainID,\n          children: train.TrainID\n        }, train.TrainID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3581,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3575,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Stops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3587,\n        columnNumber: 11\n      }, this), availableStops.map(stop => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: newSchedule.stops.includes(stop.StationID),\n          onChange: () => handleStopChange(stop.StationID)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3590,\n          columnNumber: 15\n        }, this), stop.StationName]\n      }, stop.StationID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3589,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSchedule,\n        children: \"Add Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3599,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3541,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search Train Schedules by Station (Origin or Destination)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3603,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter station name to filter...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3604,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Current Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3606,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Schedule ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3610,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transit Line Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3611,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Travel Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3612,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3613,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3614,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3615,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3616,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Train ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3617,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3618,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3609,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3608,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: schedules.map(schedule => {\n          var _schedule$ArrivalDate2, _schedule$DepartureDa2;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3626,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"TransitLineName\",\n                  value: editingSchedule.TransitLineName,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3628,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3627,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editingSchedule.TravelTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3635,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  name: \"ArrivalDate\",\n                  value: editingSchedule.ArrivalDate,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3637,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3636,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  name: \"ArrivalTime\",\n                  value: editingSchedule.ArrivalTime,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3645,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3644,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  name: \"DepartureDate\",\n                  value: editingSchedule.DepartureDate,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3653,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3652,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  name: \"DepartureTime\",\n                  value: editingSchedule.DepartureTime,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3661,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3660,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"TrainID\",\n                  value: editingSchedule.TrainID,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3669,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3668,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSave(schedule.ScheduleID),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3677,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleCancel,\n                  style: {\n                    marginLeft: '5px'\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3678,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3676,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3683,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TransitLineName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3684,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TravelTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3685,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ArrivalDateTime.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3686,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_schedule$ArrivalDate2 = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate2 === void 0 ? void 0 : _schedule$ArrivalDate2.substring(0, 5)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3687,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.DepartureDateTime.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3688,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_schedule$DepartureDa2 = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa2 === void 0 ? void 0 : _schedule$DepartureDa2.substring(0, 5)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3689,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TrainID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3690,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEditClick(schedule),\n                  style: {\n                    marginRight: '5px'\n                  },\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3692,\n                  columnNumber: 21\n                }, this), schedule.ReservationCount === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDelete(schedule.ScheduleID),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3696,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: true,\n                  title: \"Cannot delete. Reservations exist.\",\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3698,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3691,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, schedule.ScheduleID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3623,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3621,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3607,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3534,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageSchedulesTab, \"2zBnu8Do/cQ2luoYafTzskUlktg=\");\n_c = ManageSchedulesTab;\nexport default ManageSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"ManageSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","Fragment","_Fragment","ManageSchedulesTab","_s","schedules","setSchedules","editingSchedule","setEditingSchedule","error","setError","showAddForm","setShowAddForm","newSchedule","setNewSchedule","transitLineName","travelTime","arrivalDate","arrivalTime","departureDate","departureTime","trainID","stops","availableTrains","setAvailableTrains","availableStops","setAvailableStops","fetchSchedules","fetchTrains","fetchStops","response","get","data","trainSchedules","err","console","trains","stations","handleEditClick","schedule","_schedule$ArrivalDate","_schedule$DepartureDa","ArrivalDate","ArrivalDateTime","split","ArrivalTime","substring","DepartureDate","DepartureDateTime","DepartureTime","handleInputChange","e","name","value","target","prev","updatedSchedule","arrivalDateTime","departureDateTime","arrival","Date","departure","diffMs","Math","abs","diffHours","floor","diffMinutes","TravelTime","handleSave","scheduleId","put","handleCancel","handleDelete","delete","filter","ScheduleID","handleAddScheduleClick","handleAddSchedule","newScheduleData","post","handleStopChange","stationID","includes","stop","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","type","placeholder","onChange","map","train","TrainID","checked","StationID","StationName","_schedule$ArrivalDate2","_schedule$DepartureDa2","TransitLineName","style","marginLeft","marginRight","ReservationCount","disabled","title","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js"],"sourcesContent":["// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n// // //   const [editMode, setEditMode] = useState(null);\n// // //   const [formValues, setFormValues] = useState({});\n\n// // //   // Fetch schedules on component mount\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Function to fetch train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/representative/schedules');\n// // //       setSchedules(response.data.schedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle delete schedule\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit schedule\n// // //   const editSchedule = (schedule) => {\n// // //     setEditMode(schedule.ScheduleID);\n// // //     setFormValues({\n// // //       TransitLineName: schedule.TransitLineName,\n// // //       DepartureDateTime: schedule.DepartureDateTime,\n// // //       ArrivalDateTime: schedule.ArrivalDateTime,\n// // //       TravelTime: schedule.TravelTime,\n// // //     });\n// // //   };\n\n// // //   // Handle form input changes\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setFormValues({ ...formValues, [name]: value });\n// // //   };\n\n// // //   // Handle save edited schedule\n// // //   const saveSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// // //       setEditMode(null);\n// // //       fetchSchedules();\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update schedule.');\n// // //     }\n// // //   };\n\n// // //   // Render\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"text\"\n// // //                     name=\"TransitLineName\"\n// // //                     value={formValues.TransitLineName}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   schedule.TransitLineName\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"datetime-local\"\n// // //                     name=\"DepartureDateTime\"\n// // //                     value={formValues.DepartureDateTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"datetime-local\"\n// // //                     name=\"ArrivalDateTime\"\n// // //                     value={formValues.ArrivalDateTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"time\"\n// // //                     name=\"TravelTime\"\n// // //                     value={formValues.TravelTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   schedule.TravelTime\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <>\n// // //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// // //                   </>\n// // //                 ) : (\n// // //                   <>\n// // //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// // //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //                   </>\n// // //                 )}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainId: '',\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // //   };\n\n// // //   const addSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // //     } catch (err) {\n// // //       console.error('Error adding schedule:', err);\n// // //       setError('Failed to add new schedule.');\n// // //     }\n// // //   };\n\n// // //   const editSchedule = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       fetchSchedules(); // Refresh the list after editing\n// // //     } catch (err) {\n// // //       console.error('Error editing schedule:', err);\n// // //       setError('Failed to edit schedule.');\n// // //     }\n// // //   };\n\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       fetchSchedules(); // Refresh the list after deleting\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Form to Add New Schedule */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"time\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainId\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainId}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={addSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Schedule Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TransitLineName}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"time\"\n// // //                   value={schedule.TravelTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   value={schedule.ArrivalDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   value={schedule.DepartureDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TrainID}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainId: '',\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // //   };\n\n// // //   const addSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // //     } catch (err) {\n// // //       console.error('Error adding schedule:', err);\n// // //       setError('Failed to add new schedule.');\n// // //     }\n// // //   };\n\n// // //   const editSchedule = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       fetchSchedules(); // Refresh the list after editing\n// // //     } catch (err) {\n// // //       console.error('Error editing schedule:', err);\n// // //       setError('Failed to edit schedule.');\n// // //     }\n// // //   };\n\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       fetchSchedules(); // Refresh the list after deleting\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Form to Add New Schedule */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"time\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainId\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainId}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={addSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Schedule Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TransitLineName}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"time\"\n// // //                   value={schedule.TravelTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.ArrivalDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.DepartureDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TrainID}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime}</td>\n// // //               <td>{schedule.DepartureDateTime}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //               <td>\n// // //                 <button\n// // //                   onClick={() => console.log('Edit schedule')}\n// // //                   style={{ marginRight: '5px' }}\n// // //                 >\n// // //                   Edit\n// // //                 </button>\n// // //                 {schedule.ReservationCount === 0 ? (\n// // //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                 ) : (\n// // //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                 )}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [transitLineName, setTransitLineName] = useState('');\n// // //   const [travelTime, setTravelTime] = useState('');\n// // //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// // //   const [departureDateTime, setDepartureDateTime] = useState('');\n// // //   const [trainID, setTrainID] = useState('');\n// // //   const [success, setSuccess] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle adding a new schedule\n// // //   const handleAddSchedule = async (e) => {\n// // //     e.preventDefault();\n// // //     try {\n// // //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// // //         TransitLineName: transitLineName,\n// // //         TravelTime: travelTime,\n// // //         ArrivalDateTime: arrivalDateTime,\n// // //         DepartureDateTime: departureDateTime,\n// // //         TrainID: trainID,\n// // //       });\n\n// // //       setSuccess(response.data.message);\n// // //       setError('');\n// // //       fetchSchedules(); // Refresh the schedule list\n\n// // //       // Clear form fields\n// // //       setTransitLineName('');\n// // //       setTravelTime('');\n// // //       setArrivalDateTime('');\n// // //       setDepartureDateTime('');\n// // //       setTrainID('');\n// // //     } catch (err) {\n// // //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// // //       setSuccess('');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n\n// // //       {/* Add Train Schedule Form */}\n// // //       <div>\n// // //         <h3>Add Train Schedule</h3>\n// // //         <form onSubmit={handleAddSchedule}>\n// // //           <div>\n// // //             <label>Transit Line Name:</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={transitLineName}\n// // //               onChange={(e) => setTransitLineName(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Travel Time (hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={travelTime}\n// // //               onChange={(e) => setTravelTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={arrivalDateTime}\n// // //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={departureDateTime}\n// // //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Train ID:</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={trainID}\n// // //               onChange={(e) => setTrainID(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <button type=\"submit\">Add Schedule</button>\n// // //         </form>\n// // //         {error && <p className=\"error\">{error}</p>}\n// // //         {success && <p className=\"success\">{success}</p>}\n// // //       </div>\n\n// // //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n      \n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n          \n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       if (response.data.trainSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name to filter schedules\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {filteredSchedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       if (response.data.trainSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Manage Train Schedules Section */}\n// // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n\n// // //       {/* Search Train Schedules by Station Section */}\n// // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name to filter schedules\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {filteredSchedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [originSchedules, setOriginSchedules] = useState([]);\n// // //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name (origin and destination)\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setOriginSchedules(response.data.originSchedules);\n// // //       setDestinationSchedules(response.data.destinationSchedules);\n// // //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Manage Train Schedules Section */}\n// // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n\n// // //       {/* Search Train Schedules by Station Section */}\n// // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <h4>Schedules with Station as Origin</h4>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {originSchedules.length > 0 ? (\n// // //             originSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.TravelTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.TrainID}</td>\n// // //               </tr>\n// // //             ))\n// // //           ) : (\n// // //             <tr>\n// // //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// // //             </tr>\n// // //           )}\n// // //         </tbody>\n// // //       </table>\n\n// // //       <h4>Schedules with Station as Destination</h4>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {destinationSchedules.length > 0 ? (\n// // //             destinationSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.TravelTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.TrainID}</td>\n// // //               </tr>\n// // //             ))\n// // //           ) : (\n// // //             <tr>\n// // //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// // //             </tr>\n// // //           )}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n      \n// //       {/* Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Add Train Schedule</h3>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time (HH:MM)\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainID\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainID}\n// //           onChange={handleInputChange}\n// //         />\n\n// //         <h4>Select Stops</h4>\n// //         {stations.map((station) => (\n// //           <div key={station.StationID}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 value={station.StationID}\n// //                 onChange={handleStopSelection}\n// //               />\n// //               {station.StationName}\n// //             </label>\n// //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //               <div>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Arrival DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                   }\n// //                 />\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Departure DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                   }\n// //                 />\n// //               </div>\n// //             )}\n// //           </div>\n// //         ))}\n\n// //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Train Schedules Table */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>{schedule.TransitLineName}</td>\n// //               <td>{schedule.TravelTime}</td>\n// //               <td>{schedule.ArrivalDateTime}</td>\n// //               <td>{schedule.DepartureDateTime}</td>\n// //               <td>{schedule.TrainID}</td>\n// //               <td>\n// //                 {/* You can implement edit and delete buttons here */}\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n      \n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n          \n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Add Train Schedule</h3>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time (HH:MM)\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainID\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainID}\n//           onChange={handleInputChange}\n//         />\n\n//         <h4>Select Stops</h4>\n//         {stations.map((station) => (\n//           <div key={station.StationID}>\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 value={station.StationID}\n//                 onChange={handleStopSelection}\n//               />\n//               {station.StationName}\n//             </label>\n//             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//               <div>\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Arrival DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                   }\n//                 />\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Departure DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                   }\n//                 />\n//               </div>\n//             )}\n//           </div>\n//         ))}\n\n//         <button onClick={handleAddSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter\"\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//       </div>\n\n//       {/* Display Train Schedules */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {searchedSchedules.length > 0\n//             ? searchedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))\n//             : schedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                     <>\n//                       <td>{schedule.ScheduleID}</td>\n//                       <td>\n//                         <input\n//                           type=\"text\"\n//                           name=\"TransitLineName\"\n//                           value={editingSchedule.TransitLineName}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>{editingSchedule.TravelTime}</td>\n//                       <td>\n//                         <input\n//                           type=\"date\"\n//                           name=\"ArrivalDate\"\n//                           value={editingSchedule.ArrivalDate}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"time\"\n//                           name=\"ArrivalTime\"\n//                           value={editingSchedule.ArrivalTime}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"date\"\n//                           name=\"DepartureDate\"\n//                           value={editingSchedule.DepartureDate}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"time\"\n//                           name=\"DepartureTime\"\n//                           value={editingSchedule.DepartureTime}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"text\"\n//                           name=\"TrainID\"\n//                           value={editingSchedule.TrainID}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                         <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                       </td>\n//                     </>\n//                   ) : (\n//                     <>\n//                       <td>{schedule.ScheduleID}</td>\n//                       <td>{schedule.TransitLineName}</td>\n//                       <td>{schedule.TravelTime}</td>\n//                       <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                       <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                       <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                       <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                       <td>{schedule.TrainID}</td>\n//                       <td>\n//                         <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                           Edit\n//                         </button>\n//                         {schedule.ReservationCount === 0 ? (\n//                           <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                         ) : (\n//                           <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                         )}\n//                       </td>\n//                     </>\n//                   )}\n//                 </tr>\n//               ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// // export default ManageSchedulesTab;\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n      \n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n          \n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Button to toggle Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//         </button>\n//       </div>\n\n//       {/* Add Train Schedule Form */}\n//       {showAddScheduleForm && (\n//         <div style={{ marginBottom: '20px' }}>\n//           <h3>Add Train Schedule</h3>\n//           <input\n//             type=\"text\"\n//             name=\"transitLineName\"\n//             placeholder=\"Transit Line Name\"\n//             value={newSchedule.transitLineName}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"travelTime\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"arrivalDateTime\"\n//             placeholder=\"Arrival DateTime\"\n//             value={newSchedule.arrivalDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"departureDateTime\"\n//             placeholder=\"Departure DateTime\"\n//             value={newSchedule.departureDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"trainID\"\n//             placeholder=\"Train ID\"\n//             value={newSchedule.trainID}\n//             onChange={handleInputChange}\n//           />\n\n//           <h4>Select Stops</h4>\n//           {stations.map((station) => (\n//             <div key={station.StationID}>\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   value={station.StationID}\n//                   onChange={handleStopSelection}\n//                 />\n//                 {station.StationName}\n//               </label>\n//               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//                 <div>\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Arrival DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                     }\n//                   />\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Departure DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                     }\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       {/* Display All Train Schedules */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Current Train Schedules</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {schedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TransitLineName\"\n//                         value={editingSchedule.TransitLineName}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>{editingSchedule.TravelTime}</td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"ArrivalDate\"\n//                         value={editingSchedule.ArrivalDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"ArrivalTime\"\n//                         value={editingSchedule.ArrivalTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"DepartureDate\"\n//                         value={editingSchedule.DepartureDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"DepartureTime\"\n//                         value={editingSchedule.DepartureTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TrainID\"\n//                         value={editingSchedule.TrainID}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                     <td>\n//                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                         Edit\n//                       </button>\n//                       {schedule.ReservationCount === 0 ? (\n//                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                       ) : (\n//                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                       )}\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter\"\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {searchedSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.TravelTime}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.TrainID}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ManageSchedulesTab = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDate: '',\n    arrivalTime: '',\n    departureDate: '',\n    departureTime: '',\n    trainID: '',\n    stops: [],\n  });\n  const [availableTrains, setAvailableTrains] = useState([]);\n  const [availableStops, setAvailableStops] = useState([]);\n\n  useEffect(() => {\n    fetchSchedules();\n    fetchTrains();\n    fetchStops();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available trains for dropdown\n  const fetchTrains = async () => {\n    try {\n      const response = await axiosInstance.get('/trains');\n      setAvailableTrains(response.data.trains);\n    } catch (err) {\n      console.error('Error fetching trains:', err);\n      setError('Failed to fetch available trains.');\n    }\n  };\n\n  // Fetch all available stops for selection\n  const fetchStops = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setAvailableStops(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stops:', err);\n      setError('Failed to fetch available stops.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = (schedule) => {\n    setEditingSchedule({\n      ...schedule,\n      ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n      ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n      DepartureDate: schedule.DepartureDateTime.split('T')[0],\n      DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n    });\n  };\n\n  // Handle input change for editable fields\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setEditingSchedule((prev) => {\n      const updatedSchedule = {\n        ...prev,\n        [name]: value,\n      };\n\n      // Automatically calculate travel time if arrival or departure changes\n      if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n        const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n        const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n        if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n          const arrival = new Date(arrivalDateTime);\n          const departure = new Date(departureDateTime);\n\n          // Calculate the travel time in hours and minutes\n          const diffMs = Math.abs(arrival - departure);\n          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n          const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n          updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n        }\n      }\n\n      return updatedSchedule;\n    });\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async (scheduleId) => {\n    try {\n      const updatedSchedule = {\n        ...editingSchedule,\n        ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n        DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n      };\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async (scheduleId) => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  // Handle Add Train Schedule button click\n  const handleAddScheduleClick = () => {\n    setShowAddForm(!showAddForm);\n  };\n\n  // Handle adding a new train schedule\n  const handleAddSchedule = async () => {\n    try {\n      const newScheduleData = {\n        ...newSchedule,\n        ArrivalDateTime: `${newSchedule.arrivalDate}T${newSchedule.arrivalTime}:00`,\n        DepartureDateTime: `${newSchedule.departureDate}T${newSchedule.departureTime}:00`,\n      };\n      await axiosInstance.post('/customer-rep/train-schedules', newScheduleData);\n      setShowAddForm(false);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDate: '',\n        arrivalTime: '',\n        departureDate: '',\n        departureTime: '',\n        trainID: '',\n        stops: [],\n      });\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle checkbox change for stops selection\n  const handleStopChange = (stationID) => {\n    setNewSchedule((prev) => {\n      if (prev.stops.includes(stationID)) {\n        return {\n          ...prev,\n          stops: prev.stops.filter((stop) => stop !== stationID),\n        };\n      } else {\n        return {\n          ...prev,\n          stops: [...prev.stops, stationID],\n        };\n      }\n    });\n  };\n\n  return (\n    <div>\n      <h2>Manage Train Schedules</h2>\n      {error && <p className=\"error\">{error}</p>}\n\n      <button onClick={handleAddScheduleClick}>Add Train Schedule</button>\n\n      {showAddForm && (\n        <div>\n          <h3>Add Train Schedule</h3>\n          <input\n            type=\"text\"\n            placeholder=\"Transit Line Name\"\n            value={newSchedule.transitLineName}\n            onChange={(e) => setNewSchedule({ ...newSchedule, transitLineName: e.target.value })}\n          />\n          <input\n            type=\"time\"\n            placeholder=\"Travel Time (HH:MM)\"\n            value={newSchedule.travelTime}\n            onChange={(e) => setNewSchedule({ ...newSchedule, travelTime: e.target.value })}\n          />\n          <input\n            type=\"date\"\n            value={newSchedule.arrivalDate}\n            onChange={(e) => setNewSchedule({ ...newSchedule, arrivalDate: e.target.value })}\n          />\n          <input\n            type=\"time\"\n            value={newSchedule.arrivalTime}\n            onChange={(e) => setNewSchedule({ ...newSchedule, arrivalTime: e.target.value })}\n          />\n          <input\n            type=\"date\"\n            value={newSchedule.departureDate}\n            onChange={(e) => setNewSchedule({ ...newSchedule, departureDate: e.target.value })}\n          />\n          <input\n            type=\"time\"\n            value={newSchedule.departureTime}\n            onChange={(e) => setNewSchedule({ ...newSchedule, departureTime: e.target.value })}\n          />\n          <select\n            value={newSchedule.trainID}\n            onChange={(e) => setNewSchedule({ ...newSchedule, trainID: e.target.value })}\n          >\n            <option value=\"\">Select Train ID</option>\n            {availableTrains.map((train) => (\n              <option key={train.TrainID} value={train.TrainID}>\n                {train.TrainID}\n              </option>\n            ))}\n          </select>\n\n          <h4>Select Stops</h4>\n          {availableStops.map((stop) => (\n            <div key={stop.StationID}>\n              <input\n                type=\"checkbox\"\n                checked={newSchedule.stops.includes(stop.StationID)}\n                onChange={() => handleStopChange(stop.StationID)}\n              />\n              {stop.StationName}\n            </div>\n          ))}\n\n          <button onClick={handleAddSchedule}>Add Schedule</button>\n        </div>\n      )}\n\n      <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n      <input type=\"text\" placeholder=\"Enter station name to filter...\" />\n\n      <h3>Current Train Schedules</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Schedule ID</th>\n            <th>Transit Line Name</th>\n            <th>Travel Time</th>\n            <th>Arrival Date</th>\n            <th>Arrival Time</th>\n            <th>Departure Date</th>\n            <th>Departure Time</th>\n            <th>Train ID</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {schedules.map((schedule) => (\n            <tr key={schedule.ScheduleID}>\n              {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n                <>\n                  <td>{schedule.ScheduleID}</td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"TransitLineName\"\n                      value={editingSchedule.TransitLineName}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>{editingSchedule.TravelTime}</td>\n                  <td>\n                    <input\n                      type=\"date\"\n                      name=\"ArrivalDate\"\n                      value={editingSchedule.ArrivalDate}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"time\"\n                      name=\"ArrivalTime\"\n                      value={editingSchedule.ArrivalTime}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"date\"\n                      name=\"DepartureDate\"\n                      value={editingSchedule.DepartureDate}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"time\"\n                      name=\"DepartureTime\"\n                      value={editingSchedule.DepartureTime}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"TrainID\"\n                      value={editingSchedule.TrainID}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n                    <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n                  </td>\n                </>\n              ) : (\n                <>\n                  <td>{schedule.ScheduleID}</td>\n                  <td>{schedule.TransitLineName}</td>\n                  <td>{schedule.TravelTime}</td>\n                  <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n                  <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n                  <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n                  <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n                  <td>{schedule.TrainID}</td>\n                  <td>\n                    <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n                      Edit\n                    </button>\n                    {schedule.ReservationCount === 0 ? (\n                      <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n                    ) : (\n                      <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n                    )}\n                  </td>\n                </>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ManageSchedulesTab;\n"],"mappingslD,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC;IAC7CmB,eAAe,EAAE,EAAE;IACnBC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE,EAAE;IACfC,WAAW,EAAE,EAAE;IACfC,aAAa,EAAE,EAAE;IACjBC,aAAa,EAAE,EAAE;IACjBC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC6B,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd8B,cAAc,CAAC,CAAC;IAChBC,WAAW,CAAC,CAAC;IACbC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMF,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMhC,aAAa,CAACiC,GAAG,CAAC,+BAA+B,CAAC;MACzEzB,YAAY,CAACwB,QAAQ,CAACE,IAAI,CAACC,cAAc,CAAC;MAC1CvB,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOwB,GAAG,EAAE;MACZC,OAAO,CAAC1B,KAAK,CAAC,2BAA2B,EAAEyB,GAAG,CAAC;MAC/CxB,QAAQ,CAAC,4BAA4B,CAAC;IACxC;EACF,CAAC;;EAED;EACA,MAAMkB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMhC,aAAa,CAACiC,GAAG,CAAC,SAAS,CAAC;MACnDP,kBAAkB,CAACM,QAAQ,CAACE,IAAI,CAACI,MAAM,CAAC;IAC1C,CAAC,CAAC,OAAOF,GAAG,EAAE;MACZC,OAAO,CAAC1B,KAAK,CAAC,wBAAwB,EAAEyB,GAAG,CAAC;MAC5CxB,QAAQ,CAAC,mCAAmC,CAAC;IAC/C;EACF,CAAC;;EAED;EACA,MAAMmB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhC,aAAa,CAACiC,GAAG,CAAC,WAAW,CAAC;MACrDL,iBAAiB,CAACI,QAAQ,CAACE,IAAI,CAACK,QAAQ,CAAC;IAC3C,CAAC,CAAC,OAAOH,GAAG,EAAE;MACZC,OAAO,CAAC1B,KAAK,CAAC,uBAAuB,EAAEyB,GAAG,CAAC;MAC3CxB,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAM4B,eAAe,GAAIC,QAAQ,IAAK;IAAA,IAAAC,qBAAA,EAAAC,qBAAA;IACpCjC,kBAAkB,CAAC;MACjB,GAAG+B,QAAQ;MACXG,WAAW,EAAEH,QAAQ,CAACI,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACnDC,WAAW,GAAAL,qBAAA,GAAED,QAAQ,CAACI,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAAJ,qBAAA,uBAAtCA,qBAAA,CAAwCM,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MACpEC,aAAa,EAAER,QAAQ,CAACS,iBAAiB,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvDK,aAAa,GAAAR,qBAAA,GAAEF,QAAQ,CAACS,iBAAiB,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAAH,qBAAA,uBAAxCA,qBAAA,CAA0CK,SAAS,CAAC,CAAC,EAAE,CAAC;IACzE,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMI,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChC9C,kBAAkB,CAAE+C,IAAI,IAAK;MAC3B,MAAMC,eAAe,GAAG;QACtB,GAAGD,IAAI;QACP,CAACH,IAAI,GAAGC;MACV,CAAC;;MAED;MACA,IAAID,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,eAAe,IAAIA,IAAI,KAAK,eAAe,EAAE;QAC5G,MAAMK,eAAe,GAAG,GAAGD,eAAe,CAACd,WAAW,IAAIc,eAAe,CAACX,WAAW,KAAK;QAC1F,MAAMa,iBAAiB,GAAG,GAAGF,eAAe,CAACT,aAAa,IAAIS,eAAe,CAACP,aAAa,KAAK;QAEhG,IAAIO,eAAe,CAACd,WAAW,IAAIc,eAAe,CAACX,WAAW,IAAIW,eAAe,CAACT,aAAa,IAAIS,eAAe,CAACP,aAAa,EAAE;UAChI,MAAMU,OAAO,GAAG,IAAIC,IAAI,CAACH,eAAe,CAAC;UACzC,MAAMI,SAAS,GAAG,IAAID,IAAI,CAACF,iBAAiB,CAAC;;UAE7C;UACA,MAAMI,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACL,OAAO,GAAGE,SAAS,CAAC;UAC5C,MAAMI,SAAS,GAAGF,IAAI,CAACG,KAAK,CAACJ,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;UACvD,MAAMK,WAAW,GAAGJ,IAAI,CAACG,KAAK,CAAEJ,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,IAAK,IAAI,GAAG,EAAE,CAAC,CAAC;UAEzEN,eAAe,CAACY,UAAU,GAAG,GAAGH,SAAS,IAAIE,WAAW,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGA,WAAW,EAAE;QAC1F;MACF;MAEA,OAAOX,eAAe;IACxB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMa,UAAU,GAAG,MAAOC,UAAU,IAAK;IACvC,IAAI;MACF,MAAMd,eAAe,GAAG;QACtB,GAAGjD,eAAe;QAClBoC,eAAe,EAAE,GAAGpC,eAAe,CAACmC,WAAW,IAAInC,eAAe,CAACsC,WAAW,KAAK;QACnFG,iBAAiB,EAAE,GAAGzC,eAAe,CAACwC,aAAa,IAAIxC,eAAe,CAAC0C,aAAa;MACtF,CAAC;MACD,MAAMnD,aAAa,CAACyE,GAAG,CAAC,iCAAiCD,UAAU,EAAE,EAAEd,eAAe,CAAC;MACvFhD,kBAAkB,CAAC,IAAI,CAAC;MACxBmB,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAAC1B,KAAK,CAAC,0BAA0B,EAAEyB,GAAG,CAAC;MAC9CxB,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAM8D,YAAY,GAAGA,CAAA,KAAM;IACzBhE,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMiE,YAAY,GAAG,MAAOH,UAAU,IAAK;IACzC,IAAI;MACF,MAAMxE,aAAa,CAAC4E,MAAM,CAAC,iCAAiCJ,UAAU,EAAE,CAAC;MACzEhE,YAAY,CAACD,SAAS,CAACsE,MAAM,CAAEpC,QAAQ,IAAKA,QAAQ,CAACqC,UAAU,KAAKN,UAAU,CAAC,CAAC;IAClF,CAAC,CAAC,OAAOpC,GAAG,EAAE;MACZC,OAAO,CAAC1B,KAAK,CAAC,0BAA0B,EAAEyB,GAAG,CAAC;MAC9CxB,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAMmE,sBAAsB,GAAGA,CAAA,KAAM;IACnCjE,cAAc,CAAC,CAACD,WAAW,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMmE,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,eAAe,GAAG;QACtB,GAAGlE,WAAW;QACd8B,eAAe,EAAE,GAAG9B,WAAW,CAACI,WAAW,IAAIJ,WAAW,CAACK,WAAW,KAAK;QAC3E8B,iBAAiB,EAAE,GAAGnC,WAAW,CAACM,aAAa,IAAIN,WAAW,CAACO,aAAa;MAC9E,CAAC;MACD,MAAMtB,aAAa,CAACkF,IAAI,CAAC,+BAA+B,EAAED,eAAe,CAAC;MAC1EnE,cAAc,CAAC,KAAK,CAAC;MACrBE,cAAc,CAAC;QACbC,eAAe,EAAE,EAAE;QACnBC,UAAU,EAAE,EAAE;QACdC,WAAW,EAAE,EAAE;QACfC,WAAW,EAAE,EAAE;QACfC,aAAa,EAAE,EAAE;QACjBC,aAAa,EAAE,EAAE;QACjBC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE;MACT,CAAC,CAAC;MACFK,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAAC1B,KAAK,CAAC,8BAA8B,EAAEyB,GAAG,CAAC;MAClDxB,QAAQ,CAAC,+BAA+B,CAAC;IAC3C;EACF,CAAC;;EAED;EACA,MAAMuE,gBAAgB,GAAIC,SAAS,IAAK;IACtCpE,cAAc,CAAEyC,IAAI,IAAK;MACvB,IAAIA,IAAI,CAACjC,KAAK,CAAC6D,QAAQ,CAACD,SAAS,CAAC,EAAE;QAClC,OAAO;UACL,GAAG3B,IAAI;UACPjC,KAAK,EAAEiC,IAAI,CAACjC,KAAK,CAACqD,MAAM,CAAES,IAAI,IAAKA,IAAI,KAAKF,SAAS;QACvD,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACL,GAAG3B,IAAI;UACPjC,KAAK,EAAE,CAAC,GAAGiC,IAAI,CAACjC,KAAK,EAAE4D,SAAS;QAClC,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACElF,OAAA;IAAAqF,QAAA,gBACErF,OAAA;MAAAqF,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9BhF,KAAK,iBAAIT,OAAA;MAAG0F,SAAS,EAAC,OAAO;MAAAL,QAAA,EAAE5E;IAAK;MAAA6E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE1CzF,OAAA;MAAQ2F,OAAO,EAAEd,sBAAuB;MAAAQ,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAEnE9E,WAAW,iBACVX,OAAA;MAAAqF,QAAA,gBACErF,OAAA;QAAAqF,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BzF,OAAA;QACE4F,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,mBAAmB;QAC/BxC,KAAK,EAAExC,WAAW,CAACE,eAAgB;QACnC+E,QAAQ,EAAG3C,CAAC,IAAKrC,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEE,eAAe,EAAEoC,CAAC,CAACG,MAAM,CAACD;QAAM,CAAC;MAAE;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtF,CAAC,eACFzF,OAAA;QACE4F,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,qBAAqB;QACjCxC,KAAK,EAAExC,WAAW,CAACG,UAAW;QAC9B8E,QAAQ,EAAG3C,CAAC,IAAKrC,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEG,UAAU,EAAEmC,CAAC,CAACG,MAAM,CAACD;QAAM,CAAC;MAAE;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjF,CAAC,eACFzF,OAAA;QACE4F,IAAI,EAAC,MAAM;QACXvC,KAAK,EAAExC,WAAW,CAACI,WAAY;QAC/B6E,QAAQ,EAAG3C,CAAC,IAAKrC,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEI,WAAW,EAAEkC,CAAC,CAACG,MAAM,CAACD;QAAM,CAAC;MAAE;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClF,CAAC,eACFzF,OAAA;QACE4F,IAAI,EAAC,MAAM;QACXvC,KAAK,EAAExC,WAAW,CAACK,WAAY;QAC/B4E,QAAQ,EAAG3C,CAAC,IAAKrC,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEK,WAAW,EAAEiC,CAAC,CAACG,MAAM,CAACD;QAAM,CAAC;MAAE;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClF,CAAC,eACFzF,OAAA;QACE4F,IAAI,EAAC,MAAM;QACXvC,KAAK,EAAExC,WAAW,CAACM,aAAc;QACjC2E,QAAQ,EAAG3C,CAAC,IAAKrC,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEM,aAAa,EAAEgC,CAAC,CAACG,MAAM,CAACD;QAAM,CAAC;MAAE;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpF,CAAC,eACFzF,OAAA;QACE4F,IAAI,EAAC,MAAM;QACXvC,KAAK,EAAExC,WAAW,CAACO,aAAc;QACjC0E,QAAQ,EAAG3C,CAAC,IAAKrC,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEO,aAAa,EAAE+B,CAAC,CAACG,MAAM,CAACD;QAAM,CAAC;MAAE;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpF,CAAC,eACFzF,OAAA;QACEqD,KAAK,EAAExC,WAAW,CAACQ,OAAQ;QAC3ByE,QAAQ,EAAG3C,CAAC,IAAKrC,cAAc,CAAC;UAAE,GAAGD,WAAW;UAAEQ,OAAO,EAAE8B,CAAC,CAACG,MAAM,CAACD;QAAM,CAAC,CAAE;QAAAgC,QAAA,gBAE7ErF,OAAA;UAAQqD,KAAK,EAAC,EAAE;UAAAgC,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACxClE,eAAe,CAACwE,GAAG,CAAEC,KAAK,iBACzBhG,OAAA;UAA4BqD,KAAK,EAAE2C,KAAK,CAACC,OAAQ;UAAAZ,QAAA,EAC9CW,KAAK,CAACC;QAAO,GADHD,KAAK,CAACC,OAAO;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAElB,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eAETzF,OAAA;QAAAqF,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACpBhE,cAAc,CAACsE,GAAG,CAAEX,IAAI,iBACvBpF,OAAA;QAAAqF,QAAA,gBACErF,OAAA;UACE4F,IAAI,EAAC,UAAU;UACfM,OAAO,EAAErF,WAAW,CAACS,KAAK,CAAC6D,QAAQ,CAACC,IAAI,CAACe,SAAS,CAAE;UACpDL,QAAQ,EAAEA,CAAA,KAAMb,gBAAgB,CAACG,IAAI,CAACe,SAAS;QAAE;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CAAC,EACDL,IAAI,CAACgB,WAAW;MAAA,GANThB,IAAI,CAACe,SAAS;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOnB,CACN,CAAC,eAEFzF,OAAA;QAAQ2F,OAAO,EAAEb,iBAAkB;QAAAO,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CACN,eAEDzF,OAAA;MAAAqF,QAAA,EAAI;IAAyD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClEzF,OAAA;MAAO4F,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC;IAAiC;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEnEzF,OAAA;MAAAqF,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCzF,OAAA;MAAAqF,QAAA,gBACErF,OAAA;QAAAqF,QAAA,eACErF,OAAA;UAAAqF,QAAA,gBACErF,OAAA;YAAAqF,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBzF,OAAA;YAAAqF,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1BzF,OAAA;YAAAqF,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBzF,OAAA;YAAAqF,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrBzF,OAAA;YAAAqF,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrBzF,OAAA;YAAAqF,QAAA,EAAI;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvBzF,OAAA;YAAAqF,QAAA,EAAI;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvBzF,OAAA;YAAAqF,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjBzF,OAAA;YAAAqF,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRzF,OAAA;QAAAqF,QAAA,EACGhF,SAAS,CAAC0F,GAAG,CAAExD,QAAQ;UAAA,IAAA8D,sBAAA,EAAAC,sBAAA;UAAA,oBACtBtG,OAAA;YAAAqF,QAAA,EACG9E,eAAe,IAAIA,eAAe,CAACqE,UAAU,KAAKrC,QAAQ,CAACqC,UAAU,gBACpE5E,OAAA,CAAAE,SAAA;cAAAmF,QAAA,gBACErF,OAAA;gBAAAqF,QAAA,EAAK9C,QAAQ,CAACqC;cAAU;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9BzF,OAAA;gBAAAqF,QAAA,eACErF,OAAA;kBACE4F,IAAI,EAAC,MAAM;kBACXxC,IAAI,EAAC,iBAAiB;kBACtBC,KAAK,EAAE9C,eAAe,CAACgG,eAAgB;kBACvCT,QAAQ,EAAE5C;gBAAkB;kBAAAoC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLzF,OAAA;gBAAAqF,QAAA,EAAK9E,eAAe,CAAC6D;cAAU;gBAAAkB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACrCzF,OAAA;gBAAAqF,QAAA,eACErF,OAAA;kBACE4F,IAAI,EAAC,MAAM;kBACXxC,IAAI,EAAC,aAAa;kBAClBC,KAAK,EAAE9C,eAAe,CAACmC,WAAY;kBACnCoD,QAAQ,EAAE5C;gBAAkB;kBAAAoC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLzF,OAAA;gBAAAqF,QAAA,eACErF,OAAA;kBACE4F,IAAI,EAAC,MAAM;kBACXxC,IAAI,EAAC,aAAa;kBAClBC,KAAK,EAAE9C,eAAe,CAACsC,WAAY;kBACnCiD,QAAQ,EAAE5C;gBAAkB;kBAAAoC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLzF,OAAA;gBAAAqF,QAAA,eACErF,OAAA;kBACE4F,IAAI,EAAC,MAAM;kBACXxC,IAAI,EAAC,eAAe;kBACpBC,KAAK,EAAE9C,eAAe,CAACwC,aAAc;kBACrC+C,QAAQ,EAAE5C;gBAAkB;kBAAAoC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLzF,OAAA;gBAAAqF,QAAA,eACErF,OAAA;kBACE4F,IAAI,EAAC,MAAM;kBACXxC,IAAI,EAAC,eAAe;kBACpBC,KAAK,EAAE9C,eAAe,CAAC0C,aAAc;kBACrC6C,QAAQ,EAAE5C;gBAAkB;kBAAAoC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLzF,OAAA;gBAAAqF,QAAA,eACErF,OAAA;kBACE4F,IAAI,EAAC,MAAM;kBACXxC,IAAI,EAAC,SAAS;kBACdC,KAAK,EAAE9C,eAAe,CAAC0F,OAAQ;kBAC/BH,QAAQ,EAAE5C;gBAAkB;kBAAAoC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACLzF,OAAA;gBAAAqF,QAAA,gBACErF,OAAA;kBAAQ2F,OAAO,EAAEA,CAAA,KAAMtB,UAAU,CAAC9B,QAAQ,CAACqC,UAAU,CAAE;kBAAAS,QAAA,EAAC;gBAAI;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACrEzF,OAAA;kBAAQ2F,OAAO,EAAEnB,YAAa;kBAACgC,KAAK,EAAE;oBAAEC,UAAU,EAAE;kBAAM,CAAE;kBAAApB,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1E,CAAC;YAAA,eACL,CAAC,gBAEHzF,OAAA,CAAAE,SAAA;cAAAmF,QAAA,gBACErF,OAAA;gBAAAqF,QAAA,EAAK9C,QAAQ,CAACqC;cAAU;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9BzF,OAAA;gBAAAqF,QAAA,EAAK9C,QAAQ,CAACgE;cAAe;gBAAAjB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnCzF,OAAA;gBAAAqF,QAAA,EAAK9C,QAAQ,CAAC6B;cAAU;gBAAAkB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9BzF,OAAA;gBAAAqF,QAAA,EAAK9C,QAAQ,CAACI,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;cAAC;gBAAA0C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjDzF,OAAA;gBAAAqF,QAAA,GAAAgB,sBAAA,GAAK9D,QAAQ,CAACI,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAAyD,sBAAA,uBAAtCA,sBAAA,CAAwCvD,SAAS,CAAC,CAAC,EAAE,CAAC;cAAC;gBAAAwC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAClEzF,OAAA;gBAAAqF,QAAA,EAAK9C,QAAQ,CAACS,iBAAiB,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;cAAC;gBAAA0C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnDzF,OAAA;gBAAAqF,QAAA,GAAAiB,sBAAA,GAAK/D,QAAQ,CAACS,iBAAiB,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAA0D,sBAAA,uBAAxCA,sBAAA,CAA0CxD,SAAS,CAAC,CAAC,EAAE,CAAC;cAAC;gBAAAwC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpEzF,OAAA;gBAAAqF,QAAA,EAAK9C,QAAQ,CAAC0D;cAAO;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC3BzF,OAAA;gBAAAqF,QAAA,gBACErF,OAAA;kBAAQ2F,OAAO,EAAEA,CAAA,KAAMrD,eAAe,CAACC,QAAQ,CAAE;kBAACiE,KAAK,EAAE;oBAAEE,WAAW,EAAE;kBAAM,CAAE;kBAAArB,QAAA,EAAC;gBAEjF;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACRlD,QAAQ,CAACoE,gBAAgB,KAAK,CAAC,gBAC9B3G,OAAA;kBAAQ2F,OAAO,EAAEA,CAAA,KAAMlB,YAAY,CAAClC,QAAQ,CAACqC,UAAU,CAAE;kBAAAS,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,gBAEzEzF,OAAA;kBAAQ4G,QAAQ;kBAACC,KAAK,EAAC,oCAAoC;kBAAAxB,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAC3E;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA,eACL;UACH,GA/EMlD,QAAQ,CAACqC,UAAU;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAgFxB,CAAC;QAAA,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACrF,EAAA,CAtWID,kBAAkB;AAAA2G,EAAA,GAAlB3G,kBAAkB;AAwWxB,eAAeA,kBAAkB;AAAC,IAAA2G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}