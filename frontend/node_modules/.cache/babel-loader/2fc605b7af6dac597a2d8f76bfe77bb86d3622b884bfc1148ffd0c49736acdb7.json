{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js\",\n  _s = $RefreshSig$();\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n// // //   const [editMode, setEditMode] = useState(null);\n// // //   const [formValues, setFormValues] = useState({});\n\n// // //   // Fetch schedules on component mount\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Function to fetch train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/representative/schedules');\n// // //       setSchedules(response.data.schedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle delete schedule\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit schedule\n// // //   const editSchedule = (schedule) => {\n// // //     setEditMode(schedule.ScheduleID);\n// // //     setFormValues({\n// // //       TransitLineName: schedule.TransitLineName,\n// // //       DepartureDateTime: schedule.DepartureDateTime,\n// // //       ArrivalDateTime: schedule.ArrivalDateTime,\n// // //       TravelTime: schedule.TravelTime,\n// // //     });\n// // //   };\n\n// // //   // Handle form input changes\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setFormValues({ ...formValues, [name]: value });\n// // //   };\n\n// // //   // Handle save edited schedule\n// // //   const saveSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// // //       setEditMode(null);\n// // //       fetchSchedules();\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update schedule.');\n// // //     }\n// // //   };\n\n// // //   // Render\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"text\"\n// // //                     name=\"TransitLineName\"\n// // //                     value={formValues.TransitLineName}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   schedule.TransitLineName\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"datetime-local\"\n// // //                     name=\"DepartureDateTime\"\n// // //                     value={formValues.DepartureDateTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"datetime-local\"\n// // //                     name=\"ArrivalDateTime\"\n// // //                     value={formValues.ArrivalDateTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"time\"\n// // //                     name=\"TravelTime\"\n// // //                     value={formValues.TravelTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   schedule.TravelTime\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <>\n// // //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// // //                   </>\n// // //                 ) : (\n// // //                   <>\n// // //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// // //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //                   </>\n// // //                 )}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainId: '',\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // //   };\n\n// // //   const addSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // //     } catch (err) {\n// // //       console.error('Error adding schedule:', err);\n// // //       setError('Failed to add new schedule.');\n// // //     }\n// // //   };\n\n// // //   const editSchedule = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       fetchSchedules(); // Refresh the list after editing\n// // //     } catch (err) {\n// // //       console.error('Error editing schedule:', err);\n// // //       setError('Failed to edit schedule.');\n// // //     }\n// // //   };\n\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       fetchSchedules(); // Refresh the list after deleting\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Form to Add New Schedule */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"time\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainId\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainId}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={addSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Schedule Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TransitLineName}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"time\"\n// // //                   value={schedule.TravelTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   value={schedule.ArrivalDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   value={schedule.DepartureDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TrainID}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainId: '',\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // //   };\n\n// // //   const addSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // //     } catch (err) {\n// // //       console.error('Error adding schedule:', err);\n// // //       setError('Failed to add new schedule.');\n// // //     }\n// // //   };\n\n// // //   const editSchedule = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       fetchSchedules(); // Refresh the list after editing\n// // //     } catch (err) {\n// // //       console.error('Error editing schedule:', err);\n// // //       setError('Failed to edit schedule.');\n// // //     }\n// // //   };\n\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       fetchSchedules(); // Refresh the list after deleting\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Form to Add New Schedule */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"time\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainId\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainId}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={addSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Schedule Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TransitLineName}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"time\"\n// // //                   value={schedule.TravelTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.ArrivalDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.DepartureDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TrainID}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime}</td>\n// // //               <td>{schedule.DepartureDateTime}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //               <td>\n// // //                 <button\n// // //                   onClick={() => console.log('Edit schedule')}\n// // //                   style={{ marginRight: '5px' }}\n// // //                 >\n// // //                   Edit\n// // //                 </button>\n// // //                 {schedule.ReservationCount === 0 ? (\n// // //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                 ) : (\n// // //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                 )}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [transitLineName, setTransitLineName] = useState('');\n// // //   const [travelTime, setTravelTime] = useState('');\n// // //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// // //   const [departureDateTime, setDepartureDateTime] = useState('');\n// // //   const [trainID, setTrainID] = useState('');\n// // //   const [success, setSuccess] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle adding a new schedule\n// // //   const handleAddSchedule = async (e) => {\n// // //     e.preventDefault();\n// // //     try {\n// // //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// // //         TransitLineName: transitLineName,\n// // //         TravelTime: travelTime,\n// // //         ArrivalDateTime: arrivalDateTime,\n// // //         DepartureDateTime: departureDateTime,\n// // //         TrainID: trainID,\n// // //       });\n\n// // //       setSuccess(response.data.message);\n// // //       setError('');\n// // //       fetchSchedules(); // Refresh the schedule list\n\n// // //       // Clear form fields\n// // //       setTransitLineName('');\n// // //       setTravelTime('');\n// // //       setArrivalDateTime('');\n// // //       setDepartureDateTime('');\n// // //       setTrainID('');\n// // //     } catch (err) {\n// // //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// // //       setSuccess('');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n\n// // //       {/* Add Train Schedule Form */}\n// // //       <div>\n// // //         <h3>Add Train Schedule</h3>\n// // //         <form onSubmit={handleAddSchedule}>\n// // //           <div>\n// // //             <label>Transit Line Name:</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={transitLineName}\n// // //               onChange={(e) => setTransitLineName(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Travel Time (hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={travelTime}\n// // //               onChange={(e) => setTravelTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={arrivalDateTime}\n// // //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={departureDateTime}\n// // //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Train ID:</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={trainID}\n// // //               onChange={(e) => setTrainID(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <button type=\"submit\">Add Schedule</button>\n// // //         </form>\n// // //         {error && <p className=\"error\">{error}</p>}\n// // //         {success && <p className=\"success\">{success}</p>}\n// // //       </div>\n\n// // //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       if (response.data.trainSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name to filter schedules\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {filteredSchedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       if (response.data.trainSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Manage Train Schedules Section */}\n// // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n\n// // //       {/* Search Train Schedules by Station Section */}\n// // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name to filter schedules\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {filteredSchedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [originSchedules, setOriginSchedules] = useState([]);\n// // //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name (origin and destination)\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setOriginSchedules(response.data.originSchedules);\n// // //       setDestinationSchedules(response.data.destinationSchedules);\n// // //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Manage Train Schedules Section */}\n// // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n\n// // //       {/* Search Train Schedules by Station Section */}\n// // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <h4>Schedules with Station as Origin</h4>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {originSchedules.length > 0 ? (\n// // //             originSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.TravelTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.TrainID}</td>\n// // //               </tr>\n// // //             ))\n// // //           ) : (\n// // //             <tr>\n// // //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// // //             </tr>\n// // //           )}\n// // //         </tbody>\n// // //       </table>\n\n// // //       <h4>Schedules with Station as Destination</h4>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {destinationSchedules.length > 0 ? (\n// // //             destinationSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.TravelTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.TrainID}</td>\n// // //               </tr>\n// // //             ))\n// // //           ) : (\n// // //             <tr>\n// // //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// // //             </tr>\n// // //           )}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Add Train Schedule</h3>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time (HH:MM)\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainID\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainID}\n// //           onChange={handleInputChange}\n// //         />\n\n// //         <h4>Select Stops</h4>\n// //         {stations.map((station) => (\n// //           <div key={station.StationID}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 value={station.StationID}\n// //                 onChange={handleStopSelection}\n// //               />\n// //               {station.StationName}\n// //             </label>\n// //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //               <div>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Arrival DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                   }\n// //                 />\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Departure DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                   }\n// //                 />\n// //               </div>\n// //             )}\n// //           </div>\n// //         ))}\n\n// //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Train Schedules Table */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>{schedule.TransitLineName}</td>\n// //               <td>{schedule.TravelTime}</td>\n// //               <td>{schedule.ArrivalDateTime}</td>\n// //               <td>{schedule.DepartureDateTime}</td>\n// //               <td>{schedule.TrainID}</td>\n// //               <td>\n// //                 {/* You can implement edit and delete buttons here */}\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Add Train Schedule</h3>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time (HH:MM)\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainID\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainID}\n//           onChange={handleInputChange}\n//         />\n\n//         <h4>Select Stops</h4>\n//         {stations.map((station) => (\n//           <div key={station.StationID}>\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 value={station.StationID}\n//                 onChange={handleStopSelection}\n//               />\n//               {station.StationName}\n//             </label>\n//             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//               <div>\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Arrival DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                   }\n//                 />\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Departure DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                   }\n//                 />\n//               </div>\n//             )}\n//           </div>\n//         ))}\n\n//         <button onClick={handleAddSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter\"\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//       </div>\n\n//       {/* Display Train Schedules */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {searchedSchedules.length > 0\n//             ? searchedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))\n//             : schedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                     <>\n//                       <td>{schedule.ScheduleID}</td>\n//                       <td>\n//                         <input\n//                           type=\"text\"\n//                           name=\"TransitLineName\"\n//                           value={editingSchedule.TransitLineName}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>{editingSchedule.TravelTime}</td>\n//                       <td>\n//                         <input\n//                           type=\"date\"\n//                           name=\"ArrivalDate\"\n//                           value={editingSchedule.ArrivalDate}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"time\"\n//                           name=\"ArrivalTime\"\n//                           value={editingSchedule.ArrivalTime}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"date\"\n//                           name=\"DepartureDate\"\n//                           value={editingSchedule.DepartureDate}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"time\"\n//                           name=\"DepartureTime\"\n//                           value={editingSchedule.DepartureTime}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"text\"\n//                           name=\"TrainID\"\n//                           value={editingSchedule.TrainID}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                         <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                       </td>\n//                     </>\n//                   ) : (\n//                     <>\n//                       <td>{schedule.ScheduleID}</td>\n//                       <td>{schedule.TransitLineName}</td>\n//                       <td>{schedule.TravelTime}</td>\n//                       <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                       <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                       <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                       <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                       <td>{schedule.TrainID}</td>\n//                       <td>\n//                         <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                           Edit\n//                         </button>\n//                         {schedule.ReservationCount === 0 ? (\n//                           <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                         ) : (\n//                           <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                         )}\n//                       </td>\n//                     </>\n//                   )}\n//                 </tr>\n//               ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// // export default ManageSchedulesTab;\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Button to toggle Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//         </button>\n//       </div>\n\n//       {/* Add Train Schedule Form */}\n//       {showAddScheduleForm && (\n//         <div style={{ marginBottom: '20px' }}>\n//           <h3>Add Train Schedule</h3>\n//           <input\n//             type=\"text\"\n//             name=\"transitLineName\"\n//             placeholder=\"Transit Line Name\"\n//             value={newSchedule.transitLineName}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"travelTime\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"arrivalDateTime\"\n//             placeholder=\"Arrival DateTime\"\n//             value={newSchedule.arrivalDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"departureDateTime\"\n//             placeholder=\"Departure DateTime\"\n//             value={newSchedule.departureDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"trainID\"\n//             placeholder=\"Train ID\"\n//             value={newSchedule.trainID}\n//             onChange={handleInputChange}\n//           />\n\n//           <h4>Select Stops</h4>\n//           {stations.map((station) => (\n//             <div key={station.StationID}>\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   value={station.StationID}\n//                   onChange={handleStopSelection}\n//                 />\n//                 {station.StationName}\n//               </label>\n//               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//                 <div>\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Arrival DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                     }\n//                   />\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Departure DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                     }\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       {/* Display All Train Schedules */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Current Train Schedules</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {schedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TransitLineName\"\n//                         value={editingSchedule.TransitLineName}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>{editingSchedule.TravelTime}</td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"ArrivalDate\"\n//                         value={editingSchedule.ArrivalDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"ArrivalTime\"\n//                         value={editingSchedule.ArrivalTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"DepartureDate\"\n//                         value={editingSchedule.DepartureDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"DepartureTime\"\n//                         value={editingSchedule.DepartureTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TrainID\"\n//                         value={editingSchedule.TrainID}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                     <td>\n//                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                         Edit\n//                       </button>\n//                       {schedule.ReservationCount === 0 ? (\n//                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                       ) : (\n//                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                       )}\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter\"\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {searchedSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.TravelTime}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.TrainID}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ManageSchedulesTab = () => {\n  _s();\n  //   const [schedules, setSchedules] = useState([]);\n  //   const [stations, setStations] = useState([]);\n  //   const [trains, setTrains] = useState([]);\n  //   const [newSchedule, setNewSchedule] = useState({\n  //     transitLineName: '',\n  //     travelTime: '',\n  //     arrivalDateTime: '',\n  //     departureDateTime: '',\n  //     trainID: '',\n  //     stops: []\n  //   });\n  //   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n  //   const [searchStationName, setSearchStationName] = useState('');\n  //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n  //   const [editingSchedule, setEditingSchedule] = useState(null);\n  //   const [error, setError] = useState('');\n\n  //   useEffect(() => {\n  //     fetchSchedules();\n  //     fetchStations();\n  //     fetchTrains();\n  //   }, []);\n\n  //   // Fetch all train schedules\n  //   const fetchSchedules = async () => {\n  //     try {\n  //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n  //       setSchedules(response.data.trainSchedules);\n  //       setError('');\n  //     } catch (err) {\n  //       console.error('Error fetching schedules:', err);\n  //       setError('Failed to fetch schedules.');\n  //     }\n  //   };\n\n  //   // Fetch all available stations for stops selection\n  //   const fetchStations = async () => {\n  //     try {\n  //       const response = await axiosInstance.get('/stations');\n  //       setStations(response.data.stations);\n  //     } catch (err) {\n  //       console.error('Error fetching stations:', err);\n  //     }\n  //   };\n\n  //   // Fetch all available trains for TrainID dropdown\n  //   const fetchTrains = async () => {\n  //     try {\n  //       const response = await axiosInstance.get('/customer-rep/trains');\n  //       setTrains(response.data.trains);\n  //     } catch (err) {\n  //       console.error('Error fetching trains:', err);\n  //     }\n  //   };\n\n  //   // Handle input change for new schedule form\n  //   const handleInputChange = (e) => {\n  //     const { name, value } = e.target;\n  //     setNewSchedule((prev) => ({\n  //       ...prev,\n  //       [name]: value,\n  //     }));\n  //   };\n\n  //   // Handle stops selection\n  //   const handleStopSelection = (e) => {\n  //     const stationID = parseInt(e.target.value);\n  //     const isChecked = e.target.checked;\n\n  //     setNewSchedule((prev) => {\n  //       const updatedStops = isChecked\n  //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n  //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n  //       return { ...prev, stops: updatedStops };\n  //     });\n  //   };\n\n  //   // Handle arrival and departure date-time changes for each stop\n  //   const handleStopDateTimeChange = (stationID, field, value) => {\n  //     setNewSchedule((prev) => {\n  //       const updatedStops = prev.stops.map((stop) => {\n  //         if (stop.stationID === stationID) {\n  //           return { ...stop, [field]: value };\n  //         }\n  //         return stop;\n  //       });\n  //       return { ...prev, stops: updatedStops };\n  //     });\n  //   };\n\n  //   // Handle save button click for adding the new schedule\n  //   const handleAddSchedule = async () => {\n  //     try {\n  //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n  //       setNewSchedule({\n  //         transitLineName: '',\n  //         travelTime: '',\n  //         arrivalDateTime: '',\n  //         departureDateTime: '',\n  //         trainID: '',\n  //         stops: []\n  //       });\n  //       setShowAddScheduleForm(false);\n  //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n  //       setError('');\n  //     } catch (err) {\n  //       console.error('Error adding train schedule:', err);\n  //       setError('Failed to add train schedule.');\n  //     }\n  //   };\n\n  //   // Handle search for schedules by station name\n  //   const handleSearchSchedules = async () => {\n  //     if (!searchStationName) {\n  //       setError('Please enter a station name to search.');\n  //       return;\n  //     }\n  //     try {\n  //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n  //       setSearchedSchedules(response.data.trainSchedules);\n  //       setError('');\n  //     } catch (err) {\n  //       console.error('Error searching schedules:', err);\n  //       setError('Failed to search schedules.');\n  //     }\n  //   };\n\n  const [schedules, setSchedules] = useState([]);\n  const [stations, setStations] = useState([]);\n  const [transitLines, setTransitLines] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDateTime: '',\n    departureDateTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n  const [searchStationName, setSearchStationName] = useState('');\n  const [searchedSchedules, setSearchedSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchSchedules();\n    fetchStations();\n    fetchTransitLines(); // Fetch available transit lines for dropdown\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available stations for stops selection\n  const fetchStations = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setStations(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stations:', err);\n    }\n  };\n\n  // Fetch all available transit lines for selection\n  const fetchTransitLines = async () => {\n    try {\n      const response = await axiosInstance.get('/api/transit-lines');\n      setTransitLines(response.data.transitLines);\n    } catch (err) {\n      console.error('Error fetching transit lines:', err);\n    }\n  };\n\n  // Handle input change for new schedule form\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewSchedule(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle stops selection\n  const handleStopSelection = e => {\n    const stationID = parseInt(e.target.value);\n    const isChecked = e.target.checked;\n    setNewSchedule(prev => {\n      const updatedStops = isChecked ? [...prev.stops, {\n        stationID,\n        arrivalDateTime: '',\n        departureDateTime: ''\n      }] : prev.stops.filter(stop => stop.stationID !== stationID);\n      return {\n        ...prev,\n        stops: updatedStops\n      };\n    });\n  };\n\n  // Handle arrival and departure date-time changes for each stop\n  const handleStopDateTimeChange = (stationID, field, value) => {\n    setNewSchedule(prev => {\n      const updatedStops = prev.stops.map(stop => {\n        if (stop.stationID === stationID) {\n          return {\n            ...stop,\n            [field]: value\n          };\n        }\n        return stop;\n      });\n      return {\n        ...prev,\n        stops: updatedStops\n      };\n    });\n  };\n\n  // Handle save button click for adding the new schedule\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDateTime: '',\n        departureDateTime: '',\n        trainID: '',\n        stops: []\n      });\n      setShowAddScheduleForm(false);\n      fetchSchedules(); // Re-fetch schedules to reflect the new addition\n      setError('');\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle search for schedules by station name\n  const handleSearchSchedules = async () => {\n    if (!searchStationName) {\n      setError('Please enter a station name to search.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n      setSearchedSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error searching schedules:', err);\n      setError('Failed to search schedules.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = schedule => {\n    var _schedule$ArrivalDate, _schedule$DepartureDa;\n    setEditingSchedule({\n      ...schedule,\n      ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n      ArrivalTime: (_schedule$ArrivalDate = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate === void 0 ? void 0 : _schedule$ArrivalDate.substring(0, 5),\n      DepartureDate: schedule.DepartureDateTime.split('T')[0],\n      DepartureTime: (_schedule$DepartureDa = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa === void 0 ? void 0 : _schedule$DepartureDa.substring(0, 5)\n    });\n  };\n\n  // Handle input change for editable fields\n  const handleEditInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditingSchedule(prev => {\n      const updatedSchedule = {\n        ...prev,\n        [name]: value\n      };\n\n      // Automatically calculate travel time if arrival or departure changes\n      if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n        const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n        const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n        if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n          const arrival = new Date(arrivalDateTime);\n          const departure = new Date(departureDateTime);\n\n          // Calculate the travel time in hours and minutes\n          const diffMs = Math.abs(arrival - departure);\n          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n          const diffMinutes = Math.floor(diffMs % (1000 * 60 * 60) / (1000 * 60));\n          updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n        }\n      }\n      return updatedSchedule;\n    });\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async scheduleId => {\n    try {\n      const updatedSchedule = {\n        ...editingSchedule,\n        ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n        DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`\n      };\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async scheduleId => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter(schedule => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <h2>Manage Train Schedules</h2>\n    //   {error && <p className=\"error\">{error}</p>}\n    //   {/* Button to toggle Add Train Schedule Form */}\n    //   <div style={{ marginBottom: '20px' }}>\n    //     <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n    //       {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n    //     </button>\n    //   </div>\n    //   {/* Add Train Schedule Form */}\n    //   {showAddScheduleForm && (\n    //     <div style={{ marginBottom: '20px' }}>\n    //       <h3>Add Train Schedule</h3>\n    //       <input\n    //         type=\"text\"\n    //         name=\"transitLineName\"\n    //         placeholder=\"Transit Line Name\"\n    //         value={newSchedule.transitLineName}\n    //         onChange={handleInputChange}\n    //       />\n    //       <input\n    //         type=\"text\"\n    //         name=\"travelTime\"\n    //         placeholder=\"Travel Time (HH:MM)\"\n    //         value={newSchedule.travelTime}\n    //         onChange={handleInputChange}\n    //       />\n    //       <input\n    //         type=\"datetime-local\"\n    //         name=\"arrivalDateTime\"\n    //         placeholder=\"Arrival DateTime\"\n    //         value={newSchedule.arrivalDateTime}\n    //         onChange={handleInputChange}\n    //       />\n    //       <input\n    //         type=\"datetime-local\"\n    //         name=\"departureDateTime\"\n    //         placeholder=\"Departure DateTime\"\n    //         value={newSchedule.departureDateTime}\n    //         onChange={handleInputChange}\n    //       />\n    //       <select\n    //         name=\"trainID\"\n    //         value={newSchedule.trainID}\n    //         onChange={handleInputChange}\n    //       >\n    //         <option value=\"\">Select Train ID</option>\n    //         {trains.map((train) => (\n    //           <option key={train.TrainID} value={train.TrainID}>\n    //             {train.TrainID}\n    //           </option>\n    //         ))}\n    //       </select>\n    //       <h4>Select Stops</h4>\n    //       {stations.map((station) => (\n    //         <div key={station.StationID}>\n    //           <label>\n    //             <input\n    //               type=\"checkbox\"\n    //               value={station.StationID}\n    //               onChange={handleStopSelection}\n    //             />\n    //             {station.StationName}\n    //           </label>\n    //           {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n    //             <div>\n    //               <input\n    //                 type=\"datetime-local\"\n    //                 placeholder=\"Arrival DateTime\"\n    //                 onChange={(e) =>\n    //                   handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n    //                 }\n    //               />\n    //               <input\n    //                 type=\"datetime-local\"\n    //                 placeholder=\"Departure DateTime\"\n    //                 onChange={(e) =>\n    //                   handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n    //                 }\n    //               />\n    //             </div>\n    //           )}\n    //         </div>\n    //       ))}\n    //       <button onClick={handleAddSchedule}>Add Schedule</button>\n    //     </div>\n    //   )}\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Manage Train Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3776,\n        columnNumber: 7\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3777,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowAddScheduleForm(!showAddScheduleForm),\n          children: showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3781,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3780,\n        columnNumber: 7\n      }, this), showAddScheduleForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Add Train Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3789,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"transitLineName\",\n          value: newSchedule.transitLineName,\n          onChange: handleInputChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Transit Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3795,\n            columnNumber: 13\n          }, this), transitLines.map(line => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: line.TransitLineName,\n            children: line.TransitLineName\n          }, line.TransitLineName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3797,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3790,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"travelTime\",\n          placeholder: \"Travel Time (HH:MM)\",\n          value: newSchedule.travelTime,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3802,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          name: \"arrivalDateTime\",\n          placeholder: \"Arrival DateTime\",\n          value: newSchedule.arrivalDateTime,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3809,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          name: \"departureDateTime\",\n          placeholder: \"Departure DateTime\",\n          value: newSchedule.departureDateTime,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3816,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"trainID\",\n          value: newSchedule.trainID,\n          onChange: handleInputChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Train ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3828,\n            columnNumber: 13\n          }, this), stations.map(train => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: train.TrainID,\n            children: train.TrainID\n          }, train.TrainID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3830,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3823,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Select Stops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3836,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              value: station.StationID,\n              onChange: handleStopSelection\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3840,\n              columnNumber: 17\n            }, this), station.StationName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3839,\n            columnNumber: 15\n          }, this), newSchedule.stops.some(stop => stop.stationID === station.StationID) && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"datetime-local\",\n              placeholder: \"Arrival DateTime\",\n              onChange: e => handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3849,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"datetime-local\",\n              placeholder: \"Departure DateTime\",\n              onChange: e => handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3856,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3848,\n            columnNumber: 17\n          }, this)]\n        }, station.StationID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3838,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddSchedule,\n          children: \"Add Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3868,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3788,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Current Train Schedules\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3874,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Schedule ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3878,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Transit Line Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3879,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Travel Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3880,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Arrival Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3881,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Arrival Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3882,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Departure Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3883,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Departure Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3884,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Train ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3885,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3886,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 3877,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3876,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: schedules.map(schedule => {\n              var _schedule$ArrivalDate2, _schedule$DepartureDa2;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: schedule.ScheduleID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3894,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      name: \"TransitLineName\",\n                      value: editingSchedule.TransitLineName,\n                      onChange: handleEditInputChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3896,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3895,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: editingSchedule.TravelTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3903,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"date\",\n                      name: \"ArrivalDate\",\n                      value: editingSchedule.ArrivalDate,\n                      onChange: handleEditInputChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3905,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3904,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      name: \"ArrivalTime\",\n                      value: editingSchedule.ArrivalTime,\n                      onChange: handleEditInputChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3913,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3912,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"date\",\n                      name: \"DepartureDate\",\n                      value: editingSchedule.DepartureDate,\n                      onChange: handleEditInputChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3921,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3920,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"time\",\n                      name: \"DepartureTime\",\n                      value: editingSchedule.DepartureTime,\n                      onChange: handleEditInputChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3929,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3928,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"select\", {\n                      name: \"TrainID\",\n                      value: editingSchedule.TrainID,\n                      onChange: handleEditInputChange,\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"\",\n                        children: \"Select Train ID\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 3942,\n                        columnNumber: 25\n                      }, this), trains.map(train => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: train.TrainID,\n                        children: train.TrainID\n                      }, train.TrainID, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 3944,\n                        columnNumber: 27\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3937,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3936,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleSave(schedule.ScheduleID),\n                      children: \"Save\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3951,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleCancel,\n                      style: {\n                        marginLeft: '5px'\n                      },\n                      children: \"Cancel\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3952,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3950,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: schedule.ScheduleID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3957,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: schedule.TransitLineName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3958,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: schedule.TravelTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3959,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: schedule.ArrivalDateTime.split('T')[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3960,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: (_schedule$ArrivalDate2 = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate2 === void 0 ? void 0 : _schedule$ArrivalDate2.substring(0, 5)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3961,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: schedule.DepartureDateTime.split('T')[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3962,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: (_schedule$DepartureDa2 = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa2 === void 0 ? void 0 : _schedule$DepartureDa2.substring(0, 5)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3963,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: schedule.TrainID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3964,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleEditClick(schedule),\n                      style: {\n                        marginRight: '5px'\n                      },\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3966,\n                      columnNumber: 23\n                    }, this), schedule.ReservationCount === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleDelete(schedule.ScheduleID),\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3970,\n                      columnNumber: 25\n                    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                      disabled: true,\n                      title: \"Cannot delete. Reservations exist.\",\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3972,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3965,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true)\n              }, schedule.ScheduleID, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3891,\n                columnNumber: 15\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3889,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3875,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3873,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Search Train Schedules by Station (Origin or Destination)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3985,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: searchStationName,\n          onChange: e => setSearchStationName(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Station\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3990,\n            columnNumber: 5\n          }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: station.StationName,\n            children: station.StationName\n          }, station.StationID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3992,\n            columnNumber: 7\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3986,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSearchSchedules,\n          children: \"Search Schedules by Station\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3997,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Schedule ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4002,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Transit Line Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4003,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Travel Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4004,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Arrival Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4005,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Arrival Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4006,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Departure Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4007,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Departure Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4008,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Train ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4009,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 4001,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4000,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: searchedSchedules.map(schedule => {\n              var _schedule$ArrivalDate3, _schedule$DepartureDa3;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: schedule.ScheduleID\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4015,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: schedule.TransitLineName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4016,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: schedule.TravelTime\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4017,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: schedule.ArrivalDateTime.split('T')[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4018,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: (_schedule$ArrivalDate3 = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate3 === void 0 ? void 0 : _schedule$ArrivalDate3.substring(0, 5)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4019,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: schedule.DepartureDateTime.split('T')[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4020,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: (_schedule$DepartureDa3 = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa3 === void 0 ? void 0 : _schedule$DepartureDa3.substring(0, 5)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4021,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: schedule.TrainID\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4022,\n                  columnNumber: 11\n                }, this)]\n              }, schedule.ScheduleID, true, {\n                fileName: _jsxFileName,\n                lineNumber: 4014,\n                columnNumber: 9\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4012,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3999,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3984,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3775,\n      columnNumber: 1\n    }, this)\n  );\n};\n_s(ManageSchedulesTab, \"c2NzUgYQ+gq8OPOfhtgnNiLEzO8=\");\n_c = ManageSchedulesTab;\nexport default ManageSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"ManageSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","Fragment","_Fragment","ManageSchedulesTab","_s","schedules","setSchedules","stations","setStations","transitLines","setTransitLines","newSchedule","setNewSchedule","transitLineName","travelTime","arrivalDateTime","departureDateTime","trainID","stops","showAddScheduleForm","setShowAddScheduleForm","searchStationName","setSearchStationName","searchedSchedules","setSearchedSchedules","editingSchedule","setEditingSchedule","error","setError","fetchSchedules","fetchStations","fetchTransitLines","response","get","data","trainSchedules","err","console","handleInputChange","e","name","value","target","prev","handleStopSelection","stationID","parseInt","isChecked","checked","updatedStops","filter","stop","handleStopDateTimeChange","field","map","handleAddSchedule","post","handleSearchSchedules","handleEditClick","schedule","_schedule$ArrivalDate","_schedule$DepartureDa","ArrivalDate","ArrivalDateTime","split","ArrivalTime","substring","DepartureDate","DepartureDateTime","DepartureTime","handleEditInputChange","updatedSchedule","arrival","Date","departure","diffMs","Math","abs","diffHours","floor","diffMinutes","TravelTime","handleSave","scheduleId","put","handleCancel","handleDelete","delete","ScheduleID","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","marginBottom","onClick","onChange","line","TransitLineName","type","placeholder","train","TrainID","station","StationID","StationName","some","_schedule$ArrivalDate2","_schedule$DepartureDa2","trains","marginLeft","marginRight","ReservationCount","disabled","title","_schedule$ArrivalDate3","_schedule$DepartureDa3","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js"],"sourcesContent":["// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n// // //   const [editMode, setEditMode] = useState(null);\n// // //   const [formValues, setFormValues] = useState({});\n\n// // //   // Fetch schedules on component mount\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Function to fetch train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/representative/schedules');\n// // //       setSchedules(response.data.schedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle delete schedule\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit schedule\n// // //   const editSchedule = (schedule) => {\n// // //     setEditMode(schedule.ScheduleID);\n// // //     setFormValues({\n// // //       TransitLineName: schedule.TransitLineName,\n// // //       DepartureDateTime: schedule.DepartureDateTime,\n// // //       ArrivalDateTime: schedule.ArrivalDateTime,\n// // //       TravelTime: schedule.TravelTime,\n// // //     });\n// // //   };\n\n// // //   // Handle form input changes\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setFormValues({ ...formValues, [name]: value });\n// // //   };\n\n// // //   // Handle save edited schedule\n// // //   const saveSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// // //       setEditMode(null);\n// // //       fetchSchedules();\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update schedule.');\n// // //     }\n// // //   };\n\n// // //   // Render\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"text\"\n// // //                     name=\"TransitLineName\"\n// // //                     value={formValues.TransitLineName}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   schedule.TransitLineName\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"datetime-local\"\n// // //                     name=\"DepartureDateTime\"\n// // //                     value={formValues.DepartureDateTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"datetime-local\"\n// // //                     name=\"ArrivalDateTime\"\n// // //                     value={formValues.ArrivalDateTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <input\n// // //                     type=\"time\"\n// // //                     name=\"TravelTime\"\n// // //                     value={formValues.TravelTime}\n// // //                     onChange={handleInputChange}\n// // //                   />\n// // //                 ) : (\n// // //                   schedule.TravelTime\n// // //                 )}\n// // //               </td>\n// // //               <td>\n// // //                 {editMode === schedule.ScheduleID ? (\n// // //                   <>\n// // //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// // //                   </>\n// // //                 ) : (\n// // //                   <>\n// // //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// // //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //                   </>\n// // //                 )}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainId: '',\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // //   };\n\n// // //   const addSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // //     } catch (err) {\n// // //       console.error('Error adding schedule:', err);\n// // //       setError('Failed to add new schedule.');\n// // //     }\n// // //   };\n\n// // //   const editSchedule = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       fetchSchedules(); // Refresh the list after editing\n// // //     } catch (err) {\n// // //       console.error('Error editing schedule:', err);\n// // //       setError('Failed to edit schedule.');\n// // //     }\n// // //   };\n\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       fetchSchedules(); // Refresh the list after deleting\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Form to Add New Schedule */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"time\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainId\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainId}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={addSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Schedule Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TransitLineName}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"time\"\n// // //                   value={schedule.TravelTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   value={schedule.ArrivalDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   value={schedule.DepartureDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TrainID}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainId: '',\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // //   };\n\n// // //   const addSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // //     } catch (err) {\n// // //       console.error('Error adding schedule:', err);\n// // //       setError('Failed to add new schedule.');\n// // //     }\n// // //   };\n\n// // //   const editSchedule = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       fetchSchedules(); // Refresh the list after editing\n// // //     } catch (err) {\n// // //       console.error('Error editing schedule:', err);\n// // //       setError('Failed to edit schedule.');\n// // //     }\n// // //   };\n\n// // //   const deleteSchedule = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       fetchSchedules(); // Refresh the list after deleting\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Form to Add New Schedule */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"time\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainId\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainId}\n// // //           onChange={handleInputChange}\n// // //           style={{ marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={addSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Schedule Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TransitLineName}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"time\"\n// // //                   value={schedule.TravelTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.ArrivalDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.DepartureDateTime}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   value={schedule.TrainID}\n// // //                   onChange={(e) =>\n// // //                     setSchedules((prev) =>\n// // //                       prev.map((s) =>\n// // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // //                       )\n// // //                     )\n// // //                   }\n// // //                 />\n// // //               </td>\n// // //               <td>\n// // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime}</td>\n// // //               <td>{schedule.DepartureDateTime}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //               <td>\n// // //                 <button\n// // //                   onClick={() => console.log('Edit schedule')}\n// // //                   style={{ marginRight: '5px' }}\n// // //                 >\n// // //                   Edit\n// // //                 </button>\n// // //                 {schedule.ReservationCount === 0 ? (\n// // //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                 ) : (\n// // //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                 )}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [transitLineName, setTransitLineName] = useState('');\n// // //   const [travelTime, setTravelTime] = useState('');\n// // //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// // //   const [departureDateTime, setDepartureDateTime] = useState('');\n// // //   const [trainID, setTrainID] = useState('');\n// // //   const [success, setSuccess] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule(schedule);\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle adding a new schedule\n// // //   const handleAddSchedule = async (e) => {\n// // //     e.preventDefault();\n// // //     try {\n// // //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// // //         TransitLineName: transitLineName,\n// // //         TravelTime: travelTime,\n// // //         ArrivalDateTime: arrivalDateTime,\n// // //         DepartureDateTime: departureDateTime,\n// // //         TrainID: trainID,\n// // //       });\n\n// // //       setSuccess(response.data.message);\n// // //       setError('');\n// // //       fetchSchedules(); // Refresh the schedule list\n\n// // //       // Clear form fields\n// // //       setTransitLineName('');\n// // //       setTravelTime('');\n// // //       setArrivalDateTime('');\n// // //       setDepartureDateTime('');\n// // //       setTrainID('');\n// // //     } catch (err) {\n// // //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// // //       setSuccess('');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n\n// // //       {/* Add Train Schedule Form */}\n// // //       <div>\n// // //         <h3>Add Train Schedule</h3>\n// // //         <form onSubmit={handleAddSchedule}>\n// // //           <div>\n// // //             <label>Transit Line Name:</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={transitLineName}\n// // //               onChange={(e) => setTransitLineName(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Travel Time (hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={travelTime}\n// // //               onChange={(e) => setTravelTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={arrivalDateTime}\n// // //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={departureDateTime}\n// // //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <div>\n// // //             <label>Train ID:</label>\n// // //             <input\n// // //               type=\"text\"\n// // //               value={trainID}\n// // //               onChange={(e) => setTrainID(e.target.value)}\n// // //               required\n// // //             />\n// // //           </div>\n// // //           <button type=\"submit\">Add Schedule</button>\n// // //         </form>\n// // //         {error && <p className=\"error\">{error}</p>}\n// // //         {success && <p className=\"success\">{success}</p>}\n// // //       </div>\n\n// // //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TravelTime\"\n// // //                       value={editingSchedule.TravelTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"ArrivalDateTime\"\n// // //                       value={editingSchedule.ArrivalDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"DepartureDateTime\"\n// // //                       value={editingSchedule.DepartureDateTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime}</td>\n// // //                   <td>{schedule.DepartureDateTime}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n      \n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n          \n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       if (response.data.trainSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name to filter schedules\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {filteredSchedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setFilteredSchedules(response.data.trainSchedules);\n// // //       if (response.data.trainSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Manage Train Schedules Section */}\n// // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n\n// // //       {/* Search Train Schedules by Station Section */}\n// // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name to filter schedules\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {filteredSchedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // //   const [error, setError] = useState('');\n// // //   const [stationName, setStationName] = useState('');\n// // //   const [originSchedules, setOriginSchedules] = useState([]);\n// // //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Handle edit button click\n// // //   const handleEditClick = (schedule) => {\n// // //     setEditingSchedule({\n// // //       ...schedule,\n// // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // //     });\n// // //   };\n\n// // //   // Handle input change for editable fields\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setEditingSchedule((prev) => {\n// // //       const updatedSchedule = {\n// // //         ...prev,\n// // //         [name]: value,\n// // //       };\n\n// // //       // Automatically calculate travel time if arrival or departure changes\n// // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // //           const arrival = new Date(arrivalDateTime);\n// // //           const departure = new Date(departureDateTime);\n\n// // //           // Calculate the travel time in hours and minutes\n// // //           const diffMs = Math.abs(arrival - departure);\n// // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // //         }\n// // //       }\n\n// // //       return updatedSchedule;\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for updating the schedule\n// // //   const handleSave = async (scheduleId) => {\n// // //     try {\n// // //       const updatedSchedule = {\n// // //         ...editingSchedule,\n// // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // //       };\n// // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // //       setEditingSchedule(null);\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // //     } catch (err) {\n// // //       console.error('Error updating schedule:', err);\n// // //       setError('Failed to update train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Handle cancel button click to cancel editing\n// // //   const handleCancel = () => {\n// // //     setEditingSchedule(null);\n// // //   };\n\n// // //   // Handle delete button click for removing a schedule\n// // //   const handleDelete = async (scheduleId) => {\n// // //     try {\n// // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // //     } catch (err) {\n// // //       console.error('Error deleting schedule:', err);\n// // //       setError('Failed to delete train schedule.');\n// // //     }\n// // //   };\n\n// // //   // Fetch schedules by station name (origin and destination)\n// // //   const fetchSchedulesByStation = async () => {\n// // //     if (!stationName) {\n// // //       setError(\"Please enter a station name.\");\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // //         params: { stationName },\n// // //       });\n// // //       setOriginSchedules(response.data.originSchedules);\n// // //       setDestinationSchedules(response.data.destinationSchedules);\n// // //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// // //         setError(\"No schedules found for this station.\");\n// // //       } else {\n// // //         setError(\"\");\n// // //       }\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules by station:', err);\n// // //       setError('Failed to fetch schedules for the specified station.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Manage Train Schedules Section */}\n// // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TransitLineName\"\n// // //                       value={editingSchedule.TransitLineName}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>{editingSchedule.TravelTime}</td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"ArrivalDate\"\n// // //                       value={editingSchedule.ArrivalDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"ArrivalTime\"\n// // //                       value={editingSchedule.ArrivalTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"date\"\n// // //                       name=\"DepartureDate\"\n// // //                       value={editingSchedule.DepartureDate}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"time\"\n// // //                       name=\"DepartureTime\"\n// // //                       value={editingSchedule.DepartureTime}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <input\n// // //                       type=\"text\"\n// // //                       name=\"TrainID\"\n// // //                       value={editingSchedule.TrainID}\n// // //                       onChange={handleInputChange}\n// // //                     />\n// // //                   </td>\n// // //                   <td>\n// // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // //                   </td>\n// // //                 </>\n// // //               ) : (\n// // //                 <>\n// // //                   <td>{schedule.ScheduleID}</td>\n// // //                   <td>{schedule.TransitLineName}</td>\n// // //                   <td>{schedule.TravelTime}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                   <td>{schedule.TrainID}</td>\n// // //                   <td>\n// // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // //                       Edit\n// // //                     </button>\n// // //                     {schedule.ReservationCount === 0 ? (\n// // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // //                     ) : (\n// // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // //                     )}\n// // //                   </td>\n// // //                 </>\n// // //               )}\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n\n// // //       {/* Search Train Schedules by Station Section */}\n// // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter station name\"\n// // //           value={stationName}\n// // //           onChange={(e) => setStationName(e.target.value)}\n// // //           style={{ padding: '10px', marginRight: '10px' }}\n// // //         />\n// // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // //       </div>\n\n// // //       <h4>Schedules with Station as Origin</h4>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {originSchedules.length > 0 ? (\n// // //             originSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.TravelTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.TrainID}</td>\n// // //               </tr>\n// // //             ))\n// // //           ) : (\n// // //             <tr>\n// // //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// // //             </tr>\n// // //           )}\n// // //         </tbody>\n// // //       </table>\n\n// // //       <h4>Schedules with Station as Destination</h4>\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival Date</th>\n// // //             <th>Arrival Time</th>\n// // //             <th>Departure Date</th>\n// // //             <th>Departure Time</th>\n// // //             <th>Train ID</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {destinationSchedules.length > 0 ? (\n// // //             destinationSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.TravelTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // //                 <td>{schedule.TrainID}</td>\n// // //               </tr>\n// // //             ))\n// // //           ) : (\n// // //             <tr>\n// // //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// // //             </tr>\n// // //           )}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n      \n// //       {/* Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Add Train Schedule</h3>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time (HH:MM)\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainID\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainID}\n// //           onChange={handleInputChange}\n// //         />\n\n// //         <h4>Select Stops</h4>\n// //         {stations.map((station) => (\n// //           <div key={station.StationID}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 value={station.StationID}\n// //                 onChange={handleStopSelection}\n// //               />\n// //               {station.StationName}\n// //             </label>\n// //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //               <div>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Arrival DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                   }\n// //                 />\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Departure DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                   }\n// //                 />\n// //               </div>\n// //             )}\n// //           </div>\n// //         ))}\n\n// //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Train Schedules Table */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival DateTime</th>\n// //             <th>Departure DateTime</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {schedules.map((schedule) => (\n// //             <tr key={schedule.ScheduleID}>\n// //               <td>{schedule.ScheduleID}</td>\n// //               <td>{schedule.TransitLineName}</td>\n// //               <td>{schedule.TravelTime}</td>\n// //               <td>{schedule.ArrivalDateTime}</td>\n// //               <td>{schedule.DepartureDateTime}</td>\n// //               <td>{schedule.TrainID}</td>\n// //               <td>\n// //                 {/* You can implement edit and delete buttons here */}\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n      \n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n          \n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Add Train Schedule</h3>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time (HH:MM)\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainID\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainID}\n//           onChange={handleInputChange}\n//         />\n\n//         <h4>Select Stops</h4>\n//         {stations.map((station) => (\n//           <div key={station.StationID}>\n//             <label>\n//               <input\n//                 type=\"checkbox\"\n//                 value={station.StationID}\n//                 onChange={handleStopSelection}\n//               />\n//               {station.StationName}\n//             </label>\n//             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//               <div>\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Arrival DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                   }\n//                 />\n//                 <input\n//                   type=\"datetime-local\"\n//                   placeholder=\"Departure DateTime\"\n//                   onChange={(e) =>\n//                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                   }\n//                 />\n//               </div>\n//             )}\n//           </div>\n//         ))}\n\n//         <button onClick={handleAddSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter\"\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//       </div>\n\n//       {/* Display Train Schedules */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {searchedSchedules.length > 0\n//             ? searchedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))\n//             : schedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                     <>\n//                       <td>{schedule.ScheduleID}</td>\n//                       <td>\n//                         <input\n//                           type=\"text\"\n//                           name=\"TransitLineName\"\n//                           value={editingSchedule.TransitLineName}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>{editingSchedule.TravelTime}</td>\n//                       <td>\n//                         <input\n//                           type=\"date\"\n//                           name=\"ArrivalDate\"\n//                           value={editingSchedule.ArrivalDate}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"time\"\n//                           name=\"ArrivalTime\"\n//                           value={editingSchedule.ArrivalTime}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"date\"\n//                           name=\"DepartureDate\"\n//                           value={editingSchedule.DepartureDate}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"time\"\n//                           name=\"DepartureTime\"\n//                           value={editingSchedule.DepartureTime}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <input\n//                           type=\"text\"\n//                           name=\"TrainID\"\n//                           value={editingSchedule.TrainID}\n//                           onChange={handleEditInputChange}\n//                         />\n//                       </td>\n//                       <td>\n//                         <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                         <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                       </td>\n//                     </>\n//                   ) : (\n//                     <>\n//                       <td>{schedule.ScheduleID}</td>\n//                       <td>{schedule.TransitLineName}</td>\n//                       <td>{schedule.TravelTime}</td>\n//                       <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                       <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                       <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                       <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                       <td>{schedule.TrainID}</td>\n//                       <td>\n//                         <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                           Edit\n//                         </button>\n//                         {schedule.ReservationCount === 0 ? (\n//                           <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                         ) : (\n//                           <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                         )}\n//                       </td>\n//                     </>\n//                   )}\n//                 </tr>\n//               ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// // export default ManageSchedulesTab;\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n      \n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n          \n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Button to toggle Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//         </button>\n//       </div>\n\n//       {/* Add Train Schedule Form */}\n//       {showAddScheduleForm && (\n//         <div style={{ marginBottom: '20px' }}>\n//           <h3>Add Train Schedule</h3>\n//           <input\n//             type=\"text\"\n//             name=\"transitLineName\"\n//             placeholder=\"Transit Line Name\"\n//             value={newSchedule.transitLineName}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"travelTime\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"arrivalDateTime\"\n//             placeholder=\"Arrival DateTime\"\n//             value={newSchedule.arrivalDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"departureDateTime\"\n//             placeholder=\"Departure DateTime\"\n//             value={newSchedule.departureDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"text\"\n//             name=\"trainID\"\n//             placeholder=\"Train ID\"\n//             value={newSchedule.trainID}\n//             onChange={handleInputChange}\n//           />\n\n//           <h4>Select Stops</h4>\n//           {stations.map((station) => (\n//             <div key={station.StationID}>\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   value={station.StationID}\n//                   onChange={handleStopSelection}\n//                 />\n//                 {station.StationName}\n//               </label>\n//               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//                 <div>\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Arrival DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                     }\n//                   />\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Departure DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                     }\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       {/* Display All Train Schedules */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Current Train Schedules</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {schedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TransitLineName\"\n//                         value={editingSchedule.TransitLineName}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>{editingSchedule.TravelTime}</td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"ArrivalDate\"\n//                         value={editingSchedule.ArrivalDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"ArrivalTime\"\n//                         value={editingSchedule.ArrivalTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"DepartureDate\"\n//                         value={editingSchedule.DepartureDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"DepartureTime\"\n//                         value={editingSchedule.DepartureTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TrainID\"\n//                         value={editingSchedule.TrainID}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                     <td>\n//                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                         Edit\n//                       </button>\n//                       {schedule.ReservationCount === 0 ? (\n//                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                       ) : (\n//                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                       )}\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter\"\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {searchedSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.TravelTime}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.TrainID}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [trains, setTrains] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//     fetchTrains();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Fetch all available trains for TrainID dropdown\n//   const fetchTrains = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/trains');\n//       setTrains(response.data.trains);\n//     } catch (err) {\n//       console.error('Error fetching trains:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\nconst [schedules, setSchedules] = useState([]);\n  const [stations, setStations] = useState([]);\n  const [transitLines, setTransitLines] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDateTime: '',\n    departureDateTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n  const [searchStationName, setSearchStationName] = useState('');\n  const [searchedSchedules, setSearchedSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchSchedules();\n    fetchStations();\n    fetchTransitLines(); // Fetch available transit lines for dropdown\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available stations for stops selection\n  const fetchStations = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setStations(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stations:', err);\n    }\n  };\n\n  // Fetch all available transit lines for selection\n  const fetchTransitLines = async () => {\n    try {\n      const response = await axiosInstance.get('/api/transit-lines');\n      setTransitLines(response.data.transitLines);\n    } catch (err) {\n      console.error('Error fetching transit lines:', err);\n    }\n  };\n\n  // Handle input change for new schedule form\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewSchedule((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle stops selection\n  const handleStopSelection = (e) => {\n    const stationID = parseInt(e.target.value);\n    const isChecked = e.target.checked;\n\n    setNewSchedule((prev) => {\n      const updatedStops = isChecked\n        ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n        : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n      return { ...prev, stops: updatedStops };\n    });\n  };\n\n  // Handle arrival and departure date-time changes for each stop\n  const handleStopDateTimeChange = (stationID, field, value) => {\n    setNewSchedule((prev) => {\n      const updatedStops = prev.stops.map((stop) => {\n        if (stop.stationID === stationID) {\n          return { ...stop, [field]: value };\n        }\n        return stop;\n      });\n      return { ...prev, stops: updatedStops };\n    });\n  };\n\n  // Handle save button click for adding the new schedule\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDateTime: '',\n        departureDateTime: '',\n        trainID: '',\n        stops: []\n      });\n      setShowAddScheduleForm(false);\n      fetchSchedules(); // Re-fetch schedules to reflect the new addition\n      setError('');\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle search for schedules by station name\n  const handleSearchSchedules = async () => {\n    if (!searchStationName) {\n      setError('Please enter a station name to search.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n      setSearchedSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error searching schedules:', err);\n      setError('Failed to search schedules.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = (schedule) => {\n    setEditingSchedule({\n      ...schedule,\n      ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n      ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n      DepartureDate: schedule.DepartureDateTime.split('T')[0],\n      DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n    });\n  };\n\n  // Handle input change for editable fields\n  const handleEditInputChange = (e) => {\n    const { name, value } = e.target;\n    setEditingSchedule((prev) => {\n      const updatedSchedule = {\n        ...prev,\n        [name]: value,\n      };\n      \n      // Automatically calculate travel time if arrival or departure changes\n      if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n        const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n        const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n        if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n          const arrival = new Date(arrivalDateTime);\n          const departure = new Date(departureDateTime);\n          \n          // Calculate the travel time in hours and minutes\n          const diffMs = Math.abs(arrival - departure);\n          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n          const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n          updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n        }\n      }\n\n      return updatedSchedule;\n    });\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async (scheduleId) => {\n    try {\n      const updatedSchedule = {\n        ...editingSchedule,\n        ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n        DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n      };\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async (scheduleId) => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  return (\n    // <div>\n    //   <h2>Manage Train Schedules</h2>\n    //   {error && <p className=\"error\">{error}</p>}\n\n    //   {/* Button to toggle Add Train Schedule Form */}\n    //   <div style={{ marginBottom: '20px' }}>\n    //     <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n    //       {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n    //     </button>\n    //   </div>\n\n    //   {/* Add Train Schedule Form */}\n    //   {showAddScheduleForm && (\n    //     <div style={{ marginBottom: '20px' }}>\n    //       <h3>Add Train Schedule</h3>\n    //       <input\n    //         type=\"text\"\n    //         name=\"transitLineName\"\n    //         placeholder=\"Transit Line Name\"\n    //         value={newSchedule.transitLineName}\n    //         onChange={handleInputChange}\n    //       />\n    //       <input\n    //         type=\"text\"\n    //         name=\"travelTime\"\n    //         placeholder=\"Travel Time (HH:MM)\"\n    //         value={newSchedule.travelTime}\n    //         onChange={handleInputChange}\n    //       />\n    //       <input\n    //         type=\"datetime-local\"\n    //         name=\"arrivalDateTime\"\n    //         placeholder=\"Arrival DateTime\"\n    //         value={newSchedule.arrivalDateTime}\n    //         onChange={handleInputChange}\n    //       />\n    //       <input\n    //         type=\"datetime-local\"\n    //         name=\"departureDateTime\"\n    //         placeholder=\"Departure DateTime\"\n    //         value={newSchedule.departureDateTime}\n    //         onChange={handleInputChange}\n    //       />\n    //       <select\n    //         name=\"trainID\"\n    //         value={newSchedule.trainID}\n    //         onChange={handleInputChange}\n    //       >\n    //         <option value=\"\">Select Train ID</option>\n    //         {trains.map((train) => (\n    //           <option key={train.TrainID} value={train.TrainID}>\n    //             {train.TrainID}\n    //           </option>\n    //         ))}\n    //       </select>\n\n    //       <h4>Select Stops</h4>\n    //       {stations.map((station) => (\n    //         <div key={station.StationID}>\n    //           <label>\n    //             <input\n    //               type=\"checkbox\"\n    //               value={station.StationID}\n    //               onChange={handleStopSelection}\n    //             />\n    //             {station.StationName}\n    //           </label>\n    //           {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n    //             <div>\n    //               <input\n    //                 type=\"datetime-local\"\n    //                 placeholder=\"Arrival DateTime\"\n    //                 onChange={(e) =>\n    //                   handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n    //                 }\n    //               />\n    //               <input\n    //                 type=\"datetime-local\"\n    //                 placeholder=\"Departure DateTime\"\n    //                 onChange={(e) =>\n    //                   handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n    //                 }\n    //               />\n    //             </div>\n    //           )}\n    //         </div>\n    //       ))}\n\n    //       <button onClick={handleAddSchedule}>Add Schedule</button>\n    //     </div>\n    //   )}\n<div>\n      <h2>Manage Train Schedules</h2>\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Button to toggle Add Train Schedule Form */}\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n          {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n        </button>\n      </div>\n\n      {/* Add Train Schedule Form */}\n      {showAddScheduleForm && (\n        <div style={{ marginBottom: '20px' }}>\n          <h3>Add Train Schedule</h3>\n          <select\n            name=\"transitLineName\"\n            value={newSchedule.transitLineName}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">Select Transit Line</option>\n            {transitLines.map((line) => (\n              <option key={line.TransitLineName} value={line.TransitLineName}>\n                {line.TransitLineName}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"text\"\n            name=\"travelTime\"\n            placeholder=\"Travel Time (HH:MM)\"\n            value={newSchedule.travelTime}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"datetime-local\"\n            name=\"arrivalDateTime\"\n            placeholder=\"Arrival DateTime\"\n            value={newSchedule.arrivalDateTime}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"datetime-local\"\n            name=\"departureDateTime\"\n            placeholder=\"Departure DateTime\"\n            value={newSchedule.departureDateTime}\n            onChange={handleInputChange}\n          />\n          <select\n            name=\"trainID\"\n            value={newSchedule.trainID}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">Select Train ID</option>\n            {stations.map((train) => (\n              <option key={train.TrainID} value={train.TrainID}>\n                {train.TrainID}\n              </option>\n            ))}\n          </select>\n\n          <h4>Select Stops</h4>\n          {stations.map((station) => (\n            <div key={station.StationID}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  value={station.StationID}\n                  onChange={handleStopSelection}\n                />\n                {station.StationName}\n              </label>\n              {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n                <div>\n                  <input\n                    type=\"datetime-local\"\n                    placeholder=\"Arrival DateTime\"\n                    onChange={(e) =>\n                      handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n                    }\n                  />\n                  <input\n                    type=\"datetime-local\"\n                    placeholder=\"Departure DateTime\"\n                    onChange={(e) =>\n                      handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n                    }\n                  />\n                </div>\n              )}\n            </div>\n          ))}\n\n          <button onClick={handleAddSchedule}>Add Schedule</button>\n        </div>\n      )}\n      \n      {/* Display All Train Schedules */}\n      <div style={{ marginBottom: '20px' }}>\n        <h3>Current Train Schedules</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>Schedule ID</th>\n              <th>Transit Line Name</th>\n              <th>Travel Time</th>\n              <th>Arrival Date</th>\n              <th>Arrival Time</th>\n              <th>Departure Date</th>\n              <th>Departure Time</th>\n              <th>Train ID</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {schedules.map((schedule) => (\n              <tr key={schedule.ScheduleID}>\n                {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n                  <>\n                    <td>{schedule.ScheduleID}</td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"TransitLineName\"\n                        value={editingSchedule.TransitLineName}\n                        onChange={handleEditInputChange}\n                      />\n                    </td>\n                    <td>{editingSchedule.TravelTime}</td>\n                    <td>\n                      <input\n                        type=\"date\"\n                        name=\"ArrivalDate\"\n                        value={editingSchedule.ArrivalDate}\n                        onChange={handleEditInputChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"time\"\n                        name=\"ArrivalTime\"\n                        value={editingSchedule.ArrivalTime}\n                        onChange={handleEditInputChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"date\"\n                        name=\"DepartureDate\"\n                        value={editingSchedule.DepartureDate}\n                        onChange={handleEditInputChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"time\"\n                        name=\"DepartureTime\"\n                        value={editingSchedule.DepartureTime}\n                        onChange={handleEditInputChange}\n                      />\n                    </td>\n                    <td>\n                      <select\n                        name=\"TrainID\"\n                        value={editingSchedule.TrainID}\n                        onChange={handleEditInputChange}\n                      >\n                        <option value=\"\">Select Train ID</option>\n                        {trains.map((train) => (\n                          <option key={train.TrainID} value={train.TrainID}>\n                            {train.TrainID}\n                          </option>\n                        ))}\n                      </select>\n                    </td>\n                    <td>\n                      <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n                      <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n                    </td>\n                  </>\n                ) : (\n                  <>\n                    <td>{schedule.ScheduleID}</td>\n                    <td>{schedule.TransitLineName}</td>\n                    <td>{schedule.TravelTime}</td>\n                    <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n                    <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n                    <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n                    <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n                    <td>{schedule.TrainID}</td>\n                    <td>\n                      <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n                        Edit\n                      </button>\n                      {schedule.ReservationCount === 0 ? (\n                        <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n                      ) : (\n                        <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n                      )}\n                    </td>\n                  </>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Search Train Schedules by Station */}\n      <div style={{ marginBottom: '20px' }}>\n  <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n  <select\n    value={searchStationName}\n    onChange={(e) => setSearchStationName(e.target.value)}\n  >\n    <option value=\"\">Select Station</option>\n    {stations.map((station) => (\n      <option key={station.StationID} value={station.StationName}>\n        {station.StationName}\n      </option>\n    ))}\n  </select>\n  <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n  {/* Render search results */}\n  <table>\n    <thead>\n      <tr>\n        <th>Schedule ID</th>\n        <th>Transit Line Name</th>\n        <th>Travel Time</th>\n        <th>Arrival Date</th>\n        <th>Arrival Time</th>\n        <th>Departure Date</th>\n        <th>Departure Time</th>\n        <th>Train ID</th>\n      </tr>\n    </thead>\n    <tbody>\n      {searchedSchedules.map((schedule) => (\n        <tr key={schedule.ScheduleID}>\n          <td>{schedule.ScheduleID}</td>\n          <td>{schedule.TransitLineName}</td>\n          <td>{schedule.TravelTime}</td>\n          <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n          <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n          <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n          <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n          <td>{schedule.TrainID}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ManageSchedulesTab;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}