{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/AskQuestionTab.js\",\n  _s = $RefreshSig$();\n// // AskQuestionTab.js\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   // Fetch all previously asked questions by the customer\n//   const fetchQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer/questions');\n//       setSubmittedQuestions(response.data.questions);\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//     }\n//   };\n\n//   // Handle question submission\n//   const handleSubmitQuestion = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     if (!questionText.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.post('/customer/questions', {\n//         customerId, // Include customerId\n//         questionText,\n//       });\n\n//       setSuccess('Your question has been submitted successfully!');\n//       setQuestionText('');\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit the question. Please try again.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <div>\n//         <h4>Your Submitted Questions</h4>\n//         {submittedQuestions.length > 0 ? (\n//           <ul>\n//             {submittedQuestions.map((q) => (\n//               <li key={q.QuestionID}>\n//                 <p><strong>Question:</strong> {q.Question}</p>\n//                 <p><strong>Answer:</strong> {q.Answer ? q.Answer : 'Not answered yet'}</p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No questions submitted yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AskQuestionTab = () => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [submittedQuestions, setSubmittedQuestions] = useState([]);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  // Fetch all previously asked questions by the customer\n  const fetchQuestions = async () => {\n    const customerId = localStorage.getItem('customerId'); // Ensure customer ID exists\n    if (!customerId) {\n      setError('Customer ID not found. Please log in again.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.get('/customer/questions', {\n        params: {\n          customerId\n        } // Pass customerId as query param\n      });\n      setSubmittedQuestions(response.data.questions);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching questions:', err);\n      setError('Failed to fetch questions.');\n    }\n  };\n\n  // Handle question submission\n  const handleSubmitQuestion = async () => {\n    const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n    if (!customerId) {\n      setError('Customer ID not found. Please log in again.');\n      return;\n    }\n    if (!question.trim()) {\n      setError('Question cannot be empty.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.post('/customer/questions', {\n        customerId,\n        // Include customerId\n        questionText: question // Use the correct state variable\n      });\n      setSuccess('Your question has been submitted successfully!');\n      setQuestion(''); // Clear the input field\n      fetchQuestions(); // Re-fetch questions to update the list\n      setError('');\n    } catch (err) {\n      console.error('Error submitting question:', err);\n      setError('Failed to submit the question. Please try again.');\n      setSuccess('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Ask a Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your question\",\n        value: question,\n        onChange: e => setQuestion(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitQuestion,\n        children: \"Submit Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Submitted Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), submittedQuestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: submittedQuestions.map(q => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Question:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 19\n            }, this), \" \", q.Question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 19\n            }, this), ' ', q.Answer ? q.Answer : 'Not answered yet']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this)]\n        }, q.QuestionID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions submitted yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(AskQuestionTab, \"D9Q5M7RYkAVW0s13XPQZm24B5+g=\");\n_c = AskQuestionTab;\nexport default AskQuestionTab;\nvar _c;\n$RefreshReg$(_c, \"AskQuestionTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","AskQuestionTab","_s","question","setQuestion","submittedQuestions","setSubmittedQuestions","error","setError","success","setSuccess","fetchQuestions","customerId","localStorage","getItem","response","get","params","data","questions","err","console","handleSubmitQuestion","trim","post","questionText","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","className","length","map","q","Question","Answer","QuestionID","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/AskQuestionTab.js"],"sourcesContent":["// // AskQuestionTab.js\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   // Fetch all previously asked questions by the customer\n//   const fetchQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer/questions');\n//       setSubmittedQuestions(response.data.questions);\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//     }\n//   };\n\n//   // Handle question submission\n//   const handleSubmitQuestion = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n  \n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n  \n//     if (!questionText.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n  \n//     try {\n//       const response = await axiosInstance.post('/customer/questions', {\n//         customerId, // Include customerId\n//         questionText,\n//       });\n  \n//       setSuccess('Your question has been submitted successfully!');\n//       setQuestionText('');\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit the question. Please try again.');\n//     }\n//   };\n  \n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <div>\n//         <h4>Your Submitted Questions</h4>\n//         {submittedQuestions.length > 0 ? (\n//           <ul>\n//             {submittedQuestions.map((q) => (\n//               <li key={q.QuestionID}>\n//                 <p><strong>Question:</strong> {q.Question}</p>\n//                 <p><strong>Answer:</strong> {q.Answer ? q.Answer : 'Not answered yet'}</p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No questions submitted yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst AskQuestionTab = () => {\n  const [question, setQuestion] = useState('');\n  const [submittedQuestions, setSubmittedQuestions] = useState([]);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  // Fetch all previously asked questions by the customer\n  const fetchQuestions = async () => {\n    const customerId = localStorage.getItem('customerId'); // Ensure customer ID exists\n    if (!customerId) {\n      setError('Customer ID not found. Please log in again.');\n      return;\n    }\n\n    try {\n      const response = await axiosInstance.get('/customer/questions', {\n        params: { customerId }, // Pass customerId as query param\n      });\n      setSubmittedQuestions(response.data.questions);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching questions:', err);\n      setError('Failed to fetch questions.');\n    }\n  };\n\n  // Handle question submission\n  const handleSubmitQuestion = async () => {\n    const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n    if (!customerId) {\n      setError('Customer ID not found. Please log in again.');\n      return;\n    }\n\n    if (!question.trim()) {\n      setError('Question cannot be empty.');\n      return;\n    }\n\n    try {\n      const response = await axiosInstance.post('/customer/questions', {\n        customerId, // Include customerId\n        questionText: question, // Use the correct state variable\n      });\n\n      setSuccess('Your question has been submitted successfully!');\n      setQuestion(''); // Clear the input field\n      fetchQuestions(); // Re-fetch questions to update the list\n      setError('');\n    } catch (err) {\n      console.error('Error submitting question:', err);\n      setError('Failed to submit the question. Please try again.');\n      setSuccess('');\n    }\n  };\n\n  return (\n    <div>\n      <h3>Ask a Question</h3>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your question\"\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n        />\n        <button onClick={handleSubmitQuestion}>Submit Question</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n      {success && <p className=\"success\">{success}</p>}\n\n      <div>\n        <h4>Your Submitted Questions</h4>\n        {submittedQuestions.length > 0 ? (\n          <ul>\n            {submittedQuestions.map((q) => (\n              <li key={q.QuestionID}>\n                <p>\n                  <strong>Question:</strong> {q.Question}\n                </p>\n                <p>\n                  <strong>Answer:</strong>{' '}\n                  {q.Answer ? q.Answer : 'Not answered yet'}\n                </p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No questions submitted yet.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AskQuestionTab;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}