{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ReplyQuestionsTab.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ReplyQuestionsTab = () => {\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchUnansweredQuestions();\n//   }, []);\n\n//   // Fetch unanswered questions\n//   const fetchUnansweredQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/questions');\n//       setQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   // Handle input change for the answer\n//   const handleInputChange = (e) => {\n//     setAnswer(e.target.value);\n//   };\n\n//   // Handle answer submission\n//   const handleAnswerSubmit = async (questionId) => {\n//     if (!answer) {\n//       setError('Answer cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       await axiosInstance.put(`/customer-rep/questions/${questionId}/answer`, { answer });\n//       setAnswer('');\n//       fetchUnansweredQuestions(); // Re-fetch to update the list\n//     } catch (err) {\n//       console.error('Error submitting answer:', err);\n//       setError('Failed to submit answer.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reply to Customer Questions</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Question ID</th>\n//             <th>Customer ID</th>\n//             <th>Question</th>\n//             <th>Answer</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {questions.map((question) => (\n//             <tr key={question.QuestionID}>\n//               <td>{question.QuestionID}</td>\n//               <td>{question.CustomerID}</td>\n//               <td>{question.Question}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={answer}\n//                   onChange={handleInputChange}\n//                   placeholder=\"Type your answer here\"\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => handleAnswerSubmit(question.QuestionID)}>Submit Answer</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ReplyQuestionsTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ReplyQuestionsTab = () => {\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [selectedQuestion, setSelectedQuestion] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchUnansweredQuestions();\n//   }, []);\n\n//   // Fetch all unanswered questions\n//   const fetchUnansweredQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/questions/unanswered');\n//       setQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching unanswered questions:', err);\n//       setError('Failed to fetch unanswered questions.');\n//     }\n//   };\n\n//   // Handle answer change\n//   const handleAnswerChange = (e) => {\n//     setAnswer(e.target.value);\n//   };\n\n//   // Handle answer submission\n//   const handleAnswerSubmit = async (questionId) => {\n//     if (!answer.trim()) {\n//       setError('Answer cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       await axiosInstance.put(`/customer-rep/questions/${questionId}/answer`, { answer });\n//       setAnswer(''); // Clear the answer input\n//       setSelectedQuestion(null); // Clear the selected question\n//       fetchUnansweredQuestions(); // Re-fetch unanswered questions\n//     } catch (err) {\n//       console.error('Error submitting answer:', err);\n//       setError('Failed to submit answer.');\n//     }\n//   };\n\n//   // Handle question selection\n//   const handleSelectQuestion = (question) => {\n//     setSelectedQuestion(question);\n//     setAnswer(''); // Clear any previous answer input\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reply to Customer Questions</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <div style={{ display: 'flex' }}>\n//         <div style={{ flex: 1 }}>\n//           <h3>Unanswered Questions</h3>\n//           <ul>\n//             {questions.map((question) => (\n//               <li key={question.QuestionID} style={{ marginBottom: '10px' }}>\n//                 <p>{question.Question}</p>\n//                 <button onClick={() => handleSelectQuestion(question)}>Answer</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n\n//         {selectedQuestion && (\n//           <div style={{ flex: 1, marginLeft: '20px' }}>\n//             <h3>Answer Question</h3>\n//             <p><strong>Question:</strong> {selectedQuestion.Question}</p>\n//             <textarea\n//               value={answer}\n//               onChange={handleAnswerChange}\n//               placeholder=\"Type your answer here...\"\n//               rows=\"4\"\n//               style={{ width: '100%' }}\n//             />\n//             <button onClick={() => handleAnswerSubmit(selectedQuestion.QuestionID)}>Submit Answer</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReplyQuestionsTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReplyQuestionsTab = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [answer, setAnswer] = useState('');\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchUnansweredQuestions();\n    fetchAllQuestions(); // Fetch all questions with answers included\n  }, []);\n\n  // Fetch all unanswered questions\n  const fetchUnansweredQuestions = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/questions/unanswered');\n      setQuestions(response.data.questions);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching unanswered questions:', err);\n      setError('Failed to fetch unanswered questions.');\n    }\n  };\n\n  // Fetch all questions (answered and unanswered)\n  const fetchAllQuestions = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/faqs');\n      setAllQuestions(response.data.faqs);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching all questions:', err);\n      setError('Failed to fetch all questions.');\n    }\n  };\n\n  // Handle answer change\n  const handleAnswerChange = e => {\n    setAnswer(e.target.value);\n  };\n\n  // Handle answer submission\n  const handleAnswerSubmit = async questionId => {\n    if (!answer.trim()) {\n      setError('Answer cannot be empty.');\n      return;\n    }\n    try {\n      await axiosInstance.put(`/customer-rep/questions/${questionId}/answer`, {\n        answer\n      });\n      setAnswer(''); // Clear the answer input\n      setSelectedQuestion(null); // Clear the selected question\n      fetchUnansweredQuestions(); // Re-fetch unanswered questions\n      fetchAllQuestions(); // Re-fetch all questions to update the answer\n    } catch (err) {\n      console.error('Error submitting answer:', err);\n      setError('Failed to submit answer.');\n    }\n  };\n\n  // Handle question selection\n  const handleSelectQuestion = question => {\n    setSelectedQuestion(question);\n    setAnswer(''); // Clear any previous answer input\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reply to Customer Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        marginBottom: '40px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Unanswered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: questions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              marginBottom: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.Question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSelectQuestion(question),\n              children: \"Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this)]\n          }, question.QuestionID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), selectedQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          marginLeft: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Answer Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Question:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 16\n          }, this), \" \", selectedQuestion.Question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: answer,\n          onChange: handleAnswerChange,\n          placeholder: \"Type your answer here...\",\n          rows: \"4\",\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerSubmit(selectedQuestion.QuestionID),\n          children: \"Submit Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"All Questions and Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: allQuestions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            marginBottom: '15px',\n            padding: '10px',\n            border: '1px solid #ccc',\n            borderRadius: '5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Question:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 18\n            }, this), \" \", question.Question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 18\n            }, this), \" \", question.IsAnswered ? question.Answer : 'Not answered yet']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)]\n        }, question.QuestionID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n_s(ReplyQuestionsTab, \"xGc8KGeFCRb+mfV//iQO8gBcvtk=\");\n_c = ReplyQuestionsTab;\nexport default ReplyQuestionsTab;\nvar _c;\n$RefreshReg$(_c, \"ReplyQuestionsTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","ReplyQuestionsTab","_s","questions","setQuestions","allQuestions","setAllQuestions","answer","setAnswer","selectedQuestion","setSelectedQuestion","error","setError","fetchUnansweredQuestions","fetchAllQuestions","response","get","data","err","console","faqs","handleAnswerChange","e","target","value","handleAnswerSubmit","questionId","trim","put","handleSelectQuestion","question","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","display","marginBottom","flex","map","Question","onClick","QuestionID","marginLeft","onChange","placeholder","rows","width","padding","border","borderRadius","IsAnswered","Answer","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ReplyQuestionsTab.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ReplyQuestionsTab = () => {\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchUnansweredQuestions();\n//   }, []);\n\n//   // Fetch unanswered questions\n//   const fetchUnansweredQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/questions');\n//       setQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   // Handle input change for the answer\n//   const handleInputChange = (e) => {\n//     setAnswer(e.target.value);\n//   };\n\n//   // Handle answer submission\n//   const handleAnswerSubmit = async (questionId) => {\n//     if (!answer) {\n//       setError('Answer cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       await axiosInstance.put(`/customer-rep/questions/${questionId}/answer`, { answer });\n//       setAnswer('');\n//       fetchUnansweredQuestions(); // Re-fetch to update the list\n//     } catch (err) {\n//       console.error('Error submitting answer:', err);\n//       setError('Failed to submit answer.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reply to Customer Questions</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Question ID</th>\n//             <th>Customer ID</th>\n//             <th>Question</th>\n//             <th>Answer</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {questions.map((question) => (\n//             <tr key={question.QuestionID}>\n//               <td>{question.QuestionID}</td>\n//               <td>{question.CustomerID}</td>\n//               <td>{question.Question}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={answer}\n//                   onChange={handleInputChange}\n//                   placeholder=\"Type your answer here\"\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => handleAnswerSubmit(question.QuestionID)}>Submit Answer</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ReplyQuestionsTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ReplyQuestionsTab = () => {\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [selectedQuestion, setSelectedQuestion] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchUnansweredQuestions();\n//   }, []);\n\n//   // Fetch all unanswered questions\n//   const fetchUnansweredQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/questions/unanswered');\n//       setQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching unanswered questions:', err);\n//       setError('Failed to fetch unanswered questions.');\n//     }\n//   };\n\n//   // Handle answer change\n//   const handleAnswerChange = (e) => {\n//     setAnswer(e.target.value);\n//   };\n\n//   // Handle answer submission\n//   const handleAnswerSubmit = async (questionId) => {\n//     if (!answer.trim()) {\n//       setError('Answer cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       await axiosInstance.put(`/customer-rep/questions/${questionId}/answer`, { answer });\n//       setAnswer(''); // Clear the answer input\n//       setSelectedQuestion(null); // Clear the selected question\n//       fetchUnansweredQuestions(); // Re-fetch unanswered questions\n//     } catch (err) {\n//       console.error('Error submitting answer:', err);\n//       setError('Failed to submit answer.');\n//     }\n//   };\n\n//   // Handle question selection\n//   const handleSelectQuestion = (question) => {\n//     setSelectedQuestion(question);\n//     setAnswer(''); // Clear any previous answer input\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reply to Customer Questions</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <div style={{ display: 'flex' }}>\n//         <div style={{ flex: 1 }}>\n//           <h3>Unanswered Questions</h3>\n//           <ul>\n//             {questions.map((question) => (\n//               <li key={question.QuestionID} style={{ marginBottom: '10px' }}>\n//                 <p>{question.Question}</p>\n//                 <button onClick={() => handleSelectQuestion(question)}>Answer</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n\n//         {selectedQuestion && (\n//           <div style={{ flex: 1, marginLeft: '20px' }}>\n//             <h3>Answer Question</h3>\n//             <p><strong>Question:</strong> {selectedQuestion.Question}</p>\n//             <textarea\n//               value={answer}\n//               onChange={handleAnswerChange}\n//               placeholder=\"Type your answer here...\"\n//               rows=\"4\"\n//               style={{ width: '100%' }}\n//             />\n//             <button onClick={() => handleAnswerSubmit(selectedQuestion.QuestionID)}>Submit Answer</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ReplyQuestionsTab;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ReplyQuestionsTab = () => {\n  const [questions, setQuestions] = useState([]);\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [answer, setAnswer] = useState('');\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchUnansweredQuestions();\n    fetchAllQuestions(); // Fetch all questions with answers included\n  }, []);\n\n  // Fetch all unanswered questions\n  const fetchUnansweredQuestions = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/questions/unanswered');\n      setQuestions(response.data.questions);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching unanswered questions:', err);\n      setError('Failed to fetch unanswered questions.');\n    }\n  };\n\n  // Fetch all questions (answered and unanswered)\n  const fetchAllQuestions = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/faqs');\n      setAllQuestions(response.data.faqs);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching all questions:', err);\n      setError('Failed to fetch all questions.');\n    }\n  };\n\n  // Handle answer change\n  const handleAnswerChange = (e) => {\n    setAnswer(e.target.value);\n  };\n\n  // Handle answer submission\n  const handleAnswerSubmit = async (questionId) => {\n    if (!answer.trim()) {\n      setError('Answer cannot be empty.');\n      return;\n    }\n\n    try {\n      await axiosInstance.put(`/customer-rep/questions/${questionId}/answer`, { answer });\n      setAnswer(''); // Clear the answer input\n      setSelectedQuestion(null); // Clear the selected question\n      fetchUnansweredQuestions(); // Re-fetch unanswered questions\n      fetchAllQuestions(); // Re-fetch all questions to update the answer\n    } catch (err) {\n      console.error('Error submitting answer:', err);\n      setError('Failed to submit answer.');\n    }\n  };\n\n  // Handle question selection\n  const handleSelectQuestion = (question) => {\n    setSelectedQuestion(question);\n    setAnswer(''); // Clear any previous answer input\n  };\n\n  return (\n    <div>\n      <h2>Reply to Customer Questions</h2>\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Section for Unanswered Questions */}\n      <div style={{ display: 'flex', marginBottom: '40px' }}>\n        <div style={{ flex: 1 }}>\n          <h3>Unanswered Questions</h3>\n          <ul>\n            {questions.map((question) => (\n              <li key={question.QuestionID} style={{ marginBottom: '10px' }}>\n                <p>{question.Question}</p>\n                <button onClick={() => handleSelectQuestion(question)}>Answer</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        {/* Section for Answering a Selected Question */}\n        {selectedQuestion && (\n          <div style={{ flex: 1, marginLeft: '20px' }}>\n            <h3>Answer Question</h3>\n            <p><strong>Question:</strong> {selectedQuestion.Question}</p>\n            <textarea\n              value={answer}\n              onChange={handleAnswerChange}\n              placeholder=\"Type your answer here...\"\n              rows=\"4\"\n              style={{ width: '100%' }}\n            />\n            <button onClick={() => handleAnswerSubmit(selectedQuestion.QuestionID)}>Submit Answer</button>\n          </div>\n        )}\n      </div>\n\n      {/* Section for All Questions and Answers */}\n      <div>\n        <h3>All Questions and Answers</h3>\n        <ul>\n          {allQuestions.map((question) => (\n            <li key={question.QuestionID} style={{ marginBottom: '15px', padding: '10px', border: '1px solid #ccc', borderRadius: '5px' }}>\n              <p><strong>Question:</strong> {question.Question}</p>\n              <p><strong>Answer:</strong> {question.IsAnswered ? question.Answer : 'Not answered yet'}</p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default ReplyQuestionsTab;\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}