{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js\",\n  _s = $RefreshSig$();\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n// // // //   const [editMode, setEditMode] = useState(null);\n// // // //   const [formValues, setFormValues] = useState({});\n\n// // // //   // Fetch schedules on component mount\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Function to fetch train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/representative/schedules');\n// // // //       setSchedules(response.data.schedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle delete schedule\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit schedule\n// // // //   const editSchedule = (schedule) => {\n// // // //     setEditMode(schedule.ScheduleID);\n// // // //     setFormValues({\n// // // //       TransitLineName: schedule.TransitLineName,\n// // // //       DepartureDateTime: schedule.DepartureDateTime,\n// // // //       ArrivalDateTime: schedule.ArrivalDateTime,\n// // // //       TravelTime: schedule.TravelTime,\n// // // //     });\n// // // //   };\n\n// // // //   // Handle form input changes\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setFormValues({ ...formValues, [name]: value });\n// // // //   };\n\n// // // //   // Handle save edited schedule\n// // // //   const saveSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// // // //       setEditMode(null);\n// // // //       fetchSchedules();\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Render\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"text\"\n// // // //                     name=\"TransitLineName\"\n// // // //                     value={formValues.TransitLineName}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   schedule.TransitLineName\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"datetime-local\"\n// // // //                     name=\"DepartureDateTime\"\n// // // //                     value={formValues.DepartureDateTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"datetime-local\"\n// // // //                     name=\"ArrivalDateTime\"\n// // // //                     value={formValues.ArrivalDateTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"time\"\n// // // //                     name=\"TravelTime\"\n// // // //                     value={formValues.TravelTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   schedule.TravelTime\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <>\n// // // //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// // // //                   </>\n// // // //                 ) : (\n// // // //                   <>\n// // // //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// // // //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //                   </>\n// // // //                 )}\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [newSchedule, setNewSchedule] = useState({\n// // // //     transitLineName: '',\n// // // //     travelTime: '',\n// // // //     arrivalDateTime: '',\n// // // //     departureDateTime: '',\n// // // //     trainId: '',\n// // // //   });\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // // //   };\n\n// // // //   const addSchedule = async () => {\n// // // //     try {\n// // // //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// // // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // // //     } catch (err) {\n// // // //       console.error('Error adding schedule:', err);\n// // // //       setError('Failed to add new schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const editSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       fetchSchedules(); // Refresh the list after editing\n// // // //     } catch (err) {\n// // // //       console.error('Error editing schedule:', err);\n// // // //       setError('Failed to edit schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       fetchSchedules(); // Refresh the list after deleting\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Form to Add New Schedule */}\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"transitLineName\"\n// // // //           placeholder=\"Transit Line Name\"\n// // // //           value={newSchedule.transitLineName}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"time\"\n// // // //           name=\"travelTime\"\n// // // //           placeholder=\"Travel Time\"\n// // // //           value={newSchedule.travelTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"datetime-local\"\n// // // //           name=\"arrivalDateTime\"\n// // // //           placeholder=\"Arrival DateTime\"\n// // // //           value={newSchedule.arrivalDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"datetime-local\"\n// // // //           name=\"departureDateTime\"\n// // // //           placeholder=\"Departure DateTime\"\n// // // //           value={newSchedule.departureDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"trainId\"\n// // // //           placeholder=\"Train ID\"\n// // // //           value={newSchedule.trainId}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={addSchedule}>Add Schedule</button>\n// // // //       </div>\n\n// // // //       {/* Schedule Table */}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TransitLineName}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"time\"\n// // // //                   value={schedule.TravelTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"datetime-local\"\n// // // //                   value={schedule.ArrivalDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"datetime-local\"\n// // // //                   value={schedule.DepartureDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TrainID}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [newSchedule, setNewSchedule] = useState({\n// // // //     transitLineName: '',\n// // // //     travelTime: '',\n// // // //     arrivalDateTime: '',\n// // // //     departureDateTime: '',\n// // // //     trainId: '',\n// // // //   });\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // // //   };\n\n// // // //   const addSchedule = async () => {\n// // // //     try {\n// // // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // // //     } catch (err) {\n// // // //       console.error('Error adding schedule:', err);\n// // // //       setError('Failed to add new schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const editSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       fetchSchedules(); // Refresh the list after editing\n// // // //     } catch (err) {\n// // // //       console.error('Error editing schedule:', err);\n// // // //       setError('Failed to edit schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       fetchSchedules(); // Refresh the list after deleting\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Form to Add New Schedule */}\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"transitLineName\"\n// // // //           placeholder=\"Transit Line Name\"\n// // // //           value={newSchedule.transitLineName}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"time\"\n// // // //           name=\"travelTime\"\n// // // //           placeholder=\"Travel Time\"\n// // // //           value={newSchedule.travelTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"arrivalDateTime\"\n// // // //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // // //           value={newSchedule.arrivalDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"departureDateTime\"\n// // // //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // // //           value={newSchedule.departureDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"trainId\"\n// // // //           placeholder=\"Train ID\"\n// // // //           value={newSchedule.trainId}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={addSchedule}>Add Schedule</button>\n// // // //       </div>\n\n// // // //       {/* Schedule Table */}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TransitLineName}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"time\"\n// // // //                   value={schedule.TravelTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.ArrivalDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.DepartureDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TrainID}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>{schedule.TransitLineName}</td>\n// // // //               <td>{schedule.TravelTime}</td>\n// // // //               <td>{schedule.ArrivalDateTime}</td>\n// // // //               <td>{schedule.DepartureDateTime}</td>\n// // // //               <td>{schedule.TrainID}</td>\n// // // //               <td>\n// // // //                 <button\n// // // //                   onClick={() => console.log('Edit schedule')}\n// // // //                   style={{ marginRight: '5px' }}\n// // // //                 >\n// // // //                   Edit\n// // // //                 </button>\n// // // //                 {schedule.ReservationCount === 0 ? (\n// // // //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                 ) : (\n// // // //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                 )}\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [transitLineName, setTransitLineName] = useState('');\n// // // //   const [travelTime, setTravelTime] = useState('');\n// // // //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// // // //   const [departureDateTime, setDepartureDateTime] = useState('');\n// // // //   const [trainID, setTrainID] = useState('');\n// // // //   const [success, setSuccess] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle adding a new schedule\n// // // //   const handleAddSchedule = async (e) => {\n// // // //     e.preventDefault();\n// // // //     try {\n// // // //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// // // //         TransitLineName: transitLineName,\n// // // //         TravelTime: travelTime,\n// // // //         ArrivalDateTime: arrivalDateTime,\n// // // //         DepartureDateTime: departureDateTime,\n// // // //         TrainID: trainID,\n// // // //       });\n\n// // // //       setSuccess(response.data.message);\n// // // //       setError('');\n// // // //       fetchSchedules(); // Refresh the schedule list\n\n// // // //       // Clear form fields\n// // // //       setTransitLineName('');\n// // // //       setTravelTime('');\n// // // //       setArrivalDateTime('');\n// // // //       setDepartureDateTime('');\n// // // //       setTrainID('');\n// // // //     } catch (err) {\n// // // //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// // // //       setSuccess('');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n\n// // // //       {/* Add Train Schedule Form */}\n// // // //       <div>\n// // // //         <h3>Add Train Schedule</h3>\n// // // //         <form onSubmit={handleAddSchedule}>\n// // // //           <div>\n// // // //             <label>Transit Line Name:</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={transitLineName}\n// // // //               onChange={(e) => setTransitLineName(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Travel Time (hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={travelTime}\n// // // //               onChange={(e) => setTravelTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={arrivalDateTime}\n// // // //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={departureDateTime}\n// // // //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Train ID:</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={trainID}\n// // // //               onChange={(e) => setTrainID(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <button type=\"submit\">Add Schedule</button>\n// // // //         </form>\n// // // //         {error && <p className=\"error\">{error}</p>}\n// // // //         {success && <p className=\"success\">{success}</p>}\n// // // //       </div>\n\n// // // //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       if (response.data.trainSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name to filter schedules\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {filteredSchedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       if (response.data.trainSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Manage Train Schedules Section */}\n// // // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       {/* Search Train Schedules by Station Section */}\n// // // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name to filter schedules\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {filteredSchedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>{schedule.TransitLineName}</td>\n// // // //               <td>{schedule.TravelTime}</td>\n// // // //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //               <td>{schedule.TrainID}</td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [originSchedules, setOriginSchedules] = useState([]);\n// // // //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name (origin and destination)\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setOriginSchedules(response.data.originSchedules);\n// // // //       setDestinationSchedules(response.data.destinationSchedules);\n// // // //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Manage Train Schedules Section */}\n// // // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       {/* Search Train Schedules by Station Section */}\n// // // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <h4>Schedules with Station as Origin</h4>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {originSchedules.length > 0 ? (\n// // // //             originSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.TravelTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.TrainID}</td>\n// // // //               </tr>\n// // // //             ))\n// // // //           ) : (\n// // // //             <tr>\n// // // //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// // // //             </tr>\n// // // //           )}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       <h4>Schedules with Station as Destination</h4>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {destinationSchedules.length > 0 ? (\n// // // //             destinationSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.TravelTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.TrainID}</td>\n// // // //               </tr>\n// // // //             ))\n// // // //           ) : (\n// // // //             <tr>\n// // // //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// // // //             </tr>\n// // // //           )}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [stations, setStations] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainID: '',\n// // //     stops: []\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //     fetchStations();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Fetch all available stations for stops selection\n// // //   const fetchStations = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/stations');\n// // //       setStations(response.data.stations);\n// // //     } catch (err) {\n// // //       console.error('Error fetching stations:', err);\n// // //     }\n// // //   };\n\n// // //   // Handle input change for new schedule form\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle stops selection\n// // //   const handleStopSelection = (e) => {\n// // //     const stationID = parseInt(e.target.value);\n// // //     const isChecked = e.target.checked;\n\n// // //     setNewSchedule((prev) => {\n// // //       const updatedStops = isChecked\n// // //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// // //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// // //       return { ...prev, stops: updatedStops };\n// // //     });\n// // //   };\n\n// // //   // Handle arrival and departure date-time changes for each stop\n// // //   const handleStopDateTimeChange = (stationID, field, value) => {\n// // //     setNewSchedule((prev) => {\n// // //       const updatedStops = prev.stops.map((stop) => {\n// // //         if (stop.stationID === stationID) {\n// // //           return { ...stop, [field]: value };\n// // //         }\n// // //         return stop;\n// // //       });\n// // //       return { ...prev, stops: updatedStops };\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for adding the new schedule\n// // //   const handleAddSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // //       setNewSchedule({\n// // //         transitLineName: '',\n// // //         travelTime: '',\n// // //         arrivalDateTime: '',\n// // //         departureDateTime: '',\n// // //         trainID: '',\n// // //         stops: []\n// // //       });\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error adding train schedule:', err);\n// // //       setError('Failed to add train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Add Train Schedule Form */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <h3>Add Train Schedule</h3>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time (HH:MM)\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainID\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainID}\n// // //           onChange={handleInputChange}\n// // //         />\n\n// // //         <h4>Select Stops</h4>\n// // //         {stations.map((station) => (\n// // //           <div key={station.StationID}>\n// // //             <label>\n// // //               <input\n// // //                 type=\"checkbox\"\n// // //                 value={station.StationID}\n// // //                 onChange={handleStopSelection}\n// // //               />\n// // //               {station.StationName}\n// // //             </label>\n// // //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// // //               <div>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   placeholder=\"Arrival DateTime\"\n// // //                   onChange={(e) =>\n// // //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// // //                   }\n// // //                 />\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   placeholder=\"Departure DateTime\"\n// // //                   onChange={(e) =>\n// // //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// // //                   }\n// // //                 />\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         ))}\n\n// // //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Train Schedules Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime}</td>\n// // //               <td>{schedule.DepartureDateTime}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //               <td>\n// // //                 {/* You can implement edit and delete buttons here */}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleEditInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Add Train Schedule</h3>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time (HH:MM)\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainID\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainID}\n// //           onChange={handleInputChange}\n// //         />\n\n// //         <h4>Select Stops</h4>\n// //         {stations.map((station) => (\n// //           <div key={station.StationID}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 value={station.StationID}\n// //                 onChange={handleStopSelection}\n// //               />\n// //               {station.StationName}\n// //             </label>\n// //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //               <div>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Arrival DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                   }\n// //                 />\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Departure DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                   }\n// //                 />\n// //               </div>\n// //             )}\n// //           </div>\n// //         ))}\n\n// //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Search Train Schedules by Station */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter\"\n// //           value={searchStationName}\n// //           onChange={(e) => setSearchStationName(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n// //       </div>\n\n// //       {/* Display Train Schedules */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {searchedSchedules.length > 0\n// //             ? searchedSchedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </tr>\n// //               ))\n// //             : schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                     <>\n// //                       <td>{schedule.ScheduleID}</td>\n// //                       <td>\n// //                         <input\n// //                           type=\"text\"\n// //                           name=\"TransitLineName\"\n// //                           value={editingSchedule.TransitLineName}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>{editingSchedule.TravelTime}</td>\n// //                       <td>\n// //                         <input\n// //                           type=\"date\"\n// //                           name=\"ArrivalDate\"\n// //                           value={editingSchedule.ArrivalDate}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"time\"\n// //                           name=\"ArrivalTime\"\n// //                           value={editingSchedule.ArrivalTime}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"date\"\n// //                           name=\"DepartureDate\"\n// //                           value={editingSchedule.DepartureDate}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"time\"\n// //                           name=\"DepartureTime\"\n// //                           value={editingSchedule.DepartureTime}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"text\"\n// //                           name=\"TrainID\"\n// //                           value={editingSchedule.TrainID}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                         <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                       </td>\n// //                     </>\n// //                   ) : (\n// //                     <>\n// //                       <td>{schedule.ScheduleID}</td>\n// //                       <td>{schedule.TransitLineName}</td>\n// //                       <td>{schedule.TravelTime}</td>\n// //                       <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                       <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                       <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                       <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                       <td>{schedule.TrainID}</td>\n// //                       <td>\n// //                         <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                           Edit\n// //                         </button>\n// //                         {schedule.ReservationCount === 0 ? (\n// //                           <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                         ) : (\n// //                           <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                         )}\n// //                       </td>\n// //                     </>\n// //                   )}\n// //                 </tr>\n// //               ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // // export default ManageSchedulesTab;\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       setShowAddScheduleForm(false);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleEditInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Button to toggle Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n// //           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n// //         </button>\n// //       </div>\n\n// //       {/* Add Train Schedule Form */}\n// //       {showAddScheduleForm && (\n// //         <div style={{ marginBottom: '20px' }}>\n// //           <h3>Add Train Schedule</h3>\n// //           <input\n// //             type=\"text\"\n// //             name=\"transitLineName\"\n// //             placeholder=\"Transit Line Name\"\n// //             value={newSchedule.transitLineName}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             name=\"travelTime\"\n// //             placeholder=\"Travel Time (HH:MM)\"\n// //             value={newSchedule.travelTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"datetime-local\"\n// //             name=\"arrivalDateTime\"\n// //             placeholder=\"Arrival DateTime\"\n// //             value={newSchedule.arrivalDateTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"datetime-local\"\n// //             name=\"departureDateTime\"\n// //             placeholder=\"Departure DateTime\"\n// //             value={newSchedule.departureDateTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             name=\"trainID\"\n// //             placeholder=\"Train ID\"\n// //             value={newSchedule.trainID}\n// //             onChange={handleInputChange}\n// //           />\n\n// //           <h4>Select Stops</h4>\n// //           {stations.map((station) => (\n// //             <div key={station.StationID}>\n// //               <label>\n// //                 <input\n// //                   type=\"checkbox\"\n// //                   value={station.StationID}\n// //                   onChange={handleStopSelection}\n// //                 />\n// //                 {station.StationName}\n// //               </label>\n// //               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //                 <div>\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     placeholder=\"Arrival DateTime\"\n// //                     onChange={(e) =>\n// //                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                     }\n// //                   />\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     placeholder=\"Departure DateTime\"\n// //                     onChange={(e) =>\n// //                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                     }\n// //                   />\n// //                 </div>\n// //               )}\n// //             </div>\n// //           ))}\n\n// //           <button onClick={handleAddSchedule}>Add Schedule</button>\n// //         </div>\n// //       )}\n\n// //       {/* Display All Train Schedules */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Current Train Schedules</h3>\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Travel Time</th>\n// //               <th>Arrival Date</th>\n// //               <th>Arrival Time</th>\n// //               <th>Departure Date</th>\n// //               <th>Departure Time</th>\n// //               <th>Train ID</th>\n// //               <th>Actions</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {schedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                   <>\n// //                     <td>{schedule.ScheduleID}</td>\n// //                     <td>\n// //                       <input\n// //                         type=\"text\"\n// //                         name=\"TransitLineName\"\n// //                         value={editingSchedule.TransitLineName}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>{editingSchedule.TravelTime}</td>\n// //                     <td>\n// //                       <input\n// //                         type=\"date\"\n// //                         name=\"ArrivalDate\"\n// //                         value={editingSchedule.ArrivalDate}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"time\"\n// //                         name=\"ArrivalTime\"\n// //                         value={editingSchedule.ArrivalTime}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"date\"\n// //                         name=\"DepartureDate\"\n// //                         value={editingSchedule.DepartureDate}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"time\"\n// //                         name=\"DepartureTime\"\n// //                         value={editingSchedule.DepartureTime}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"text\"\n// //                         name=\"TrainID\"\n// //                         value={editingSchedule.TrainID}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                     </td>\n// //                   </>\n// //                 ) : (\n// //                   <>\n// //                     <td>{schedule.ScheduleID}</td>\n// //                     <td>{schedule.TransitLineName}</td>\n// //                     <td>{schedule.TravelTime}</td>\n// //                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                     <td>{schedule.TrainID}</td>\n// //                     <td>\n// //                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                         Edit\n// //                       </button>\n// //                       {schedule.ReservationCount === 0 ? (\n// //                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                       ) : (\n// //                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                       )}\n// //                     </td>\n// //                   </>\n// //                 )}\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n\n// //       {/* Search Train Schedules by Station */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter\"\n// //           value={searchStationName}\n// //           onChange={(e) => setSearchStationName(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Travel Time</th>\n// //               <th>Arrival Date</th>\n// //               <th>Arrival Time</th>\n// //               <th>Departure Date</th>\n// //               <th>Departure Time</th>\n// //               <th>Train ID</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {searchedSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.TravelTime}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.TrainID}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [showAddForm, setShowAddForm] = useState(false);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDate: '',\n//     arrivalTime: '',\n//     departureDate: '',\n//     departureTime: '',\n//     trainID: '',\n//     stops: [],\n//   });\n//   const [availableTrains, setAvailableTrains] = useState([]);\n//   const [availableStops, setAvailableStops] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchTrains();\n//     fetchStops();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available trains for dropdown\n//   const fetchTrains = async () => {\n//     try {\n//       const response = await axiosInstance.get('/trains');\n//       setAvailableTrains(response.data.trains);\n//     } catch (err) {\n//       console.error('Error fetching trains:', err);\n//       setError('Failed to fetch available trains.');\n//     }\n//   };\n\n//   // Fetch all available stops for selection\n//   const fetchStops = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setAvailableStops(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stops:', err);\n//       setError('Failed to fetch available stops.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Handle Add Train Schedule button click\n//   const handleAddScheduleClick = () => {\n//     setShowAddForm(!showAddForm);\n//   };\n\n//   // Handle adding a new train schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       const newScheduleData = {\n//         ...newSchedule,\n//         ArrivalDateTime: `${newSchedule.arrivalDate}T${newSchedule.arrivalTime}:00`,\n//         DepartureDateTime: `${newSchedule.departureDate}T${newSchedule.departureTime}:00`,\n//       };\n//       await axiosInstance.post('/customer-rep/train-schedules', newScheduleData);\n//       setShowAddForm(false);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDate: '',\n//         arrivalTime: '',\n//         departureDate: '',\n//         departureTime: '',\n//         trainID: '',\n//         stops: [],\n//       });\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle checkbox change for stops selection\n//   const handleStopChange = (stationID) => {\n//     setNewSchedule((prev) => {\n//       if (prev.stops.includes(stationID)) {\n//         return {\n//           ...prev,\n//           stops: prev.stops.filter((stop) => stop !== stationID),\n//         };\n//       } else {\n//         return {\n//           ...prev,\n//           stops: [...prev.stops, stationID],\n//         };\n//       }\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <button onClick={handleAddScheduleClick}>Add Train Schedule</button>\n\n//       {showAddForm && (\n//         <div>\n//           <h3>Add Train Schedule</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Transit Line Name\"\n//             value={newSchedule.transitLineName}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, transitLineName: e.target.value })}\n//           />\n//           <input\n//             type=\"time\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, travelTime: e.target.value })}\n//           />\n//           <input\n//             type=\"date\"\n//             value={newSchedule.arrivalDate}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, arrivalDate: e.target.value })}\n//           />\n//           <input\n//             type=\"time\"\n//             value={newSchedule.arrivalTime}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, arrivalTime: e.target.value })}\n//           />\n//           <input\n//             type=\"date\"\n//             value={newSchedule.departureDate}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, departureDate: e.target.value })}\n//           />\n//           <input\n//             type=\"time\"\n//             value={newSchedule.departureTime}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, departureTime: e.target.value })}\n//           />\n//           <select\n//             value={newSchedule.trainID}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, trainID: e.target.value })}\n//           >\n//             <option value=\"\">Select Train ID</option>\n//             {availableTrains.map((train) => (\n//               <option key={train.TrainID} value={train.TrainID}>\n//                 {train.TrainID}\n//               </option>\n//             ))}\n//           </select>\n\n//           <h4>Select Stops</h4>\n//           {availableStops.map((stop) => (\n//             <div key={stop.StationID}>\n//               <input\n//                 type=\"checkbox\"\n//                 checked={newSchedule.stops.includes(stop.StationID)}\n//                 onChange={() => handleStopChange(stop.StationID)}\n//               />\n//               {stop.StationName}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//       <input type=\"text\" placeholder=\"Enter station name to filter...\" />\n\n//       <h3>Current Train Schedules</h3>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ManageSchedulesTab = () => {\n  _s();\n  const [schedules, setSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [trains, setTrains] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    TransitLineName: '',\n    TravelTime: '',\n    ArrivalDateTime: '',\n    DepartureDateTime: '',\n    TrainID: '',\n    Stops: []\n  });\n  const [addScheduleVisible, setAddScheduleVisible] = useState(false);\n  const [stationName, setStationName] = useState('');\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchSchedules();\n    fetchTrains();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all trains for the TrainID dropdown\n  const fetchTrains = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/trains');\n      setTrains(response.data.trains);\n    } catch (err) {\n      console.error('Error fetching trains:', err);\n      setError('Failed to fetch train data.');\n    }\n  };\n\n  // Handle input change for new schedule fields\n  const handleNewScheduleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewSchedule(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle add schedule button click\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setAddScheduleVisible(false);\n      fetchSchedules();\n      setNewSchedule({\n        TransitLineName: '',\n        TravelTime: '',\n        ArrivalDateTime: '',\n        DepartureDateTime: '',\n        TrainID: '',\n        Stops: []\n      });\n    } catch (err) {\n      console.error('Error adding schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle checkbox change for Stops selection\n  const handleStopSelection = stationId => {\n    setNewSchedule(prev => {\n      const updatedStops = prev.Stops.includes(stationId) ? prev.Stops.filter(id => id !== stationId) : [...prev.Stops, stationId];\n      return {\n        ...prev,\n        Stops: updatedStops\n      };\n    });\n  };\n\n  // Handle edit button click\n  const handleEditClick = schedule => {\n    setEditingSchedule(schedule);\n  };\n\n  // Handle input change for editable fields\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditingSchedule(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async scheduleId => {\n    try {\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async scheduleId => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter(schedule => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  // Search schedules by station\n  const searchSchedulesByStation = async () => {\n    try {\n      const response = await axiosInstance.get(`/customer-rep/train-schedules/search?stationName=${stationName}`);\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error searching schedules:', err);\n      setError('Failed to search schedules.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3858,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3859,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setAddScheduleVisible(prev => !prev),\n      children: addScheduleVisible ? \"Hide Add Train Schedule\" : \"Add Train Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3862,\n      columnNumber: 7\n    }, this), addScheduleVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Train Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3868,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"TransitLineName\",\n        placeholder: \"Transit Line Name\",\n        value: newSchedule.TransitLineName,\n        onChange: handleNewScheduleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3869,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        name: \"TravelTime\",\n        value: newSchedule.TravelTime,\n        onChange: handleNewScheduleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3876,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        name: \"ArrivalDateTime\",\n        value: newSchedule.ArrivalDateTime,\n        onChange: handleNewScheduleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3882,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        name: \"DepartureDateTime\",\n        value: newSchedule.DepartureDateTime,\n        onChange: handleNewScheduleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3888,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"TrainID\",\n        value: newSchedule.TrainID,\n        onChange: handleNewScheduleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Train ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3899,\n          columnNumber: 13\n        }, this), trains.map(train => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: train.TrainID,\n          children: train.TrainID\n        }, train.TrainID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3901,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3894,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Select Stops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3907,\n          columnNumber: 13\n        }, this), trains.map(station => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: newSchedule.Stops.includes(station.StationID),\n              onChange: () => handleStopSelection(station.StationID)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3911,\n              columnNumber: 19\n            }, this), station.StationName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3910,\n            columnNumber: 17\n          }, this)\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3909,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3906,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSchedule,\n        children: \"Add Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3921,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3867,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '40px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Current Train Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3927,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Schedule ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3931,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transit Line Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3932,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Travel Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3933,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival DateTime\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3934,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure DateTime\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3935,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Train ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3936,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3937,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3930,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3929,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: schedules.map(schedule => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3945,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"TransitLineName\",\n                  value: editingSchedule.TransitLineName,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3947,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3946,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  name: \"TravelTime\",\n                  value: editingSchedule.TravelTime,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3955,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3954,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"datetime-local\",\n                  name: \"ArrivalDateTime\",\n                  value: editingSchedule.ArrivalDateTime,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3963,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3962,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"datetime-local\",\n                  name: \"DepartureDateTime\",\n                  value: editingSchedule.DepartureDateTime,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3971,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3970,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"TrainID\",\n                  value: editingSchedule.TrainID,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3979,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3978,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSave(schedule.ScheduleID),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3987,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleCancel,\n                  style: {\n                    marginLeft: '5px'\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3988,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3986,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3993,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TransitLineName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3994,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TravelTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3995,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ArrivalDateTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3996,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.DepartureDateTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3997,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TrainID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3998,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEditClick(schedule),\n                  style: {\n                    marginRight: '5px'\n                  },\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4000,\n                  columnNumber: 23\n                }, this), schedule.ReservationCount === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDelete(schedule.ScheduleID),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4004,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: true,\n                  title: \"Cannot delete. Reservations exist.\",\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4006,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3999,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, schedule.ScheduleID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3942,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3940,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3928,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3926,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '40px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Search Train Schedules by Station (Origin or Destination)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4019,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter station name to filter\",\n        value: stationName,\n        onChange: e => setStationName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4020,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: searchSchedulesByStation,\n        children: \"Search Schedules by Station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4026,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 4018,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3857,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageSchedulesTab, \"wThn7q7LKxJSK2k8CpAuvhecY3Q=\");\n_c = ManageSchedulesTab;\nexport default ManageSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"ManageSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","Fragment","_Fragment","ManageSchedulesTab","_s","schedules","setSchedules","editingSchedule","setEditingSchedule","trains","setTrains","newSchedule","setNewSchedule","TransitLineName","TravelTime","ArrivalDateTime","DepartureDateTime","TrainID","Stops","addScheduleVisible","setAddScheduleVisible","stationName","setStationName","error","setError","fetchSchedules","fetchTrains","response","get","data","trainSchedules","err","console","handleNewScheduleChange","e","name","value","target","prev","handleAddSchedule","post","handleStopSelection","stationId","updatedStops","includes","filter","id","handleEditClick","schedule","handleInputChange","handleSave","scheduleId","put","handleCancel","handleDelete","delete","ScheduleID","searchSchedulesByStation","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","style","marginTop","type","placeholder","onChange","map","train","station","checked","StationID","StationName","marginLeft","marginRight","ReservationCount","disabled","title","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js"],"sourcesContent":["// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n// // // //   const [editMode, setEditMode] = useState(null);\n// // // //   const [formValues, setFormValues] = useState({});\n\n// // // //   // Fetch schedules on component mount\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Function to fetch train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/representative/schedules');\n// // // //       setSchedules(response.data.schedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle delete schedule\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit schedule\n// // // //   const editSchedule = (schedule) => {\n// // // //     setEditMode(schedule.ScheduleID);\n// // // //     setFormValues({\n// // // //       TransitLineName: schedule.TransitLineName,\n// // // //       DepartureDateTime: schedule.DepartureDateTime,\n// // // //       ArrivalDateTime: schedule.ArrivalDateTime,\n// // // //       TravelTime: schedule.TravelTime,\n// // // //     });\n// // // //   };\n\n// // // //   // Handle form input changes\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setFormValues({ ...formValues, [name]: value });\n// // // //   };\n\n// // // //   // Handle save edited schedule\n// // // //   const saveSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// // // //       setEditMode(null);\n// // // //       fetchSchedules();\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Render\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"text\"\n// // // //                     name=\"TransitLineName\"\n// // // //                     value={formValues.TransitLineName}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   schedule.TransitLineName\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"datetime-local\"\n// // // //                     name=\"DepartureDateTime\"\n// // // //                     value={formValues.DepartureDateTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"datetime-local\"\n// // // //                     name=\"ArrivalDateTime\"\n// // // //                     value={formValues.ArrivalDateTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"time\"\n// // // //                     name=\"TravelTime\"\n// // // //                     value={formValues.TravelTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   schedule.TravelTime\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <>\n// // // //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// // // //                   </>\n// // // //                 ) : (\n// // // //                   <>\n// // // //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// // // //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //                   </>\n// // // //                 )}\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [newSchedule, setNewSchedule] = useState({\n// // // //     transitLineName: '',\n// // // //     travelTime: '',\n// // // //     arrivalDateTime: '',\n// // // //     departureDateTime: '',\n// // // //     trainId: '',\n// // // //   });\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // // //   };\n\n// // // //   const addSchedule = async () => {\n// // // //     try {\n// // // //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// // // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // // //     } catch (err) {\n// // // //       console.error('Error adding schedule:', err);\n// // // //       setError('Failed to add new schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const editSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       fetchSchedules(); // Refresh the list after editing\n// // // //     } catch (err) {\n// // // //       console.error('Error editing schedule:', err);\n// // // //       setError('Failed to edit schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       fetchSchedules(); // Refresh the list after deleting\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Form to Add New Schedule */}\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"transitLineName\"\n// // // //           placeholder=\"Transit Line Name\"\n// // // //           value={newSchedule.transitLineName}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"time\"\n// // // //           name=\"travelTime\"\n// // // //           placeholder=\"Travel Time\"\n// // // //           value={newSchedule.travelTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"datetime-local\"\n// // // //           name=\"arrivalDateTime\"\n// // // //           placeholder=\"Arrival DateTime\"\n// // // //           value={newSchedule.arrivalDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"datetime-local\"\n// // // //           name=\"departureDateTime\"\n// // // //           placeholder=\"Departure DateTime\"\n// // // //           value={newSchedule.departureDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"trainId\"\n// // // //           placeholder=\"Train ID\"\n// // // //           value={newSchedule.trainId}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={addSchedule}>Add Schedule</button>\n// // // //       </div>\n\n// // // //       {/* Schedule Table */}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TransitLineName}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"time\"\n// // // //                   value={schedule.TravelTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"datetime-local\"\n// // // //                   value={schedule.ArrivalDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"datetime-local\"\n// // // //                   value={schedule.DepartureDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TrainID}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [newSchedule, setNewSchedule] = useState({\n// // // //     transitLineName: '',\n// // // //     travelTime: '',\n// // // //     arrivalDateTime: '',\n// // // //     departureDateTime: '',\n// // // //     trainId: '',\n// // // //   });\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // // //   };\n\n// // // //   const addSchedule = async () => {\n// // // //     try {\n// // // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // // //     } catch (err) {\n// // // //       console.error('Error adding schedule:', err);\n// // // //       setError('Failed to add new schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const editSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       fetchSchedules(); // Refresh the list after editing\n// // // //     } catch (err) {\n// // // //       console.error('Error editing schedule:', err);\n// // // //       setError('Failed to edit schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       fetchSchedules(); // Refresh the list after deleting\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Form to Add New Schedule */}\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"transitLineName\"\n// // // //           placeholder=\"Transit Line Name\"\n// // // //           value={newSchedule.transitLineName}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"time\"\n// // // //           name=\"travelTime\"\n// // // //           placeholder=\"Travel Time\"\n// // // //           value={newSchedule.travelTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"arrivalDateTime\"\n// // // //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // // //           value={newSchedule.arrivalDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"departureDateTime\"\n// // // //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // // //           value={newSchedule.departureDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"trainId\"\n// // // //           placeholder=\"Train ID\"\n// // // //           value={newSchedule.trainId}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={addSchedule}>Add Schedule</button>\n// // // //       </div>\n\n// // // //       {/* Schedule Table */}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TransitLineName}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"time\"\n// // // //                   value={schedule.TravelTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.ArrivalDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.DepartureDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TrainID}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>{schedule.TransitLineName}</td>\n// // // //               <td>{schedule.TravelTime}</td>\n// // // //               <td>{schedule.ArrivalDateTime}</td>\n// // // //               <td>{schedule.DepartureDateTime}</td>\n// // // //               <td>{schedule.TrainID}</td>\n// // // //               <td>\n// // // //                 <button\n// // // //                   onClick={() => console.log('Edit schedule')}\n// // // //                   style={{ marginRight: '5px' }}\n// // // //                 >\n// // // //                   Edit\n// // // //                 </button>\n// // // //                 {schedule.ReservationCount === 0 ? (\n// // // //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                 ) : (\n// // // //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                 )}\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [transitLineName, setTransitLineName] = useState('');\n// // // //   const [travelTime, setTravelTime] = useState('');\n// // // //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// // // //   const [departureDateTime, setDepartureDateTime] = useState('');\n// // // //   const [trainID, setTrainID] = useState('');\n// // // //   const [success, setSuccess] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle adding a new schedule\n// // // //   const handleAddSchedule = async (e) => {\n// // // //     e.preventDefault();\n// // // //     try {\n// // // //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// // // //         TransitLineName: transitLineName,\n// // // //         TravelTime: travelTime,\n// // // //         ArrivalDateTime: arrivalDateTime,\n// // // //         DepartureDateTime: departureDateTime,\n// // // //         TrainID: trainID,\n// // // //       });\n\n// // // //       setSuccess(response.data.message);\n// // // //       setError('');\n// // // //       fetchSchedules(); // Refresh the schedule list\n\n// // // //       // Clear form fields\n// // // //       setTransitLineName('');\n// // // //       setTravelTime('');\n// // // //       setArrivalDateTime('');\n// // // //       setDepartureDateTime('');\n// // // //       setTrainID('');\n// // // //     } catch (err) {\n// // // //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// // // //       setSuccess('');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n\n// // // //       {/* Add Train Schedule Form */}\n// // // //       <div>\n// // // //         <h3>Add Train Schedule</h3>\n// // // //         <form onSubmit={handleAddSchedule}>\n// // // //           <div>\n// // // //             <label>Transit Line Name:</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={transitLineName}\n// // // //               onChange={(e) => setTransitLineName(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Travel Time (hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={travelTime}\n// // // //               onChange={(e) => setTravelTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={arrivalDateTime}\n// // // //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={departureDateTime}\n// // // //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Train ID:</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={trainID}\n// // // //               onChange={(e) => setTrainID(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <button type=\"submit\">Add Schedule</button>\n// // // //         </form>\n// // // //         {error && <p className=\"error\">{error}</p>}\n// // // //         {success && <p className=\"success\">{success}</p>}\n// // // //       </div>\n\n// // // //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n      \n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n          \n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       if (response.data.trainSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name to filter schedules\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {filteredSchedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       if (response.data.trainSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Manage Train Schedules Section */}\n// // // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       {/* Search Train Schedules by Station Section */}\n// // // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name to filter schedules\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {filteredSchedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>{schedule.TransitLineName}</td>\n// // // //               <td>{schedule.TravelTime}</td>\n// // // //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //               <td>{schedule.TrainID}</td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [originSchedules, setOriginSchedules] = useState([]);\n// // // //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name (origin and destination)\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setOriginSchedules(response.data.originSchedules);\n// // // //       setDestinationSchedules(response.data.destinationSchedules);\n// // // //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Manage Train Schedules Section */}\n// // // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       {/* Search Train Schedules by Station Section */}\n// // // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <h4>Schedules with Station as Origin</h4>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {originSchedules.length > 0 ? (\n// // // //             originSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.TravelTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.TrainID}</td>\n// // // //               </tr>\n// // // //             ))\n// // // //           ) : (\n// // // //             <tr>\n// // // //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// // // //             </tr>\n// // // //           )}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       <h4>Schedules with Station as Destination</h4>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {destinationSchedules.length > 0 ? (\n// // // //             destinationSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.TravelTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.TrainID}</td>\n// // // //               </tr>\n// // // //             ))\n// // // //           ) : (\n// // // //             <tr>\n// // // //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// // // //             </tr>\n// // // //           )}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [stations, setStations] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainID: '',\n// // //     stops: []\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //     fetchStations();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Fetch all available stations for stops selection\n// // //   const fetchStations = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/stations');\n// // //       setStations(response.data.stations);\n// // //     } catch (err) {\n// // //       console.error('Error fetching stations:', err);\n// // //     }\n// // //   };\n\n// // //   // Handle input change for new schedule form\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle stops selection\n// // //   const handleStopSelection = (e) => {\n// // //     const stationID = parseInt(e.target.value);\n// // //     const isChecked = e.target.checked;\n\n// // //     setNewSchedule((prev) => {\n// // //       const updatedStops = isChecked\n// // //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// // //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// // //       return { ...prev, stops: updatedStops };\n// // //     });\n// // //   };\n\n// // //   // Handle arrival and departure date-time changes for each stop\n// // //   const handleStopDateTimeChange = (stationID, field, value) => {\n// // //     setNewSchedule((prev) => {\n// // //       const updatedStops = prev.stops.map((stop) => {\n// // //         if (stop.stationID === stationID) {\n// // //           return { ...stop, [field]: value };\n// // //         }\n// // //         return stop;\n// // //       });\n// // //       return { ...prev, stops: updatedStops };\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for adding the new schedule\n// // //   const handleAddSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // //       setNewSchedule({\n// // //         transitLineName: '',\n// // //         travelTime: '',\n// // //         arrivalDateTime: '',\n// // //         departureDateTime: '',\n// // //         trainID: '',\n// // //         stops: []\n// // //       });\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error adding train schedule:', err);\n// // //       setError('Failed to add train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n      \n// // //       {/* Add Train Schedule Form */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <h3>Add Train Schedule</h3>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time (HH:MM)\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainID\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainID}\n// // //           onChange={handleInputChange}\n// // //         />\n\n// // //         <h4>Select Stops</h4>\n// // //         {stations.map((station) => (\n// // //           <div key={station.StationID}>\n// // //             <label>\n// // //               <input\n// // //                 type=\"checkbox\"\n// // //                 value={station.StationID}\n// // //                 onChange={handleStopSelection}\n// // //               />\n// // //               {station.StationName}\n// // //             </label>\n// // //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// // //               <div>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   placeholder=\"Arrival DateTime\"\n// // //                   onChange={(e) =>\n// // //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// // //                   }\n// // //                 />\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   placeholder=\"Departure DateTime\"\n// // //                   onChange={(e) =>\n// // //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// // //                   }\n// // //                 />\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         ))}\n\n// // //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Train Schedules Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime}</td>\n// // //               <td>{schedule.DepartureDateTime}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //               <td>\n// // //                 {/* You can implement edit and delete buttons here */}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleEditInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n      \n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n          \n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Add Train Schedule</h3>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time (HH:MM)\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainID\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainID}\n// //           onChange={handleInputChange}\n// //         />\n\n// //         <h4>Select Stops</h4>\n// //         {stations.map((station) => (\n// //           <div key={station.StationID}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 value={station.StationID}\n// //                 onChange={handleStopSelection}\n// //               />\n// //               {station.StationName}\n// //             </label>\n// //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //               <div>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Arrival DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                   }\n// //                 />\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Departure DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                   }\n// //                 />\n// //               </div>\n// //             )}\n// //           </div>\n// //         ))}\n\n// //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Search Train Schedules by Station */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter\"\n// //           value={searchStationName}\n// //           onChange={(e) => setSearchStationName(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n// //       </div>\n\n// //       {/* Display Train Schedules */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {searchedSchedules.length > 0\n// //             ? searchedSchedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </tr>\n// //               ))\n// //             : schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                     <>\n// //                       <td>{schedule.ScheduleID}</td>\n// //                       <td>\n// //                         <input\n// //                           type=\"text\"\n// //                           name=\"TransitLineName\"\n// //                           value={editingSchedule.TransitLineName}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>{editingSchedule.TravelTime}</td>\n// //                       <td>\n// //                         <input\n// //                           type=\"date\"\n// //                           name=\"ArrivalDate\"\n// //                           value={editingSchedule.ArrivalDate}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"time\"\n// //                           name=\"ArrivalTime\"\n// //                           value={editingSchedule.ArrivalTime}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"date\"\n// //                           name=\"DepartureDate\"\n// //                           value={editingSchedule.DepartureDate}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"time\"\n// //                           name=\"DepartureTime\"\n// //                           value={editingSchedule.DepartureTime}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"text\"\n// //                           name=\"TrainID\"\n// //                           value={editingSchedule.TrainID}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                         <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                       </td>\n// //                     </>\n// //                   ) : (\n// //                     <>\n// //                       <td>{schedule.ScheduleID}</td>\n// //                       <td>{schedule.TransitLineName}</td>\n// //                       <td>{schedule.TravelTime}</td>\n// //                       <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                       <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                       <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                       <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                       <td>{schedule.TrainID}</td>\n// //                       <td>\n// //                         <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                           Edit\n// //                         </button>\n// //                         {schedule.ReservationCount === 0 ? (\n// //                           <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                         ) : (\n// //                           <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                         )}\n// //                       </td>\n// //                     </>\n// //                   )}\n// //                 </tr>\n// //               ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // // export default ManageSchedulesTab;\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       setShowAddScheduleForm(false);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleEditInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n      \n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n          \n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Button to toggle Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n// //           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n// //         </button>\n// //       </div>\n\n// //       {/* Add Train Schedule Form */}\n// //       {showAddScheduleForm && (\n// //         <div style={{ marginBottom: '20px' }}>\n// //           <h3>Add Train Schedule</h3>\n// //           <input\n// //             type=\"text\"\n// //             name=\"transitLineName\"\n// //             placeholder=\"Transit Line Name\"\n// //             value={newSchedule.transitLineName}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             name=\"travelTime\"\n// //             placeholder=\"Travel Time (HH:MM)\"\n// //             value={newSchedule.travelTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"datetime-local\"\n// //             name=\"arrivalDateTime\"\n// //             placeholder=\"Arrival DateTime\"\n// //             value={newSchedule.arrivalDateTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"datetime-local\"\n// //             name=\"departureDateTime\"\n// //             placeholder=\"Departure DateTime\"\n// //             value={newSchedule.departureDateTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             name=\"trainID\"\n// //             placeholder=\"Train ID\"\n// //             value={newSchedule.trainID}\n// //             onChange={handleInputChange}\n// //           />\n\n// //           <h4>Select Stops</h4>\n// //           {stations.map((station) => (\n// //             <div key={station.StationID}>\n// //               <label>\n// //                 <input\n// //                   type=\"checkbox\"\n// //                   value={station.StationID}\n// //                   onChange={handleStopSelection}\n// //                 />\n// //                 {station.StationName}\n// //               </label>\n// //               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //                 <div>\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     placeholder=\"Arrival DateTime\"\n// //                     onChange={(e) =>\n// //                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                     }\n// //                   />\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     placeholder=\"Departure DateTime\"\n// //                     onChange={(e) =>\n// //                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                     }\n// //                   />\n// //                 </div>\n// //               )}\n// //             </div>\n// //           ))}\n\n// //           <button onClick={handleAddSchedule}>Add Schedule</button>\n// //         </div>\n// //       )}\n\n// //       {/* Display All Train Schedules */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Current Train Schedules</h3>\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Travel Time</th>\n// //               <th>Arrival Date</th>\n// //               <th>Arrival Time</th>\n// //               <th>Departure Date</th>\n// //               <th>Departure Time</th>\n// //               <th>Train ID</th>\n// //               <th>Actions</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {schedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                   <>\n// //                     <td>{schedule.ScheduleID}</td>\n// //                     <td>\n// //                       <input\n// //                         type=\"text\"\n// //                         name=\"TransitLineName\"\n// //                         value={editingSchedule.TransitLineName}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>{editingSchedule.TravelTime}</td>\n// //                     <td>\n// //                       <input\n// //                         type=\"date\"\n// //                         name=\"ArrivalDate\"\n// //                         value={editingSchedule.ArrivalDate}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"time\"\n// //                         name=\"ArrivalTime\"\n// //                         value={editingSchedule.ArrivalTime}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"date\"\n// //                         name=\"DepartureDate\"\n// //                         value={editingSchedule.DepartureDate}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"time\"\n// //                         name=\"DepartureTime\"\n// //                         value={editingSchedule.DepartureTime}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"text\"\n// //                         name=\"TrainID\"\n// //                         value={editingSchedule.TrainID}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                     </td>\n// //                   </>\n// //                 ) : (\n// //                   <>\n// //                     <td>{schedule.ScheduleID}</td>\n// //                     <td>{schedule.TransitLineName}</td>\n// //                     <td>{schedule.TravelTime}</td>\n// //                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                     <td>{schedule.TrainID}</td>\n// //                     <td>\n// //                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                         Edit\n// //                       </button>\n// //                       {schedule.ReservationCount === 0 ? (\n// //                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                       ) : (\n// //                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                       )}\n// //                     </td>\n// //                   </>\n// //                 )}\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n\n// //       {/* Search Train Schedules by Station */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter\"\n// //           value={searchStationName}\n// //           onChange={(e) => setSearchStationName(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Travel Time</th>\n// //               <th>Arrival Date</th>\n// //               <th>Arrival Time</th>\n// //               <th>Departure Date</th>\n// //               <th>Departure Time</th>\n// //               <th>Train ID</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {searchedSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.TravelTime}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.TrainID}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [showAddForm, setShowAddForm] = useState(false);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDate: '',\n//     arrivalTime: '',\n//     departureDate: '',\n//     departureTime: '',\n//     trainID: '',\n//     stops: [],\n//   });\n//   const [availableTrains, setAvailableTrains] = useState([]);\n//   const [availableStops, setAvailableStops] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchTrains();\n//     fetchStops();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available trains for dropdown\n//   const fetchTrains = async () => {\n//     try {\n//       const response = await axiosInstance.get('/trains');\n//       setAvailableTrains(response.data.trains);\n//     } catch (err) {\n//       console.error('Error fetching trains:', err);\n//       setError('Failed to fetch available trains.');\n//     }\n//   };\n\n//   // Fetch all available stops for selection\n//   const fetchStops = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setAvailableStops(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stops:', err);\n//       setError('Failed to fetch available stops.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Handle Add Train Schedule button click\n//   const handleAddScheduleClick = () => {\n//     setShowAddForm(!showAddForm);\n//   };\n\n//   // Handle adding a new train schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       const newScheduleData = {\n//         ...newSchedule,\n//         ArrivalDateTime: `${newSchedule.arrivalDate}T${newSchedule.arrivalTime}:00`,\n//         DepartureDateTime: `${newSchedule.departureDate}T${newSchedule.departureTime}:00`,\n//       };\n//       await axiosInstance.post('/customer-rep/train-schedules', newScheduleData);\n//       setShowAddForm(false);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDate: '',\n//         arrivalTime: '',\n//         departureDate: '',\n//         departureTime: '',\n//         trainID: '',\n//         stops: [],\n//       });\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle checkbox change for stops selection\n//   const handleStopChange = (stationID) => {\n//     setNewSchedule((prev) => {\n//       if (prev.stops.includes(stationID)) {\n//         return {\n//           ...prev,\n//           stops: prev.stops.filter((stop) => stop !== stationID),\n//         };\n//       } else {\n//         return {\n//           ...prev,\n//           stops: [...prev.stops, stationID],\n//         };\n//       }\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <button onClick={handleAddScheduleClick}>Add Train Schedule</button>\n\n//       {showAddForm && (\n//         <div>\n//           <h3>Add Train Schedule</h3>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Transit Line Name\"\n//             value={newSchedule.transitLineName}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, transitLineName: e.target.value })}\n//           />\n//           <input\n//             type=\"time\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, travelTime: e.target.value })}\n//           />\n//           <input\n//             type=\"date\"\n//             value={newSchedule.arrivalDate}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, arrivalDate: e.target.value })}\n//           />\n//           <input\n//             type=\"time\"\n//             value={newSchedule.arrivalTime}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, arrivalTime: e.target.value })}\n//           />\n//           <input\n//             type=\"date\"\n//             value={newSchedule.departureDate}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, departureDate: e.target.value })}\n//           />\n//           <input\n//             type=\"time\"\n//             value={newSchedule.departureTime}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, departureTime: e.target.value })}\n//           />\n//           <select\n//             value={newSchedule.trainID}\n//             onChange={(e) => setNewSchedule({ ...newSchedule, trainID: e.target.value })}\n//           >\n//             <option value=\"\">Select Train ID</option>\n//             {availableTrains.map((train) => (\n//               <option key={train.TrainID} value={train.TrainID}>\n//                 {train.TrainID}\n//               </option>\n//             ))}\n//           </select>\n\n//           <h4>Select Stops</h4>\n//           {availableStops.map((stop) => (\n//             <div key={stop.StationID}>\n//               <input\n//                 type=\"checkbox\"\n//                 checked={newSchedule.stops.includes(stop.StationID)}\n//                 onChange={() => handleStopChange(stop.StationID)}\n//               />\n//               {stop.StationName}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//       <input type=\"text\" placeholder=\"Enter station name to filter...\" />\n\n//       <h3>Current Train Schedules</h3>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ManageSchedulesTab = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [trains, setTrains] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    TransitLineName: '',\n    TravelTime: '',\n    ArrivalDateTime: '',\n    DepartureDateTime: '',\n    TrainID: '',\n    Stops: []\n  });\n  const [addScheduleVisible, setAddScheduleVisible] = useState(false);\n  const [stationName, setStationName] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchSchedules();\n    fetchTrains();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all trains for the TrainID dropdown\n  const fetchTrains = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/trains');\n      setTrains(response.data.trains);\n    } catch (err) {\n      console.error('Error fetching trains:', err);\n      setError('Failed to fetch train data.');\n    }\n  };\n\n  // Handle input change for new schedule fields\n  const handleNewScheduleChange = (e) => {\n    const { name, value } = e.target;\n    setNewSchedule((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle add schedule button click\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setAddScheduleVisible(false);\n      fetchSchedules();\n      setNewSchedule({\n        TransitLineName: '',\n        TravelTime: '',\n        ArrivalDateTime: '',\n        DepartureDateTime: '',\n        TrainID: '',\n        Stops: []\n      });\n    } catch (err) {\n      console.error('Error adding schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle checkbox change for Stops selection\n  const handleStopSelection = (stationId) => {\n    setNewSchedule((prev) => {\n      const updatedStops = prev.Stops.includes(stationId)\n        ? prev.Stops.filter((id) => id !== stationId)\n        : [...prev.Stops, stationId];\n      return {\n        ...prev,\n        Stops: updatedStops\n      };\n    });\n  };\n\n  // Handle edit button click\n  const handleEditClick = (schedule) => {\n    setEditingSchedule(schedule);\n  };\n\n  // Handle input change for editable fields\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setEditingSchedule((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async (scheduleId) => {\n    try {\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async (scheduleId) => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  // Search schedules by station\n  const searchSchedulesByStation = async () => {\n    try {\n      const response = await axiosInstance.get(`/customer-rep/train-schedules/search?stationName=${stationName}`);\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error searching schedules:', err);\n      setError('Failed to search schedules.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Manage Train Schedules</h2>\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Add Train Schedule Section */}\n      <button onClick={() => setAddScheduleVisible((prev) => !prev)}>\n        {addScheduleVisible ? \"Hide Add Train Schedule\" : \"Add Train Schedule\"}\n      </button>\n\n      {addScheduleVisible && (\n        <div style={{ marginTop: '20px' }}>\n          <h3>Add Train Schedule</h3>\n          <input\n            type=\"text\"\n            name=\"TransitLineName\"\n            placeholder=\"Transit Line Name\"\n            value={newSchedule.TransitLineName}\n            onChange={handleNewScheduleChange}\n          />\n          <input\n            type=\"time\"\n            name=\"TravelTime\"\n            value={newSchedule.TravelTime}\n            onChange={handleNewScheduleChange}\n          />\n          <input\n            type=\"datetime-local\"\n            name=\"ArrivalDateTime\"\n            value={newSchedule.ArrivalDateTime}\n            onChange={handleNewScheduleChange}\n          />\n          <input\n            type=\"datetime-local\"\n            name=\"DepartureDateTime\"\n            value={newSchedule.DepartureDateTime}\n            onChange={handleNewScheduleChange}\n          />\n          <select\n            name=\"TrainID\"\n            value={newSchedule.TrainID}\n            onChange={handleNewScheduleChange}\n          >\n            <option value=\"\">Select Train ID</option>\n            {trains.map((train) => (\n              <option key={train.TrainID} value={train.TrainID}>\n                {train.TrainID}\n              </option>\n            ))}\n          </select>\n          <div>\n            <h4>Select Stops</h4>\n            {trains.map((station) => (\n              <div key={station.StationID}>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={newSchedule.Stops.includes(station.StationID)}\n                    onChange={() => handleStopSelection(station.StationID)}\n                  />\n                  {station.StationName}\n                </label>\n              </div>\n            ))}\n          </div>\n          <button onClick={handleAddSchedule}>Add Schedule</button>\n        </div>\n      )}\n\n      {/* Train Schedules Table */}\n      <div style={{ marginTop: '40px' }}>\n        <h3>Current Train Schedules</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>Schedule ID</th>\n              <th>Transit Line Name</th>\n              <th>Travel Time</th>\n              <th>Arrival DateTime</th>\n              <th>Departure DateTime</th>\n              <th>Train ID</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {schedules.map((schedule) => (\n              <tr key={schedule.ScheduleID}>\n                {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n                  <>\n                    <td>{schedule.ScheduleID}</td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"TransitLineName\"\n                        value={editingSchedule.TransitLineName}\n                        onChange={handleInputChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"time\"\n                        name=\"TravelTime\"\n                        value={editingSchedule.TravelTime}\n                        onChange={handleInputChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"datetime-local\"\n                        name=\"ArrivalDateTime\"\n                        value={editingSchedule.ArrivalDateTime}\n                        onChange={handleInputChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"datetime-local\"\n                        name=\"DepartureDateTime\"\n                        value={editingSchedule.DepartureDateTime}\n                        onChange={handleInputChange}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"TrainID\"\n                        value={editingSchedule.TrainID}\n                        onChange={handleInputChange}\n                      />\n                    </td>\n                    <td>\n                      <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n                      <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n                    </td>\n                  </>\n                ) : (\n                  <>\n                    <td>{schedule.ScheduleID}</td>\n                    <td>{schedule.TransitLineName}</td>\n                    <td>{schedule.TravelTime}</td>\n                    <td>{schedule.ArrivalDateTime}</td>\n                    <td>{schedule.DepartureDateTime}</td>\n                    <td>{schedule.TrainID}</td>\n                    <td>\n                      <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n                        Edit\n                      </button>\n                      {schedule.ReservationCount === 0 ? (\n                        <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n                      ) : (\n                        <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n                      )}\n                    </td>\n                  </>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Search Train Schedules by Station */}\n      <div style={{ marginTop: '40px' }}>\n        <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n        <input\n          type=\"text\"\n          placeholder=\"Enter station name to filter\"\n          value={stationName}\n          onChange={(e) => setStationName(e.target.value)}\n        />\n        <button onClick={searchSchedulesByStation}>Search Schedules by Station</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ManageSchedulesTab;\n"],"mappingslD,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC;IAC7CiB,eAAe,EAAE,EAAE;IACnBC,UAAU,EAAE,EAAE;IACdC,eAAe,EAAE,EAAE;IACnBC,iBAAiB,EAAE,EAAE;IACrBC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC2B,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd4B,cAAc,CAAC,CAAC;IAChBC,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMD,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAME,QAAQ,GAAG,MAAM7B,aAAa,CAAC8B,GAAG,CAAC,+BAA+B,CAAC;MACzEtB,YAAY,CAACqB,QAAQ,CAACE,IAAI,CAACC,cAAc,CAAC;MAC1CN,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,2BAA2B,EAAEQ,GAAG,CAAC;MAC/CP,QAAQ,CAAC,4BAA4B,CAAC;IACxC;EACF,CAAC;;EAED;EACA,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM7B,aAAa,CAAC8B,GAAG,CAAC,sBAAsB,CAAC;MAChElB,SAAS,CAACiB,QAAQ,CAACE,IAAI,CAACpB,MAAM,CAAC;IACjC,CAAC,CAAC,OAAOsB,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,wBAAwB,EAAEQ,GAAG,CAAC;MAC5CP,QAAQ,CAAC,6BAA6B,CAAC;IACzC;EACF,CAAC;;EAED;EACA,MAAMS,uBAAuB,GAAIC,CAAC,IAAK;IACrC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCzB,cAAc,CAAE0B,IAAI,KAAM;MACxB,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMG,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMzC,aAAa,CAAC0C,IAAI,CAAC,+BAA+B,EAAE7B,WAAW,CAAC;MACtES,qBAAqB,CAAC,KAAK,CAAC;MAC5BK,cAAc,CAAC,CAAC;MAChBb,cAAc,CAAC;QACbC,eAAe,EAAE,EAAE;QACnBC,UAAU,EAAE,EAAE;QACdC,eAAe,EAAE,EAAE;QACnBC,iBAAiB,EAAE,EAAE;QACrBC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOa,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,wBAAwB,EAAEQ,GAAG,CAAC;MAC5CP,QAAQ,CAAC,+BAA+B,CAAC;IAC3C;EACF,CAAC;;EAED;EACA,MAAMiB,mBAAmB,GAAIC,SAAS,IAAK;IACzC9B,cAAc,CAAE0B,IAAI,IAAK;MACvB,MAAMK,YAAY,GAAGL,IAAI,CAACpB,KAAK,CAAC0B,QAAQ,CAACF,SAAS,CAAC,GAC/CJ,IAAI,CAACpB,KAAK,CAAC2B,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKJ,SAAS,CAAC,GAC3C,CAAC,GAAGJ,IAAI,CAACpB,KAAK,EAAEwB,SAAS,CAAC;MAC9B,OAAO;QACL,GAAGJ,IAAI;QACPpB,KAAK,EAAEyB;MACT,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMI,eAAe,GAAIC,QAAQ,IAAK;IACpCxC,kBAAkB,CAACwC,QAAQ,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAIf,CAAC,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChC7B,kBAAkB,CAAE8B,IAAI,KAAM;MAC5B,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMc,UAAU,GAAG,MAAOC,UAAU,IAAK;IACvC,IAAI;MACF,MAAMrD,aAAa,CAACsD,GAAG,CAAC,iCAAiCD,UAAU,EAAE,EAAE5C,eAAe,CAAC;MACvFC,kBAAkB,CAAC,IAAI,CAAC;MACxBiB,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,0BAA0B,EAAEQ,GAAG,CAAC;MAC9CP,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAM6B,YAAY,GAAGA,CAAA,KAAM;IACzB7C,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;;EAED;EACA,MAAM8C,YAAY,GAAG,MAAOH,UAAU,IAAK;IACzC,IAAI;MACF,MAAMrD,aAAa,CAACyD,MAAM,CAAC,iCAAiCJ,UAAU,EAAE,CAAC;MACzE7C,YAAY,CAACD,SAAS,CAACwC,MAAM,CAAEG,QAAQ,IAAKA,QAAQ,CAACQ,UAAU,KAAKL,UAAU,CAAC,CAAC;IAClF,CAAC,CAAC,OAAOpB,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,0BAA0B,EAAEQ,GAAG,CAAC;MAC9CP,QAAQ,CAAC,kCAAkC,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAMiC,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,IAAI;MACF,MAAM9B,QAAQ,GAAG,MAAM7B,aAAa,CAAC8B,GAAG,CAAC,oDAAoDP,WAAW,EAAE,CAAC;MAC3Gf,YAAY,CAACqB,QAAQ,CAACE,IAAI,CAACC,cAAc,CAAC;MAC1CN,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,4BAA4B,EAAEQ,GAAG,CAAC;MAChDP,QAAQ,CAAC,6BAA6B,CAAC;IACzC;EACF,CAAC;EAED,oBACExB,OAAA;IAAA0D,QAAA,gBACE1D,OAAA;MAAA0D,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9BvC,KAAK,iBAAIvB,OAAA;MAAG+D,SAAS,EAAC,OAAO;MAAAL,QAAA,EAAEnC;IAAK;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAG1C9D,OAAA;MAAQgE,OAAO,EAAEA,CAAA,KAAM5C,qBAAqB,CAAEkB,IAAI,IAAK,CAACA,IAAI,CAAE;MAAAoB,QAAA,EAC3DvC,kBAAkB,GAAG,yBAAyB,GAAG;IAAoB;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,EAER3C,kBAAkB,iBACjBnB,OAAA;MAAKiE,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAR,QAAA,gBAChC1D,OAAA;QAAA0D,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3B9D,OAAA;QACEmE,IAAI,EAAC,MAAM;QACXhC,IAAI,EAAC,iBAAiB;QACtBiC,WAAW,EAAC,mBAAmB;QAC/BhC,KAAK,EAAEzB,WAAW,CAACE,eAAgB;QACnCwD,QAAQ,EAAEpC;MAAwB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACF9D,OAAA;QACEmE,IAAI,EAAC,MAAM;QACXhC,IAAI,EAAC,YAAY;QACjBC,KAAK,EAAEzB,WAAW,CAACG,UAAW;QAC9BuD,QAAQ,EAAEpC;MAAwB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACF9D,OAAA;QACEmE,IAAI,EAAC,gBAAgB;QACrBhC,IAAI,EAAC,iBAAiB;QACtBC,KAAK,EAAEzB,WAAW,CAACI,eAAgB;QACnCsD,QAAQ,EAAEpC;MAAwB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACF9D,OAAA;QACEmE,IAAI,EAAC,gBAAgB;QACrBhC,IAAI,EAAC,mBAAmB;QACxBC,KAAK,EAAEzB,WAAW,CAACK,iBAAkB;QACrCqD,QAAQ,EAAEpC;MAAwB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACF9D,OAAA;QACEmC,IAAI,EAAC,SAAS;QACdC,KAAK,EAAEzB,WAAW,CAACM,OAAQ;QAC3BoD,QAAQ,EAAEpC,uBAAwB;QAAAyB,QAAA,gBAElC1D,OAAA;UAAQoC,KAAK,EAAC,EAAE;UAAAsB,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACxCrD,MAAM,CAAC6D,GAAG,CAAEC,KAAK,iBAChBvE,OAAA;UAA4BoC,KAAK,EAAEmC,KAAK,CAACtD,OAAQ;UAAAyC,QAAA,EAC9Ca,KAAK,CAACtD;QAAO,GADHsD,KAAK,CAACtD,OAAO;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAElB,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACT9D,OAAA;QAAA0D,QAAA,gBACE1D,OAAA;UAAA0D,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACpBrD,MAAM,CAAC6D,GAAG,CAAEE,OAAO,iBAClBxE,OAAA;UAAA0D,QAAA,eACE1D,OAAA;YAAA0D,QAAA,gBACE1D,OAAA;cACEmE,IAAI,EAAC,UAAU;cACfM,OAAO,EAAE9D,WAAW,CAACO,KAAK,CAAC0B,QAAQ,CAAC4B,OAAO,CAACE,SAAS,CAAE;cACvDL,QAAQ,EAAEA,CAAA,KAAM5B,mBAAmB,CAAC+B,OAAO,CAACE,SAAS;YAAE;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxD,CAAC,EACDU,OAAO,CAACG,WAAW;UAAA;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf;QAAC,GARAU,OAAO,CAACE,SAAS;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAStB,CACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN9D,OAAA;QAAQgE,OAAO,EAAEzB,iBAAkB;QAAAmB,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CACN,eAGD9D,OAAA;MAAKiE,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAR,QAAA,gBAChC1D,OAAA;QAAA0D,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChC9D,OAAA;QAAA0D,QAAA,gBACE1D,OAAA;UAAA0D,QAAA,eACE1D,OAAA;YAAA0D,QAAA,gBACE1D,OAAA;cAAA0D,QAAA,EAAI;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpB9D,OAAA;cAAA0D,QAAA,EAAI;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC1B9D,OAAA;cAAA0D,QAAA,EAAI;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpB9D,OAAA;cAAA0D,QAAA,EAAI;YAAgB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzB9D,OAAA;cAAA0D,QAAA,EAAI;YAAkB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC3B9D,OAAA;cAAA0D,QAAA,EAAI;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjB9D,OAAA;cAAA0D,QAAA,EAAI;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACR9D,OAAA;UAAA0D,QAAA,EACGrD,SAAS,CAACiE,GAAG,CAAEtB,QAAQ,iBACtBhD,OAAA;YAAA0D,QAAA,EACGnD,eAAe,IAAIA,eAAe,CAACiD,UAAU,KAAKR,QAAQ,CAACQ,UAAU,gBACpExD,OAAA,CAAAE,SAAA;cAAAwD,QAAA,gBACE1D,OAAA;gBAAA0D,QAAA,EAAKV,QAAQ,CAACQ;cAAU;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9B9D,OAAA;gBAAA0D,QAAA,eACE1D,OAAA;kBACEmE,IAAI,EAAC,MAAM;kBACXhC,IAAI,EAAC,iBAAiB;kBACtBC,KAAK,EAAE7B,eAAe,CAACM,eAAgB;kBACvCwD,QAAQ,EAAEpB;gBAAkB;kBAAAU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACL9D,OAAA;gBAAA0D,QAAA,eACE1D,OAAA;kBACEmE,IAAI,EAAC,MAAM;kBACXhC,IAAI,EAAC,YAAY;kBACjBC,KAAK,EAAE7B,eAAe,CAACO,UAAW;kBAClCuD,QAAQ,EAAEpB;gBAAkB;kBAAAU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACL9D,OAAA;gBAAA0D,QAAA,eACE1D,OAAA;kBACEmE,IAAI,EAAC,gBAAgB;kBACrBhC,IAAI,EAAC,iBAAiB;kBACtBC,KAAK,EAAE7B,eAAe,CAACQ,eAAgB;kBACvCsD,QAAQ,EAAEpB;gBAAkB;kBAAAU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACL9D,OAAA;gBAAA0D,QAAA,eACE1D,OAAA;kBACEmE,IAAI,EAAC,gBAAgB;kBACrBhC,IAAI,EAAC,mBAAmB;kBACxBC,KAAK,EAAE7B,eAAe,CAACS,iBAAkB;kBACzCqD,QAAQ,EAAEpB;gBAAkB;kBAAAU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACL9D,OAAA;gBAAA0D,QAAA,eACE1D,OAAA;kBACEmE,IAAI,EAAC,MAAM;kBACXhC,IAAI,EAAC,SAAS;kBACdC,KAAK,EAAE7B,eAAe,CAACU,OAAQ;kBAC/BoD,QAAQ,EAAEpB;gBAAkB;kBAAAU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACL9D,OAAA;gBAAA0D,QAAA,gBACE1D,OAAA;kBAAQgE,OAAO,EAAEA,CAAA,KAAMd,UAAU,CAACF,QAAQ,CAACQ,UAAU,CAAE;kBAAAE,QAAA,EAAC;gBAAI;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACrE9D,OAAA;kBAAQgE,OAAO,EAAEX,YAAa;kBAACY,KAAK,EAAE;oBAAEW,UAAU,EAAE;kBAAM,CAAE;kBAAAlB,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1E,CAAC;YAAA,eACL,CAAC,gBAEH9D,OAAA,CAAAE,SAAA;cAAAwD,QAAA,gBACE1D,OAAA;gBAAA0D,QAAA,EAAKV,QAAQ,CAACQ;cAAU;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9B9D,OAAA;gBAAA0D,QAAA,EAAKV,QAAQ,CAACnC;cAAe;gBAAA8C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnC9D,OAAA;gBAAA0D,QAAA,EAAKV,QAAQ,CAAClC;cAAU;gBAAA6C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9B9D,OAAA;gBAAA0D,QAAA,EAAKV,QAAQ,CAACjC;cAAe;gBAAA4C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnC9D,OAAA;gBAAA0D,QAAA,EAAKV,QAAQ,CAAChC;cAAiB;gBAAA2C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACrC9D,OAAA;gBAAA0D,QAAA,EAAKV,QAAQ,CAAC/B;cAAO;gBAAA0C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC3B9D,OAAA;gBAAA0D,QAAA,gBACE1D,OAAA;kBAAQgE,OAAO,EAAEA,CAAA,KAAMjB,eAAe,CAACC,QAAQ,CAAE;kBAACiB,KAAK,EAAE;oBAAEY,WAAW,EAAE;kBAAM,CAAE;kBAAAnB,QAAA,EAAC;gBAEjF;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACRd,QAAQ,CAAC8B,gBAAgB,KAAK,CAAC,gBAC9B9E,OAAA;kBAAQgE,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAACN,QAAQ,CAACQ,UAAU,CAAE;kBAAAE,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,gBAEzE9D,OAAA;kBAAQ+E,QAAQ;kBAACC,KAAK,EAAC,oCAAoC;kBAAAtB,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAC3E;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA,eACL;UACH,GApEMd,QAAQ,CAACQ,UAAU;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqExB,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAGN9D,OAAA;MAAKiE,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAR,QAAA,gBAChC1D,OAAA;QAAA0D,QAAA,EAAI;MAAyD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClE9D,OAAA;QACEmE,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,8BAA8B;QAC1ChC,KAAK,EAAEf,WAAY;QACnBgD,QAAQ,EAAGnC,CAAC,IAAKZ,cAAc,CAACY,CAAC,CAACG,MAAM,CAACD,KAAK;MAAE;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACF9D,OAAA;QAAQgE,OAAO,EAAEP,wBAAyB;QAAAC,QAAA,EAAC;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1D,EAAA,CA1TID,kBAAkB;AAAA8E,EAAA,GAAlB9E,kBAAkB;AA4TxB,eAAeA,kBAAkB;AAAC,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}