{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/pages/MainPage.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n\n// //   // Fetch stations from the backend API\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     fetchStations();\n// //   }, []);\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div id=\"real-time-clock\"></div>\n// //       </header>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={sourceStation}\n// //           onChange={(e) => setSourceStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input type=\"date\" placeholder=\"Select Date\" />\n\n// //         <button className=\"search-button\">Search</button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\"; // Import the CSS file for styling\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations from backend API\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   // Real-time clock\n// //   useEffect(() => {\n// //     fetchStations();\n// //     const interval = setInterval(() => {\n// //       const now = new Date();\n// //       setTime(now.toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       {/* Header */}\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       {/* Train Search Container */}\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={sourceStation}\n// //           onChange={(e) => setSourceStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input type=\"date\" placeholder=\"Select Date\" />\n// //         <button className=\"search-button\">Search</button>\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   // Real-time clock\n// //   useEffect(() => {\n// //     fetchStations();\n// //     const interval = setInterval(() => {\n// //       const now = new Date();\n// //       setTime(now.toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   // Fetch train schedules\n// //   const handleSearch = async () => {\n// //     if (!sourceStation || !destinationStation || !travelDate) {\n// //       setError(\"Please fill all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear error\n\n// //     try {\n// //       const response = await axiosInstance.get(\"/train-schedules\", {\n// //         params: {\n// //           originStation: sourceStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setSchedules(response.data.trainSchedules);\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"No train schedules available.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       {/* Header */}\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       {/* Search Form */}\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select value={sourceStation} onChange={(e) => setSourceStation(e.target.value)}>\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button className=\"search-button\" onClick={handleSearch}>Search</button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n\n// //       {/* Display Schedules */}\n// //       {schedules.length > 0 && (\n// //         <div className=\"schedules-table\">\n// //           <h2>Available Train Schedules</h2>\n// //           <table>\n// //             <thead>\n// //               <tr>\n// //                 <th>Train ID</th>\n// //                 <th>Transit Line</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //                 <th>Travel Time</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations\n// //   useEffect(() => {\n// //     const fetchStations = async () => {\n// //       try {\n// //         const response = await axiosInstance.get(\"/stations\");\n// //         setStations(response.data.stations);\n// //       } catch (err) {\n// //         console.error(\"Error fetching stations:\", err);\n// //         setError(\"Failed to load stations.\");\n// //       }\n// //     };\n// //     fetchStations();\n\n// //     // Real-time clock\n// //     const interval = setInterval(() => {\n// //       setTime(new Date().toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   const handleSearch = async () => {\n// //     if (!sourceStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear any previous errors\n\n// //     try {\n// //       const response = await axiosInstance.get(\"/mainPage/train-schedules\", {\n// //         params: {\n// //           sourceStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       console.log(\"Train Schedules:\", response.data.schedules);\n// //       // Here you can set state to display the schedules in a table\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select value={sourceStation} onChange={(e) => setSourceStation(e.target.value)}>\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button className=\"search-button\" onClick={handleSearch}>\n// //           Search\n// //         </button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import \"../styles.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [originStation, setOriginStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n\n// //   // Fetch available stations\n// //   useEffect(() => {\n// //     const fetchStations = async () => {\n// //       try {\n// //         const response = await axios.get(\"http://localhost:3000/api/stations\");\n// //         setStations(response.data.stations);\n// //       } catch (err) {\n// //         console.error(\"Error fetching stations:\", err);\n// //       }\n// //     };\n// //     fetchStations();\n// //   }, []);\n\n// //   // Handle Search Train Schedules\n// //   const handleSearch = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear any previous errors\n\n// //     try {\n// //       const response = await axios.get(\n// //         \"http://localhost:3000/api/mainPage/train-schedules\",\n// //         {\n// //           params: {\n// //             originStation,\n// //             destinationStation,\n// //             travelDate,\n// //           },\n// //         }\n// //       );\n// //       setSchedules(response.data.trainSchedules);\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules. Try again later.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <div className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-links\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"time\">{new Date().toLocaleTimeString()}</div>\n// //       </div>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n\n// //         <button className=\"search-button\" onClick={handleSearch}>\n// //           Search\n// //         </button>\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n\n// //       {/* Train Schedule Results */}\n// //       {schedules.length > 0 && (\n// //         <div className=\"results-container\">\n// //           <h3>Available Train Schedules</h3>\n// //           <table className=\"schedules-table\">\n// //             <thead>\n// //               <tr>\n// //                 <th>Train ID</th>\n// //                 <th>Origin</th>\n// //                 <th>Destination</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>{schedule.OriginStation}</td>\n// //                   <td>{schedule.DestinationStation}</td>\n// //                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"../styles.css\";\n\n// const MainPage = () => {\n//   const [stations, setStations] = useState([]);\n//   const [originStation, setOriginStation] = useState(\"\");\n//   const [destinationStation, setDestinationStation] = useState(\"\");\n//   const [travelDate, setTravelDate] = useState(\"\");\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [trainDetails, setTrainDetails] = useState(null); // Train details\n//   const [sortedSchedules, setSortedSchedules] = useState([]);\n//   const [sortField, setSortField] = useState(\"\");\n\n//   // Fetch available stations\n//   useEffect(() => {\n//     const fetchStations = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:3000/api/stations\");\n//         setStations(response.data.stations);\n//       } catch (err) {\n//         console.error(\"Error fetching stations:\", err);\n//       }\n//     };\n//     fetchStations();\n//   }, []);\n\n//   const handleSort = (field) => {\n//     const sortedData = [...schedules].sort((a, b) => {\n//       const dateA = new Date(a[field]);\n//       const dateB = new Date(b[field]);\n//       return dateA - dateB;\n//     });\n\n//     setSortedSchedules(sortedData);\n//     setSortField(field);\n//   };\n\n//   // Handle Search Train Schedules\n//   const handleSearch = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError(\"Please select all fields.\");\n//       return;\n//     }\n//     setError(\"\");\n\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/api/mainPage/train-schedules\",\n//         {\n//           params: { originStation, destinationStation, travelDate },\n//         }\n//       );\n//       setSchedules(response.data.trainSchedules);\n//       setSortedSchedules(response.data.trainSchedules);\n//     } catch (err) {\n//       console.error(\"Error fetching train schedules:\", err);\n//       setError(\"Failed to fetch train schedules. Try again later.\");\n//     }\n//   };\n\n//   // Fetch Train Details\n//   const fetchTrainDetails = async (scheduleID) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n//       );\n//       setTrainDetails(response.data); // Set train details\n//       console.log(response.data.Stops);\n//     } catch (err) {\n//       console.error(\"Error fetching train details:\", err);\n//       setError(\"Failed to fetch train details. Try again later.\");\n//     }\n//   };\n\n//   const getStopsBetweenStations = (stops) => {\n//     // Find the indices of startStation and endStation\n//     const startIndex = stops.findIndex(\n//       (stop) => stop.StationName === originStation\n//     );\n//     const endIndex = stops.findIndex(\n//       (stop) => stop.StationName === destinationStation\n//     );\n\n//     // If stations are not found or in the wrong order\n//     if (startIndex === -1 || endIndex === -1 || startIndex > endIndex) {\n//       console.error(\"Invalid start or destination station.\");\n//       return [];\n//     }\n\n//     // Return the subarray of stops\n//     return stops.slice(startIndex, endIndex + 1);\n//   };\n\n//   return (\n//     <div className=\"main-page\">\n//       <div className=\"header\">\n//         <h1>Railway Reservation System</h1>\n//         <div className=\"header-links\">\n//           <a href=\"/login\">Sign In</a>\n//           <a href=\"/signup\">Sign Up</a>\n//         </div>\n//         <div className=\"time\">{new Date().toLocaleTimeString()}</div>\n//       </div>\n\n//       <div className=\"search-container\">\n//         <h2>Search Train</h2>\n//         <select\n//           value={originStation}\n//           onChange={(e) => setOriginStation(e.target.value)}\n//         >\n//           <option value=\"\">--Source Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={destinationStation}\n//           onChange={(e) => setDestinationStation(e.target.value)}\n//         >\n//           <option value=\"\">--Destination Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <input\n//           type=\"date\"\n//           value={travelDate}\n//           onChange={(e) => setTravelDate(e.target.value)}\n//         />\n\n//         <button className=\"search-button\" onClick={handleSearch}>\n//           Search\n//         </button>\n//         {error && <p className=\"error\">{error}</p>}\n//       </div>\n\n//       <div className=\"sorting-buttons\">\n//         <button onClick={() => handleSort(\"ArrivalDateTime\")}>\n//           Sort by Arrival Time\n//         </button>\n//         <button onClick={() => handleSort(\"DepartureDateTime\")}>\n//           Sort by Departure Time\n//         </button>\n//       </div>\n\n//       {/* Train Schedule Results */}\n//       {schedules.length > 0 && (\n//         <div className=\"results-container\">\n//           <h3>Available Train Schedules</h3>\n//           <table className=\"schedules-table\">\n//             <thead>\n//               <tr>\n//                 <th>Train ID</th>\n//                 <th>Origin</th>\n//                 <th>Destination</th>\n//                 <th>Departure Time</th>\n//                 <th>Arrival Time</th>\n//                 <th>Details</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>{schedule.OriginStation}</td>\n//                   <td>{schedule.DestinationStation}</td>\n//                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n//                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>\n//                     <button\n//                       className=\"details-button\"\n//                       onClick={() => fetchTrainDetails(schedule.ScheduleID)}\n//                     >\n//                       View Details\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {/* Train Details */}\n//       {trainDetails && ( \n//         <div className=\"train-details\">\n//           <h3>Train Details</h3>\n//           <p><strong>Fare:</strong> ${trainDetails.BaseFare}</p>\n//           <h4>Stops:</h4>\n//           <ul>\n//             {/* {trainDetails.Stops.map((stop, index) => (\n//               <li key={index}>\n//                 {stop.StationName} - Arrival:{\" \"}\n//                 {new Date(stop.ArrivalDateTime).toLocaleString()}, Departure:{\" \"}\n//                 {new Date(stop.DepartureDateTime).toLocaleString()}\n//               </li>\n//             ))} */}\n//           </ul>\n//           <tbody>\n//         {getStopsBetweenStations(trainDetails.Stops).map((stop, idx) => (\n//     <tr key={idx}>\n//       <td>{stop.StationName}</td>\n//       <td>{new Date(stop.ArrivalDateTime).toLocaleString()}</td>\n//       <td>{new Date(stop.DepartureDateTime).toLocaleString()}</td>\n//       {/* <td>${stop.BaseFare.toFixed(2)}</td> */}\n//     </tr>\n//   ))}\n// </tbody>\n\n//         </div>\n\n//       )}\n//     </div>\n//   );\n// };\n\n// export default MainPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n// import \"../styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [originStation, setOriginStation] = useState(\"\");\n  const [destinationStation, setDestinationStation] = useState(\"\");\n  const [travelDate, setTravelDate] = useState(\"\");\n  const [schedules, setSchedules] = useState([]);\n  const [sortedSchedules, setSortedSchedules] = useState([]);\n  const [trainDetails, setTrainDetails] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [sortField, setSortField] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState(\"asc\");\n  const [time, setTime] = useState(\"\");\n\n  // Fetch available stations\n  useEffect(() => {\n    const fetchStations = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:3000/api/stations\");\n        setStations(response.data.stations);\n      } catch (err) {\n        console.error(\"Error fetching stations:\", err);\n        setError(\"Failed to load stations.\");\n      }\n    };\n    fetchStations();\n    const interval = setInterval(() => {\n      setTime(new Date().toLocaleTimeString());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Handle Search Train Schedules\n  const handleSearch = async () => {\n    if (!originStation || !destinationStation || !travelDate) {\n      setError(\"Please select all fields.\");\n      return;\n    }\n    setError(\"\");\n    try {\n      const response = await axios.get(\"http://localhost:3000/api/mainPage/train-schedules\", {\n        params: {\n          originStation,\n          destinationStation,\n          travelDate\n        }\n      });\n      setSchedules(response.data.trainSchedules);\n      setSortedSchedules(response.data.trainSchedules);\n    } catch (err) {\n      console.error(\"Error fetching train schedules:\", err);\n      setError(\"Failed to fetch train schedules.\");\n    }\n  };\n\n  // Sorting Logic\n  const handleSort = field => {\n    const order = sortField === field && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    const sortedData = [...schedules].sort((a, b) => {\n      const dateA = new Date(a[field]);\n      const dateB = new Date(b[field]);\n      return order === \"asc\" ? dateA - dateB : dateB - dateA;\n    });\n    setSortedSchedules(sortedData);\n    setSortField(field);\n    setSortOrder(order);\n  };\n\n  // Fetch Train Details\n  const fetchTrainDetails = async scheduleID => {\n    try {\n      const response = await axios.get(`http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`);\n      setTrainDetails(response.data);\n    } catch (err) {\n      console.error(\"Error fetching train details:\", err);\n      setError(\"Failed to fetch train details.\");\n    }\n  };\n\n  // Get Stops between Source and Destination\n  const getStopsBetweenStations = stops => {\n    const startIndex = stops.findIndex(stop => stop.StationName === originStation);\n    const endIndex = stops.findIndex(stop => stop.StationName === destinationStation);\n    if (startIndex === -1 || endIndex === -1 || startIndex > endIndex) {\n      return stops; // Fallback to showing all stops\n    }\n    return stops.slice(startIndex, endIndex + 1);\n  };\n  const getFareForStations = responseData => {\n    const stopCount = responseData.Stops.length - 1;\n    const farePerStop = responseData.BaseFare / stopCount;\n    const x = (getStopsBetweenStations(responseData.Stops).length - 1) * farePerStop;\n    return x;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Railway Reservation System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-links\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/login\",\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/signup\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time\",\n        children: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 865,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Search Train\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: originStation,\n        onChange: e => setOriginStation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Source Station--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: destinationStation,\n        onChange: e => setDestinationStation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Destination Station--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: travelDate,\n        onChange: e => setTravelDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 897,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 875,\n      columnNumber: 7\n    }, this), sortedSchedules.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Available Train Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sorting-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSort(\"ArrivalDateTime\"),\n          children: \"Sort by Arrival Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSort(\"DepartureDateTime\"),\n          children: \"Sort by Departure Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 906,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"schedules-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Train ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transit Line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 915,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: sortedSchedules.map(schedule => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TrainID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 923,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TransitLineName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(schedule.DepartureDateTime).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 925,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(schedule.ArrivalDateTime).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => fetchTrainDetails(schedule.ScheduleID),\n                children: \"View Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 928,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 927,\n              columnNumber: 19\n            }, this)]\n          }, schedule.ScheduleID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 910,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 903,\n      columnNumber: 9\n    }, this), trainDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"train-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Train Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Fare:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 14\n        }, this), \" \", getFareForStations(trainDetails)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Stops:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Station\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 949,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 950,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 948,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 947,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: getStopsBetweenStations(trainDetails.Stops).map((stop, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: stop.StationName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 957,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(stop.ArrivalDateTime).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 958,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(stop.DepartureDateTime).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 959,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 956,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 946,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 863,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"RffVYIXPwzy4F2e9KmDoWdYFyPw=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","MainPage","_s","stations","setStations","originStation","setOriginStation","destinationStation","setDestinationStation","travelDate","setTravelDate","schedules","setSchedules","sortedSchedules","setSortedSchedules","trainDetails","setTrainDetails","error","setError","sortField","setSortField","sortOrder","setSortOrder","time","setTime","fetchStations","response","get","data","err","console","interval","setInterval","Date","toLocaleTimeString","clearInterval","handleSearch","params","trainSchedules","handleSort","field","order","sortedData","sort","a","b","dateA","dateB","fetchTrainDetails","scheduleID","getStopsBetweenStations","stops","startIndex","findIndex","stop","StationName","endIndex","slice","getFareForStations","responseData","stopCount","Stops","length","farePerStop","BaseFare","x","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","value","onChange","e","target","map","station","StationID","type","onClick","schedule","TrainID","TransitLineName","DepartureDateTime","toLocaleString","ArrivalDateTime","ScheduleID","idx","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/pages/MainPage.js"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n\n// //   // Fetch stations from the backend API\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     fetchStations();\n// //   }, []);\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div id=\"real-time-clock\"></div>\n// //       </header>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={sourceStation}\n// //           onChange={(e) => setSourceStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input type=\"date\" placeholder=\"Select Date\" />\n\n// //         <button className=\"search-button\">Search</button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\"; // Import the CSS file for styling\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations from backend API\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   // Real-time clock\n// //   useEffect(() => {\n// //     fetchStations();\n// //     const interval = setInterval(() => {\n// //       const now = new Date();\n// //       setTime(now.toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       {/* Header */}\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       {/* Train Search Container */}\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={sourceStation}\n// //           onChange={(e) => setSourceStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input type=\"date\" placeholder=\"Select Date\" />\n// //         <button className=\"search-button\">Search</button>\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   // Real-time clock\n// //   useEffect(() => {\n// //     fetchStations();\n// //     const interval = setInterval(() => {\n// //       const now = new Date();\n// //       setTime(now.toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   // Fetch train schedules\n// //   const handleSearch = async () => {\n// //     if (!sourceStation || !destinationStation || !travelDate) {\n// //       setError(\"Please fill all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear error\n\n// //     try {\n// //       const response = await axiosInstance.get(\"/train-schedules\", {\n// //         params: {\n// //           originStation: sourceStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setSchedules(response.data.trainSchedules);\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"No train schedules available.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       {/* Header */}\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       {/* Search Form */}\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select value={sourceStation} onChange={(e) => setSourceStation(e.target.value)}>\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button className=\"search-button\" onClick={handleSearch}>Search</button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n\n// //       {/* Display Schedules */}\n// //       {schedules.length > 0 && (\n// //         <div className=\"schedules-table\">\n// //           <h2>Available Train Schedules</h2>\n// //           <table>\n// //             <thead>\n// //               <tr>\n// //                 <th>Train ID</th>\n// //                 <th>Transit Line</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //                 <th>Travel Time</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations\n// //   useEffect(() => {\n// //     const fetchStations = async () => {\n// //       try {\n// //         const response = await axiosInstance.get(\"/stations\");\n// //         setStations(response.data.stations);\n// //       } catch (err) {\n// //         console.error(\"Error fetching stations:\", err);\n// //         setError(\"Failed to load stations.\");\n// //       }\n// //     };\n// //     fetchStations();\n\n// //     // Real-time clock\n// //     const interval = setInterval(() => {\n// //       setTime(new Date().toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   const handleSearch = async () => {\n// //     if (!sourceStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear any previous errors\n  \n// //     try {\n// //       const response = await axiosInstance.get(\"/mainPage/train-schedules\", {\n// //         params: {\n// //           sourceStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       console.log(\"Train Schedules:\", response.data.schedules);\n// //       // Here you can set state to display the schedules in a table\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules.\");\n// //     }\n// //   };\n  \n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select value={sourceStation} onChange={(e) => setSourceStation(e.target.value)}>\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button className=\"search-button\" onClick={handleSearch}>\n// //           Search\n// //         </button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import \"../styles.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [originStation, setOriginStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n\n// //   // Fetch available stations\n// //   useEffect(() => {\n// //     const fetchStations = async () => {\n// //       try {\n// //         const response = await axios.get(\"http://localhost:3000/api/stations\");\n// //         setStations(response.data.stations);\n// //       } catch (err) {\n// //         console.error(\"Error fetching stations:\", err);\n// //       }\n// //     };\n// //     fetchStations();\n// //   }, []);\n\n// //   // Handle Search Train Schedules\n// //   const handleSearch = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear any previous errors\n\n// //     try {\n// //       const response = await axios.get(\n// //         \"http://localhost:3000/api/mainPage/train-schedules\",\n// //         {\n// //           params: {\n// //             originStation,\n// //             destinationStation,\n// //             travelDate,\n// //           },\n// //         }\n// //       );\n// //       setSchedules(response.data.trainSchedules);\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules. Try again later.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <div className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-links\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"time\">{new Date().toLocaleTimeString()}</div>\n// //       </div>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n\n// //         <button className=\"search-button\" onClick={handleSearch}>\n// //           Search\n// //         </button>\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n\n// //       {/* Train Schedule Results */}\n// //       {schedules.length > 0 && (\n// //         <div className=\"results-container\">\n// //           <h3>Available Train Schedules</h3>\n// //           <table className=\"schedules-table\">\n// //             <thead>\n// //               <tr>\n// //                 <th>Train ID</th>\n// //                 <th>Origin</th>\n// //                 <th>Destination</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>{schedule.OriginStation}</td>\n// //                   <td>{schedule.DestinationStation}</td>\n// //                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"../styles.css\";\n\n// const MainPage = () => {\n//   const [stations, setStations] = useState([]);\n//   const [originStation, setOriginStation] = useState(\"\");\n//   const [destinationStation, setDestinationStation] = useState(\"\");\n//   const [travelDate, setTravelDate] = useState(\"\");\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [trainDetails, setTrainDetails] = useState(null); // Train details\n//   const [sortedSchedules, setSortedSchedules] = useState([]);\n//   const [sortField, setSortField] = useState(\"\");\n\n//   // Fetch available stations\n//   useEffect(() => {\n//     const fetchStations = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:3000/api/stations\");\n//         setStations(response.data.stations);\n//       } catch (err) {\n//         console.error(\"Error fetching stations:\", err);\n//       }\n//     };\n//     fetchStations();\n//   }, []);\n\n//   const handleSort = (field) => {\n//     const sortedData = [...schedules].sort((a, b) => {\n//       const dateA = new Date(a[field]);\n//       const dateB = new Date(b[field]);\n//       return dateA - dateB;\n//     });\n\n//     setSortedSchedules(sortedData);\n//     setSortField(field);\n//   };\n\n//   // Handle Search Train Schedules\n//   const handleSearch = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError(\"Please select all fields.\");\n//       return;\n//     }\n//     setError(\"\");\n\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/api/mainPage/train-schedules\",\n//         {\n//           params: { originStation, destinationStation, travelDate },\n//         }\n//       );\n//       setSchedules(response.data.trainSchedules);\n//       setSortedSchedules(response.data.trainSchedules);\n//     } catch (err) {\n//       console.error(\"Error fetching train schedules:\", err);\n//       setError(\"Failed to fetch train schedules. Try again later.\");\n//     }\n//   };\n\n//   // Fetch Train Details\n//   const fetchTrainDetails = async (scheduleID) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n//       );\n//       setTrainDetails(response.data); // Set train details\n//       console.log(response.data.Stops);\n//     } catch (err) {\n//       console.error(\"Error fetching train details:\", err);\n//       setError(\"Failed to fetch train details. Try again later.\");\n//     }\n//   };\n\n//   const getStopsBetweenStations = (stops) => {\n//     // Find the indices of startStation and endStation\n//     const startIndex = stops.findIndex(\n//       (stop) => stop.StationName === originStation\n//     );\n//     const endIndex = stops.findIndex(\n//       (stop) => stop.StationName === destinationStation\n//     );\n  \n//     // If stations are not found or in the wrong order\n//     if (startIndex === -1 || endIndex === -1 || startIndex > endIndex) {\n//       console.error(\"Invalid start or destination station.\");\n//       return [];\n//     }\n  \n//     // Return the subarray of stops\n//     return stops.slice(startIndex, endIndex + 1);\n//   };\n\n//   return (\n//     <div className=\"main-page\">\n//       <div className=\"header\">\n//         <h1>Railway Reservation System</h1>\n//         <div className=\"header-links\">\n//           <a href=\"/login\">Sign In</a>\n//           <a href=\"/signup\">Sign Up</a>\n//         </div>\n//         <div className=\"time\">{new Date().toLocaleTimeString()}</div>\n//       </div>\n\n//       <div className=\"search-container\">\n//         <h2>Search Train</h2>\n//         <select\n//           value={originStation}\n//           onChange={(e) => setOriginStation(e.target.value)}\n//         >\n//           <option value=\"\">--Source Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={destinationStation}\n//           onChange={(e) => setDestinationStation(e.target.value)}\n//         >\n//           <option value=\"\">--Destination Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <input\n//           type=\"date\"\n//           value={travelDate}\n//           onChange={(e) => setTravelDate(e.target.value)}\n//         />\n\n//         <button className=\"search-button\" onClick={handleSearch}>\n//           Search\n//         </button>\n//         {error && <p className=\"error\">{error}</p>}\n//       </div>\n\n//       <div className=\"sorting-buttons\">\n//         <button onClick={() => handleSort(\"ArrivalDateTime\")}>\n//           Sort by Arrival Time\n//         </button>\n//         <button onClick={() => handleSort(\"DepartureDateTime\")}>\n//           Sort by Departure Time\n//         </button>\n//       </div>\n\n//       {/* Train Schedule Results */}\n//       {schedules.length > 0 && (\n//         <div className=\"results-container\">\n//           <h3>Available Train Schedules</h3>\n//           <table className=\"schedules-table\">\n//             <thead>\n//               <tr>\n//                 <th>Train ID</th>\n//                 <th>Origin</th>\n//                 <th>Destination</th>\n//                 <th>Departure Time</th>\n//                 <th>Arrival Time</th>\n//                 <th>Details</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>{schedule.OriginStation}</td>\n//                   <td>{schedule.DestinationStation}</td>\n//                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n//                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>\n//                     <button\n//                       className=\"details-button\"\n//                       onClick={() => fetchTrainDetails(schedule.ScheduleID)}\n//                     >\n//                       View Details\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {/* Train Details */}\n//       {trainDetails && ( \n//         <div className=\"train-details\">\n//           <h3>Train Details</h3>\n//           <p><strong>Fare:</strong> ${trainDetails.BaseFare}</p>\n//           <h4>Stops:</h4>\n//           <ul>\n//             {/* {trainDetails.Stops.map((stop, index) => (\n//               <li key={index}>\n//                 {stop.StationName} - Arrival:{\" \"}\n//                 {new Date(stop.ArrivalDateTime).toLocaleString()}, Departure:{\" \"}\n//                 {new Date(stop.DepartureDateTime).toLocaleString()}\n//               </li>\n//             ))} */}\n//           </ul>\n//           <tbody>\n//         {getStopsBetweenStations(trainDetails.Stops).map((stop, idx) => (\n//     <tr key={idx}>\n//       <td>{stop.StationName}</td>\n//       <td>{new Date(stop.ArrivalDateTime).toLocaleString()}</td>\n//       <td>{new Date(stop.DepartureDateTime).toLocaleString()}</td>\n//       {/* <td>${stop.BaseFare.toFixed(2)}</td> */}\n//     </tr>\n//   ))}\n// </tbody>\n\n//         </div>\n        \n//       )}\n//     </div>\n//   );\n// };\n\n// export default MainPage;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n// import \"../styles.css\";\n\nconst MainPage = () => {\n  const [stations, setStations] = useState([]);\n  const [originStation, setOriginStation] = useState(\"\");\n  const [destinationStation, setDestinationStation] = useState(\"\");\n  const [travelDate, setTravelDate] = useState(\"\");\n  const [schedules, setSchedules] = useState([]);\n  const [sortedSchedules, setSortedSchedules] = useState([]);\n  const [trainDetails, setTrainDetails] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [sortField, setSortField] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState(\"asc\");\n  const [time, setTime] = useState(\"\");\n\n  // Fetch available stations\n  useEffect(() => {\n    const fetchStations = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:3000/api/stations\");\n        setStations(response.data.stations);\n      } catch (err) {\n        console.error(\"Error fetching stations:\", err);\n        setError(\"Failed to load stations.\");\n      }\n    };\n\n    fetchStations();\n\n    const interval = setInterval(() => {\n      setTime(new Date().toLocaleTimeString());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Handle Search Train Schedules\n  const handleSearch = async () => {\n    if (!originStation || !destinationStation || !travelDate) {\n      setError(\"Please select all fields.\");\n      return;\n    }\n    setError(\"\");\n\n    try {\n      const response = await axios.get(\n        \"http://localhost:3000/api/mainPage/train-schedules\",\n        {\n          params: { originStation, destinationStation, travelDate },\n        }\n      );\n      setSchedules(response.data.trainSchedules);\n      setSortedSchedules(response.data.trainSchedules);\n    } catch (err) {\n      console.error(\"Error fetching train schedules:\", err);\n      setError(\"Failed to fetch train schedules.\");\n    }\n  };\n\n  // Sorting Logic\n  const handleSort = (field) => {\n    const order = sortField === field && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    const sortedData = [...schedules].sort((a, b) => {\n      const dateA = new Date(a[field]);\n      const dateB = new Date(b[field]);\n      return order === \"asc\" ? dateA - dateB : dateB - dateA;\n    });\n\n    setSortedSchedules(sortedData);\n    setSortField(field);\n    setSortOrder(order);\n  };\n\n  // Fetch Train Details\n  const fetchTrainDetails = async (scheduleID) => {\n    try {\n      const response = await axios.get(\n        `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n      );\n      setTrainDetails(response.data);\n    } catch (err) {\n      console.error(\"Error fetching train details:\", err);\n      setError(\"Failed to fetch train details.\");\n    }\n  };\n\n  // Get Stops between Source and Destination\n  const getStopsBetweenStations = (stops) => {\n    const startIndex = stops.findIndex(\n      (stop) => stop.StationName === originStation\n    );\n    const endIndex = stops.findIndex(\n      (stop) => stop.StationName === destinationStation\n    );\n\n    if (startIndex === -1 || endIndex === -1 || startIndex > endIndex) {\n      return stops; // Fallback to showing all stops\n    }\n    return stops.slice(startIndex, endIndex + 1);\n  };\n\n  const getFareForStations = (responseData) => {\n    const stopCount = responseData.Stops.length - 1;\n    const farePerStop = responseData.BaseFare / stopCount;\n\n    const x = (getStopsBetweenStations(responseData.Stops).length - 1 )* farePerStop;\n    return x;\n  }\n\n  return (\n    <div className=\"main-page\">\n      {/* Header */}\n      <div className=\"header\">\n        <h1>Railway Reservation System</h1>\n        <div className=\"header-links\">\n          <a href=\"/login\">Sign In</a>\n          <a href=\"/signup\">Sign Up</a>\n        </div>\n        <div className=\"time\">{time}</div>\n      </div>\n\n      {/* Search Form */}\n      <div className=\"search-container\">\n        <h2>Search Train</h2>\n        <select value={originStation} onChange={(e) => setOriginStation(e.target.value)}>\n          <option value=\"\">--Source Station--</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n\n        <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n          <option value=\"\">--Destination Station--</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n\n        <input type=\"date\" value={travelDate} onChange={(e) => setTravelDate(e.target.value)} />\n        <button className=\"search-button\" onClick={handleSearch}>Search</button>\n        {error && <p className=\"error\">{error}</p>}\n      </div>\n\n\n      {/* Train Schedules */}\n      {sortedSchedules.length > 0 && (\n        <div className=\"results-container\">\n          <h3>Available Train Schedules</h3>\n           {/* Sorting Buttons */}\n      <div className=\"sorting-buttons\">\n        <button onClick={() => handleSort(\"ArrivalDateTime\")}>Sort by Arrival Time</button>\n        <button onClick={() => handleSort(\"DepartureDateTime\")}>Sort by Departure Time</button>\n      </div>\n          <table className=\"schedules-table\">\n            <thead>\n              <tr>\n                <th>Train ID</th>\n                <th>Transit Line</th>\n                <th>Departure Time</th>\n                <th>Arrival Time</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedSchedules.map((schedule) => (\n                <tr key={schedule.ScheduleID}>\n                  <td>{schedule.TrainID}</td>\n                  <td>{schedule.TransitLineName}</td>\n                  <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n                  <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n                  <td>\n                    <button onClick={() => fetchTrainDetails(schedule.ScheduleID)}>\n                      View Details\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {/* Train Details */}\n      {trainDetails && (\n        <div className=\"train-details\">\n          <h3>Train Details</h3>\n          {/* <p><strong>Fare:</strong> ${trainDetails.BaseFare}</p> */}\n          <p><strong>Fare:</strong> {getFareForStations(trainDetails)}</p>\n          <h4>Stops:</h4>\n          <table>\n            <thead>\n              <tr>\n                <th>Station</th>\n                <th>Arrival</th>\n                <th>Departure</th>\n              </tr>\n            </thead>\n            <tbody>\n              {getStopsBetweenStations(trainDetails.Stops).map((stop, idx) => (\n                <tr key={idx}>\n                  <td>{stop.StationName}</td>\n                  <td>{new Date(stop.ArrivalDateTime).toLocaleString()}</td>\n                  <td>{new Date(stop.DepartureDateTime).toLocaleString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MainPage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}