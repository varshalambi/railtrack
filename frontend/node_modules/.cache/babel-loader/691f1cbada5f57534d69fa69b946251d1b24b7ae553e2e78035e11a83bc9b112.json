{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/pages/MainPage.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n\n// //   // Fetch stations from the backend API\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     fetchStations();\n// //   }, []);\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div id=\"real-time-clock\"></div>\n// //       </header>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={sourceStation}\n// //           onChange={(e) => setSourceStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input type=\"date\" placeholder=\"Select Date\" />\n\n// //         <button className=\"search-button\">Search</button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\"; // Import the CSS file for styling\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations from backend API\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   // Real-time clock\n// //   useEffect(() => {\n// //     fetchStations();\n// //     const interval = setInterval(() => {\n// //       const now = new Date();\n// //       setTime(now.toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       {/* Header */}\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       {/* Train Search Container */}\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={sourceStation}\n// //           onChange={(e) => setSourceStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input type=\"date\" placeholder=\"Select Date\" />\n// //         <button className=\"search-button\">Search</button>\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   // Real-time clock\n// //   useEffect(() => {\n// //     fetchStations();\n// //     const interval = setInterval(() => {\n// //       const now = new Date();\n// //       setTime(now.toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   // Fetch train schedules\n// //   const handleSearch = async () => {\n// //     if (!sourceStation || !destinationStation || !travelDate) {\n// //       setError(\"Please fill all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear error\n\n// //     try {\n// //       const response = await axiosInstance.get(\"/train-schedules\", {\n// //         params: {\n// //           originStation: sourceStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setSchedules(response.data.trainSchedules);\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"No train schedules available.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       {/* Header */}\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       {/* Search Form */}\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select value={sourceStation} onChange={(e) => setSourceStation(e.target.value)}>\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button className=\"search-button\" onClick={handleSearch}>Search</button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n\n// //       {/* Display Schedules */}\n// //       {schedules.length > 0 && (\n// //         <div className=\"schedules-table\">\n// //           <h2>Available Train Schedules</h2>\n// //           <table>\n// //             <thead>\n// //               <tr>\n// //                 <th>Train ID</th>\n// //                 <th>Transit Line</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //                 <th>Travel Time</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations\n// //   useEffect(() => {\n// //     const fetchStations = async () => {\n// //       try {\n// //         const response = await axiosInstance.get(\"/stations\");\n// //         setStations(response.data.stations);\n// //       } catch (err) {\n// //         console.error(\"Error fetching stations:\", err);\n// //         setError(\"Failed to load stations.\");\n// //       }\n// //     };\n// //     fetchStations();\n\n// //     // Real-time clock\n// //     const interval = setInterval(() => {\n// //       setTime(new Date().toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   const handleSearch = async () => {\n// //     if (!sourceStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear any previous errors\n\n// //     try {\n// //       const response = await axiosInstance.get(\"/mainPage/train-schedules\", {\n// //         params: {\n// //           sourceStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       console.log(\"Train Schedules:\", response.data.schedules);\n// //       // Here you can set state to display the schedules in a table\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select value={sourceStation} onChange={(e) => setSourceStation(e.target.value)}>\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button className=\"search-button\" onClick={handleSearch}>\n// //           Search\n// //         </button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import \"../styles.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [originStation, setOriginStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n\n// //   // Fetch available stations\n// //   useEffect(() => {\n// //     const fetchStations = async () => {\n// //       try {\n// //         const response = await axios.get(\"http://localhost:3000/api/stations\");\n// //         setStations(response.data.stations);\n// //       } catch (err) {\n// //         console.error(\"Error fetching stations:\", err);\n// //       }\n// //     };\n// //     fetchStations();\n// //   }, []);\n\n// //   // Handle Search Train Schedules\n// //   const handleSearch = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear any previous errors\n\n// //     try {\n// //       const response = await axios.get(\n// //         \"http://localhost:3000/api/mainPage/train-schedules\",\n// //         {\n// //           params: {\n// //             originStation,\n// //             destinationStation,\n// //             travelDate,\n// //           },\n// //         }\n// //       );\n// //       setSchedules(response.data.trainSchedules);\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules. Try again later.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <div className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-links\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"time\">{new Date().toLocaleTimeString()}</div>\n// //       </div>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n\n// //         <button className=\"search-button\" onClick={handleSearch}>\n// //           Search\n// //         </button>\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n\n// //       {/* Train Schedule Results */}\n// //       {schedules.length > 0 && (\n// //         <div className=\"results-container\">\n// //           <h3>Available Train Schedules</h3>\n// //           <table className=\"schedules-table\">\n// //             <thead>\n// //               <tr>\n// //                 <th>Train ID</th>\n// //                 <th>Origin</th>\n// //                 <th>Destination</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>{schedule.OriginStation}</td>\n// //                   <td>{schedule.DestinationStation}</td>\n// //                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"../styles.css\";\n\n// const MainPage = () => {\n//   const [stations, setStations] = useState([]);\n//   const [originStation, setOriginStation] = useState(\"\");\n//   const [destinationStation, setDestinationStation] = useState(\"\");\n//   const [travelDate, setTravelDate] = useState(\"\");\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [trainDetails, setTrainDetails] = useState(null); // Train details\n//   const [sortedSchedules, setSortedSchedules] = useState([]);\n//   const [sortField, setSortField] = useState(\"\");\n\n//   // Fetch available stations\n//   useEffect(() => {\n//     const fetchStations = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:3000/api/stations\");\n//         setStations(response.data.stations);\n//       } catch (err) {\n//         console.error(\"Error fetching stations:\", err);\n//       }\n//     };\n//     fetchStations();\n//   }, []);\n\n//   const handleSort = (field) => {\n//     const sortedData = [...schedules].sort((a, b) => {\n//       const dateA = new Date(a[field]);\n//       const dateB = new Date(b[field]);\n//       return dateA - dateB;\n//     });\n\n//     setSortedSchedules(sortedData);\n//     setSortField(field);\n//   };\n\n//   // Handle Search Train Schedules\n//   const handleSearch = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError(\"Please select all fields.\");\n//       return;\n//     }\n//     setError(\"\");\n\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/api/mainPage/train-schedules\",\n//         {\n//           params: { originStation, destinationStation, travelDate },\n//         }\n//       );\n//       setSchedules(response.data.trainSchedules);\n//       setSortedSchedules(response.data.trainSchedules);\n//     } catch (err) {\n//       console.error(\"Error fetching train schedules:\", err);\n//       setError(\"Failed to fetch train schedules. Try again later.\");\n//     }\n//   };\n\n//   // Fetch Train Details\n//   const fetchTrainDetails = async (scheduleID) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n//       );\n//       setTrainDetails(response.data); // Set train details\n//       console.log(response.data.Stops);\n//     } catch (err) {\n//       console.error(\"Error fetching train details:\", err);\n//       setError(\"Failed to fetch train details. Try again later.\");\n//     }\n//   };\n\n//   const getStopsBetweenStations = (stops) => {\n//     // Find the indices of startStation and endStation\n//     const startIndex = stops.findIndex(\n//       (stop) => stop.StationName === originStation\n//     );\n//     const endIndex = stops.findIndex(\n//       (stop) => stop.StationName === destinationStation\n//     );\n\n//     // If stations are not found or in the wrong order\n//     if (startIndex === -1 || endIndex === -1 || startIndex > endIndex) {\n//       console.error(\"Invalid start or destination station.\");\n//       return [];\n//     }\n\n//     // Return the subarray of stops\n//     return stops.slice(startIndex, endIndex + 1);\n//   };\n\n//   return (\n//     <div className=\"main-page\">\n//       <div className=\"header\">\n//         <h1>Railway Reservation System</h1>\n//         <div className=\"header-links\">\n//           <a href=\"/login\">Sign In</a>\n//           <a href=\"/signup\">Sign Up</a>\n//         </div>\n//         <div className=\"time\">{new Date().toLocaleTimeString()}</div>\n//       </div>\n\n//       <div className=\"search-container\">\n//         <h2>Search Train</h2>\n//         <select\n//           value={originStation}\n//           onChange={(e) => setOriginStation(e.target.value)}\n//         >\n//           <option value=\"\">--Source Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={destinationStation}\n//           onChange={(e) => setDestinationStation(e.target.value)}\n//         >\n//           <option value=\"\">--Destination Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <input\n//           type=\"date\"\n//           value={travelDate}\n//           onChange={(e) => setTravelDate(e.target.value)}\n//         />\n\n//         <button className=\"search-button\" onClick={handleSearch}>\n//           Search\n//         </button>\n//         {error && <p className=\"error\">{error}</p>}\n//       </div>\n\n//       <div className=\"sorting-buttons\">\n//         <button onClick={() => handleSort(\"ArrivalDateTime\")}>\n//           Sort by Arrival Time\n//         </button>\n//         <button onClick={() => handleSort(\"DepartureDateTime\")}>\n//           Sort by Departure Time\n//         </button>\n//       </div>\n\n//       {/* Train Schedule Results */}\n//       {schedules.length > 0 && (\n//         <div className=\"results-container\">\n//           <h3>Available Train Schedules</h3>\n//           <table className=\"schedules-table\">\n//             <thead>\n//               <tr>\n//                 <th>Train ID</th>\n//                 <th>Origin</th>\n//                 <th>Destination</th>\n//                 <th>Departure Time</th>\n//                 <th>Arrival Time</th>\n//                 <th>Details</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>{schedule.OriginStation}</td>\n//                   <td>{schedule.DestinationStation}</td>\n//                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n//                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>\n//                     <button\n//                       className=\"details-button\"\n//                       onClick={() => fetchTrainDetails(schedule.ScheduleID)}\n//                     >\n//                       View Details\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {/* Train Details */}\n//       {trainDetails && ( \n//         <div className=\"train-details\">\n//           <h3>Train Details</h3>\n//           <p><strong>Fare:</strong> ${trainDetails.BaseFare}</p>\n//           <h4>Stops:</h4>\n//           <ul>\n//             {/* {trainDetails.Stops.map((stop, index) => (\n//               <li key={index}>\n//                 {stop.StationName} - Arrival:{\" \"}\n//                 {new Date(stop.ArrivalDateTime).toLocaleString()}, Departure:{\" \"}\n//                 {new Date(stop.DepartureDateTime).toLocaleString()}\n//               </li>\n//             ))} */}\n//           </ul>\n//           <tbody>\n//         {getStopsBetweenStations(trainDetails.Stops).map((stop, idx) => (\n//     <tr key={idx}>\n//       <td>{stop.StationName}</td>\n//       <td>{new Date(stop.ArrivalDateTime).toLocaleString()}</td>\n//       <td>{new Date(stop.DepartureDateTime).toLocaleString()}</td>\n//       {/* <td>${stop.BaseFare.toFixed(2)}</td> */}\n//     </tr>\n//   ))}\n// </tbody>\n\n//         </div>\n\n//       )}\n//     </div>\n//   );\n// };\n\n// export default MainPage;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"../styles.css\";\n\n// const MainPage = () => {\n//   const [stations, setStations] = useState([]);\n//   const [originStation, setOriginStation] = useState(\"\");\n//   const [destinationStation, setDestinationStation] = useState(\"\");\n//   const [travelDate, setTravelDate] = useState(\"\");\n//   const [schedules, setSchedules] = useState([]);\n//   const [sortedSchedules, setSortedSchedules] = useState([]);\n//   const [trainDetails, setTrainDetails] = useState(null);\n//   const [error, setError] = useState(\"\");\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [time, setTime] = useState(\"\");\n\n//   // Fetch available stations\n//   useEffect(() => {\n//     const fetchStations = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:3000/api/stations\");\n//         setStations(response.data.stations);\n//       } catch (err) {\n//         console.error(\"Error fetching stations:\", err);\n//         setError(\"Failed to load stations.\");\n//       }\n//     };\n\n//     fetchStations();\n\n//     const interval = setInterval(() => {\n//       setTime(new Date().toLocaleTimeString());\n//     }, 1000);\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   // Handle Search Train Schedules\n//   const handleSearch = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError(\"Please select all fields.\");\n//       return;\n//     }\n//     setError(\"\");\n\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/api/mainPage/train-schedules\",\n//         {\n//           params: { originStation, destinationStation, travelDate },\n//         }\n//       );\n//       setSchedules(response.data.trainSchedules);\n//       setSortedSchedules(response.data.trainSchedules);\n//     } catch (err) {\n//       console.error(\"Error fetching train schedules:\", err);\n//       setError(\"Failed to fetch train schedules.\");\n//     }\n//   };\n\n//   // Sorting Logic\n//   const handleSort = (field) => {\n//     const order = sortField === field && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n//     const sortedData = [...schedules].sort((a, b) => {\n//       const dateA = new Date(a[field]);\n//       const dateB = new Date(b[field]);\n//       return order === \"asc\" ? dateA - dateB : dateB - dateA;\n//     });\n\n//     setSortedSchedules(sortedData);\n//     setSortField(field);\n//     setSortOrder(order);\n//   };\n\n//   // Fetch Train Details\n//   const fetchTrainDetails = async (scheduleID) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n//       );\n//       setTrainDetails(response.data);\n//     } catch (err) {\n//       console.error(\"Error fetching train details:\", err);\n//       setError(\"Failed to fetch train details.\");\n//     }\n//   };\n\n//   const getFare =  async (scheduleID) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n//       );\n//       return getFareForStations(response.data);\n//     } catch (err) {\n//       console.error(\"Error fetching train details:\", err);\n//       setError(\"Failed to fetch train details.\");\n//     }\n//   };\n\n//   // Get Stops between Source and Destination\n//   const getStopsBetweenStations = (stops) => {\n//     const startIndex = stops.findIndex(\n//       (stop) => stop.StationName === originStation\n//     );\n//     const endIndex = stops.findIndex(\n//       (stop) => stop.StationName === destinationStation\n//     );\n\n//     if (startIndex === -1 || endIndex === -1 || startIndex > endIndex) {\n//       return stops; // Fallback to showing all stops\n//     }\n//     return stops.slice(startIndex, endIndex + 1);\n//   };\n\n//   const getFareForStations = (responseData) => {\n//     const stopCount = responseData.Stops.length - 1;\n//     const farePerStop = responseData.BaseFare / stopCount;\n\n//     const x = (getStopsBetweenStations(responseData.Stops).length - 1 )* farePerStop;\n//     return x;\n//   }\n\n//   return (\n//     <div className=\"main-page\">\n//       {/* Header */}\n//       <div className=\"header\">\n//         <h1>Railway Reservation System</h1>\n//         <div className=\"header-links\">\n//           <a href=\"/login\">Sign In</a>\n//           <a href=\"/signup\">Sign Up</a>\n//         </div>\n//         <div className=\"time\">{time}</div>\n//       </div>\n\n//       {/* Search Form */}\n//       <div className=\"search-container\">\n//         <h2>Search Train</h2>\n//         <select value={originStation} onChange={(e) => setOriginStation(e.target.value)}>\n//           <option value=\"\">--Source Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n//           <option value=\"\">--Destination Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <input type=\"date\" value={travelDate} onChange={(e) => setTravelDate(e.target.value)} />\n//         <button className=\"search-button\" onClick={handleSearch}>Search</button>\n//         {error && <p className=\"error\">{error}</p>}\n//       </div>\n\n//       {/* Train Schedules */}\n//       {sortedSchedules.length > 0 && (\n//         <div className=\"results-container\">\n//           <h3>Available Train Schedules</h3>\n//            {/* Sorting Buttons */}\n//       <div className=\"sorting-buttons\">\n//         <button onClick={() => handleSort(\"ArrivalDateTime\")}>Sort by Arrival Time</button>\n//         <button onClick={() => handleSort(\"DepartureDateTime\")}>Sort by Departure Time</button>\n//       </div>\n//           <table className=\"schedules-table\">\n//             <thead>\n//               <tr>\n//                 <th>Train ID</th>\n//                 <th>Transit Line</th>\n//                 <th>Departure Time</th>\n//                 <th>Arrival Time</th>\n//                 <th>Fare</th>\n//                 <th>Details</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n//                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>{getFare(schedule.ScheduleID)}</td>\n//                   <td>\n//                     <button onClick={() => fetchTrainDetails(schedule.ScheduleID)}>\n//                       View Details\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {/* Train Details */}\n//       {trainDetails && (\n//         <div className=\"train-details\">\n//           <h3>Train Details</h3>\n//           {/* <p><strong>Fare:</strong> ${trainDetails.BaseFare}</p> */}\n//           <p><strong>Fare:</strong> ${getFareForStations(trainDetails)}</p>\n//           <h4>Stops:</h4>\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Station</th>\n//                 <th>Arrival</th>\n//                 <th>Departure</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {getStopsBetweenStations(trainDetails.Stops).map((stop, idx) => (\n//                 <tr key={idx}>\n//                   <td>{stop.StationName}</td>\n//                   <td>{new Date(stop.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>{new Date(stop.DepartureDateTime).toLocaleString()}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default MainPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n// import \"../styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [originStation, setOriginStation] = useState(\"\");\n  const [destinationStation, setDestinationStation] = useState(\"\");\n  const [travelDate, setTravelDate] = useState(\"\");\n  const [schedules, setSchedules] = useState([]);\n  const [sortedSchedules, setSortedSchedules] = useState([]);\n  const [trainDetails, setTrainDetails] = useState(null);\n  const [sortField, setSortField] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n\n  // Fetch available stations\n  useEffect(() => {\n    const fetchStations = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:3000/api/stations\");\n        setStations(response.data.stations);\n      } catch (err) {\n        console.error(\"Error fetching stations:\", err);\n        setError(\"Failed to fetch stations.\");\n      }\n    };\n    fetchStations();\n\n    // Real-time clock\n    const interval = setInterval(() => {\n      setTime(new Date().toLocaleTimeString());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Sort train schedules\n  const handleSort = field => {\n    const sortedData = [...schedules].sort((a, b) => {\n      const timeA = new Date(a[field]);\n      const timeB = new Date(b[field]);\n      return timeA - timeB;\n    });\n    setSortedSchedules(sortedData);\n    setSortField(field);\n  };\n\n  // Handle search for train schedules\n  const handleSearch = async () => {\n    if (!originStation || !destinationStation || !travelDate) {\n      setError(\"Please fill all fields.\");\n      return;\n    }\n    setError(\"\");\n    try {\n      const response = await axios.get(\"http://localhost:3000/api/mainPage/train-schedules\", {\n        params: {\n          originStation,\n          destinationStation,\n          travelDate\n        }\n      });\n      setSchedules(response.data.trainSchedules);\n      setSortedSchedules(response.data.trainSchedules);\n    } catch (err) {\n      console.error(\"Error fetching train schedules:\", err);\n      setError(\"Failed to fetch train schedules.\");\n    }\n  };\n\n  // Fetch train details\n  const fetchTrainDetails = async scheduleID => {\n    try {\n      const response = await axios.get(`http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`);\n      setTrainDetails(response.data);\n    } catch (err) {\n      console.error(\"Error fetching train details:\", err);\n      setError(\"Failed to fetch train details.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Railway Reservation System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-links\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/login\",\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/signup\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time\",\n        children: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1074,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Search Train\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: originStation,\n        onChange: e => setOriginStation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Source Station--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1087,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1089,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: destinationStation,\n        onChange: e => setDestinationStation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Destination Station--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1099,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: travelDate,\n        onChange: e => setTravelDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1084,\n      columnNumber: 7\n    }, this), schedules.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sorting-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSort(\"ArrivalDateTime\"),\n        children: \"Sort by Arrival Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSort(\"DepartureDateTime\"),\n        children: \"Sort by Departure Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1121,\n      columnNumber: 9\n    }, this), sortedSchedules.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Available Train Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"schedules-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Train ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Origin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Destination\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1141,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1142,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1143,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1137,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: sortedSchedules.map(schedule => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TrainID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1149,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: originStation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: destinationStation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(schedule.DepartureDateTime).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1152,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(schedule.ArrivalDateTime).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1153,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"details-button\",\n                onClick: () => fetchTrainDetails(schedule.ScheduleID),\n                children: \"View Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1155,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1154,\n              columnNumber: 19\n            }, this)]\n          }, schedule.ScheduleID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1148,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1133,\n      columnNumber: 9\n    }, this), trainDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"train-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Train Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Fare:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1174,\n          columnNumber: 13\n        }, this), \" $\", trainDetails.BaseFare]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Stops:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: trainDetails.Stops.map((stop, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [stop.StationName, \" - Arrival:\", \" \", new Date(stop.ArrivalDateTime).toLocaleString(), \", Departure:\", \" \", new Date(stop.DepartureDateTime).toLocaleString()]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1179,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1171,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1072,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"BSIptZjbEv/hr6x7C9OcaTe2otI=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","MainPage","_s","stations","setStations","originStation","setOriginStation","destinationStation","setDestinationStation","travelDate","setTravelDate","schedules","setSchedules","sortedSchedules","setSortedSchedules","trainDetails","setTrainDetails","sortField","setSortField","error","setError","time","setTime","fetchStations","response","get","data","err","console","interval","setInterval","Date","toLocaleTimeString","clearInterval","handleSort","field","sortedData","sort","a","b","timeA","timeB","handleSearch","params","trainSchedules","fetchTrainDetails","scheduleID","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","value","onChange","e","target","map","station","StationName","StationID","type","onClick","length","schedule","TrainID","DepartureDateTime","toLocaleString","ArrivalDateTime","ScheduleID","BaseFare","Stops","stop","index","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/pages/MainPage.js"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n\n// //   // Fetch stations from the backend API\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     fetchStations();\n// //   }, []);\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div id=\"real-time-clock\"></div>\n// //       </header>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={sourceStation}\n// //           onChange={(e) => setSourceStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input type=\"date\" placeholder=\"Select Date\" />\n\n// //         <button className=\"search-button\">Search</button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\"; // Import the CSS file for styling\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations from backend API\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   // Real-time clock\n// //   useEffect(() => {\n// //     fetchStations();\n// //     const interval = setInterval(() => {\n// //       const now = new Date();\n// //       setTime(now.toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       {/* Header */}\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       {/* Train Search Container */}\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={sourceStation}\n// //           onChange={(e) => setSourceStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input type=\"date\" placeholder=\"Select Date\" />\n// //         <button className=\"search-button\">Search</button>\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get(\"/stations\");\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error(\"Error fetching stations:\", err);\n// //       setError(\"Failed to load stations. Please try again.\");\n// //     }\n// //   };\n\n// //   // Real-time clock\n// //   useEffect(() => {\n// //     fetchStations();\n// //     const interval = setInterval(() => {\n// //       const now = new Date();\n// //       setTime(now.toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   // Fetch train schedules\n// //   const handleSearch = async () => {\n// //     if (!sourceStation || !destinationStation || !travelDate) {\n// //       setError(\"Please fill all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear error\n\n// //     try {\n// //       const response = await axiosInstance.get(\"/train-schedules\", {\n// //         params: {\n// //           originStation: sourceStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setSchedules(response.data.trainSchedules);\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"No train schedules available.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       {/* Header */}\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       {/* Search Form */}\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select value={sourceStation} onChange={(e) => setSourceStation(e.target.value)}>\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button className=\"search-button\" onClick={handleSearch}>Search</button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n\n// //       {/* Display Schedules */}\n// //       {schedules.length > 0 && (\n// //         <div className=\"schedules-table\">\n// //           <h2>Available Train Schedules</h2>\n// //           <table>\n// //             <thead>\n// //               <tr>\n// //                 <th>Train ID</th>\n// //                 <th>Transit Line</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //                 <th>Travel Time</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n// // import \"../styles/MainPage.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [sourceStation, setSourceStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [error, setError] = useState(\"\");\n// //   const [time, setTime] = useState(\"\");\n\n// //   // Fetch stations\n// //   useEffect(() => {\n// //     const fetchStations = async () => {\n// //       try {\n// //         const response = await axiosInstance.get(\"/stations\");\n// //         setStations(response.data.stations);\n// //       } catch (err) {\n// //         console.error(\"Error fetching stations:\", err);\n// //         setError(\"Failed to load stations.\");\n// //       }\n// //     };\n// //     fetchStations();\n\n// //     // Real-time clock\n// //     const interval = setInterval(() => {\n// //       setTime(new Date().toLocaleTimeString());\n// //     }, 1000);\n// //     return () => clearInterval(interval);\n// //   }, []);\n\n// //   const handleSearch = async () => {\n// //     if (!sourceStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear any previous errors\n  \n// //     try {\n// //       const response = await axiosInstance.get(\"/mainPage/train-schedules\", {\n// //         params: {\n// //           sourceStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       console.log(\"Train Schedules:\", response.data.schedules);\n// //       // Here you can set state to display the schedules in a table\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules.\");\n// //     }\n// //   };\n  \n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <header className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-actions\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"real-time-clock\">{time}</div>\n// //       </header>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select value={sourceStation} onChange={(e) => setSourceStation(e.target.value)}>\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button className=\"search-button\" onClick={handleSearch}>\n// //           Search\n// //         </button>\n\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import \"../styles.css\";\n\n// // const MainPage = () => {\n// //   const [stations, setStations] = useState([]);\n// //   const [originStation, setOriginStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n\n// //   // Fetch available stations\n// //   useEffect(() => {\n// //     const fetchStations = async () => {\n// //       try {\n// //         const response = await axios.get(\"http://localhost:3000/api/stations\");\n// //         setStations(response.data.stations);\n// //       } catch (err) {\n// //         console.error(\"Error fetching stations:\", err);\n// //       }\n// //     };\n// //     fetchStations();\n// //   }, []);\n\n// //   // Handle Search Train Schedules\n// //   const handleSearch = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     setError(\"\"); // Clear any previous errors\n\n// //     try {\n// //       const response = await axios.get(\n// //         \"http://localhost:3000/api/mainPage/train-schedules\",\n// //         {\n// //           params: {\n// //             originStation,\n// //             destinationStation,\n// //             travelDate,\n// //           },\n// //         }\n// //       );\n// //       setSchedules(response.data.trainSchedules);\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules. Try again later.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main-page\">\n// //       <div className=\"header\">\n// //         <h1>Railway Reservation System</h1>\n// //         <div className=\"header-links\">\n// //           <a href=\"/login\">Sign In</a>\n// //           <a href=\"/signup\">Sign Up</a>\n// //         </div>\n// //         <div className=\"time\">{new Date().toLocaleTimeString()}</div>\n// //       </div>\n\n// //       <div className=\"search-container\">\n// //         <h2>Search Train</h2>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Source Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">--Destination Station--</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n\n// //         <button className=\"search-button\" onClick={handleSearch}>\n// //           Search\n// //         </button>\n// //         {error && <p className=\"error\">{error}</p>}\n// //       </div>\n\n// //       {/* Train Schedule Results */}\n// //       {schedules.length > 0 && (\n// //         <div className=\"results-container\">\n// //           <h3>Available Train Schedules</h3>\n// //           <table className=\"schedules-table\">\n// //             <thead>\n// //               <tr>\n// //                 <th>Train ID</th>\n// //                 <th>Origin</th>\n// //                 <th>Destination</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>{schedule.OriginStation}</td>\n// //                   <td>{schedule.DestinationStation}</td>\n// //                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default MainPage;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"../styles.css\";\n\n// const MainPage = () => {\n//   const [stations, setStations] = useState([]);\n//   const [originStation, setOriginStation] = useState(\"\");\n//   const [destinationStation, setDestinationStation] = useState(\"\");\n//   const [travelDate, setTravelDate] = useState(\"\");\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [trainDetails, setTrainDetails] = useState(null); // Train details\n//   const [sortedSchedules, setSortedSchedules] = useState([]);\n//   const [sortField, setSortField] = useState(\"\");\n\n//   // Fetch available stations\n//   useEffect(() => {\n//     const fetchStations = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:3000/api/stations\");\n//         setStations(response.data.stations);\n//       } catch (err) {\n//         console.error(\"Error fetching stations:\", err);\n//       }\n//     };\n//     fetchStations();\n//   }, []);\n\n//   const handleSort = (field) => {\n//     const sortedData = [...schedules].sort((a, b) => {\n//       const dateA = new Date(a[field]);\n//       const dateB = new Date(b[field]);\n//       return dateA - dateB;\n//     });\n\n//     setSortedSchedules(sortedData);\n//     setSortField(field);\n//   };\n\n//   // Handle Search Train Schedules\n//   const handleSearch = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError(\"Please select all fields.\");\n//       return;\n//     }\n//     setError(\"\");\n\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/api/mainPage/train-schedules\",\n//         {\n//           params: { originStation, destinationStation, travelDate },\n//         }\n//       );\n//       setSchedules(response.data.trainSchedules);\n//       setSortedSchedules(response.data.trainSchedules);\n//     } catch (err) {\n//       console.error(\"Error fetching train schedules:\", err);\n//       setError(\"Failed to fetch train schedules. Try again later.\");\n//     }\n//   };\n\n//   // Fetch Train Details\n//   const fetchTrainDetails = async (scheduleID) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n//       );\n//       setTrainDetails(response.data); // Set train details\n//       console.log(response.data.Stops);\n//     } catch (err) {\n//       console.error(\"Error fetching train details:\", err);\n//       setError(\"Failed to fetch train details. Try again later.\");\n//     }\n//   };\n\n//   const getStopsBetweenStations = (stops) => {\n//     // Find the indices of startStation and endStation\n//     const startIndex = stops.findIndex(\n//       (stop) => stop.StationName === originStation\n//     );\n//     const endIndex = stops.findIndex(\n//       (stop) => stop.StationName === destinationStation\n//     );\n  \n//     // If stations are not found or in the wrong order\n//     if (startIndex === -1 || endIndex === -1 || startIndex > endIndex) {\n//       console.error(\"Invalid start or destination station.\");\n//       return [];\n//     }\n  \n//     // Return the subarray of stops\n//     return stops.slice(startIndex, endIndex + 1);\n//   };\n\n//   return (\n//     <div className=\"main-page\">\n//       <div className=\"header\">\n//         <h1>Railway Reservation System</h1>\n//         <div className=\"header-links\">\n//           <a href=\"/login\">Sign In</a>\n//           <a href=\"/signup\">Sign Up</a>\n//         </div>\n//         <div className=\"time\">{new Date().toLocaleTimeString()}</div>\n//       </div>\n\n//       <div className=\"search-container\">\n//         <h2>Search Train</h2>\n//         <select\n//           value={originStation}\n//           onChange={(e) => setOriginStation(e.target.value)}\n//         >\n//           <option value=\"\">--Source Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={destinationStation}\n//           onChange={(e) => setDestinationStation(e.target.value)}\n//         >\n//           <option value=\"\">--Destination Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <input\n//           type=\"date\"\n//           value={travelDate}\n//           onChange={(e) => setTravelDate(e.target.value)}\n//         />\n\n//         <button className=\"search-button\" onClick={handleSearch}>\n//           Search\n//         </button>\n//         {error && <p className=\"error\">{error}</p>}\n//       </div>\n\n//       <div className=\"sorting-buttons\">\n//         <button onClick={() => handleSort(\"ArrivalDateTime\")}>\n//           Sort by Arrival Time\n//         </button>\n//         <button onClick={() => handleSort(\"DepartureDateTime\")}>\n//           Sort by Departure Time\n//         </button>\n//       </div>\n\n//       {/* Train Schedule Results */}\n//       {schedules.length > 0 && (\n//         <div className=\"results-container\">\n//           <h3>Available Train Schedules</h3>\n//           <table className=\"schedules-table\">\n//             <thead>\n//               <tr>\n//                 <th>Train ID</th>\n//                 <th>Origin</th>\n//                 <th>Destination</th>\n//                 <th>Departure Time</th>\n//                 <th>Arrival Time</th>\n//                 <th>Details</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>{schedule.OriginStation}</td>\n//                   <td>{schedule.DestinationStation}</td>\n//                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n//                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>\n//                     <button\n//                       className=\"details-button\"\n//                       onClick={() => fetchTrainDetails(schedule.ScheduleID)}\n//                     >\n//                       View Details\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {/* Train Details */}\n//       {trainDetails && ( \n//         <div className=\"train-details\">\n//           <h3>Train Details</h3>\n//           <p><strong>Fare:</strong> ${trainDetails.BaseFare}</p>\n//           <h4>Stops:</h4>\n//           <ul>\n//             {/* {trainDetails.Stops.map((stop, index) => (\n//               <li key={index}>\n//                 {stop.StationName} - Arrival:{\" \"}\n//                 {new Date(stop.ArrivalDateTime).toLocaleString()}, Departure:{\" \"}\n//                 {new Date(stop.DepartureDateTime).toLocaleString()}\n//               </li>\n//             ))} */}\n//           </ul>\n//           <tbody>\n//         {getStopsBetweenStations(trainDetails.Stops).map((stop, idx) => (\n//     <tr key={idx}>\n//       <td>{stop.StationName}</td>\n//       <td>{new Date(stop.ArrivalDateTime).toLocaleString()}</td>\n//       <td>{new Date(stop.DepartureDateTime).toLocaleString()}</td>\n//       {/* <td>${stop.BaseFare.toFixed(2)}</td> */}\n//     </tr>\n//   ))}\n// </tbody>\n\n//         </div>\n        \n//       )}\n//     </div>\n//   );\n// };\n\n// export default MainPage;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"../styles.css\";\n\n// const MainPage = () => {\n//   const [stations, setStations] = useState([]);\n//   const [originStation, setOriginStation] = useState(\"\");\n//   const [destinationStation, setDestinationStation] = useState(\"\");\n//   const [travelDate, setTravelDate] = useState(\"\");\n//   const [schedules, setSchedules] = useState([]);\n//   const [sortedSchedules, setSortedSchedules] = useState([]);\n//   const [trainDetails, setTrainDetails] = useState(null);\n//   const [error, setError] = useState(\"\");\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [time, setTime] = useState(\"\");\n\n//   // Fetch available stations\n//   useEffect(() => {\n//     const fetchStations = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:3000/api/stations\");\n//         setStations(response.data.stations);\n//       } catch (err) {\n//         console.error(\"Error fetching stations:\", err);\n//         setError(\"Failed to load stations.\");\n//       }\n//     };\n\n//     fetchStations();\n\n//     const interval = setInterval(() => {\n//       setTime(new Date().toLocaleTimeString());\n//     }, 1000);\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   // Handle Search Train Schedules\n//   const handleSearch = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError(\"Please select all fields.\");\n//       return;\n//     }\n//     setError(\"\");\n\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/api/mainPage/train-schedules\",\n//         {\n//           params: { originStation, destinationStation, travelDate },\n//         }\n//       );\n//       setSchedules(response.data.trainSchedules);\n//       setSortedSchedules(response.data.trainSchedules);\n//     } catch (err) {\n//       console.error(\"Error fetching train schedules:\", err);\n//       setError(\"Failed to fetch train schedules.\");\n//     }\n//   };\n\n//   // Sorting Logic\n//   const handleSort = (field) => {\n//     const order = sortField === field && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n//     const sortedData = [...schedules].sort((a, b) => {\n//       const dateA = new Date(a[field]);\n//       const dateB = new Date(b[field]);\n//       return order === \"asc\" ? dateA - dateB : dateB - dateA;\n//     });\n\n//     setSortedSchedules(sortedData);\n//     setSortField(field);\n//     setSortOrder(order);\n//   };\n\n//   // Fetch Train Details\n//   const fetchTrainDetails = async (scheduleID) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n//       );\n//       setTrainDetails(response.data);\n//     } catch (err) {\n//       console.error(\"Error fetching train details:\", err);\n//       setError(\"Failed to fetch train details.\");\n//     }\n//   };\n\n//   const getFare =  async (scheduleID) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n//       );\n//       return getFareForStations(response.data);\n//     } catch (err) {\n//       console.error(\"Error fetching train details:\", err);\n//       setError(\"Failed to fetch train details.\");\n//     }\n//   };\n\n//   // Get Stops between Source and Destination\n//   const getStopsBetweenStations = (stops) => {\n//     const startIndex = stops.findIndex(\n//       (stop) => stop.StationName === originStation\n//     );\n//     const endIndex = stops.findIndex(\n//       (stop) => stop.StationName === destinationStation\n//     );\n\n//     if (startIndex === -1 || endIndex === -1 || startIndex > endIndex) {\n//       return stops; // Fallback to showing all stops\n//     }\n//     return stops.slice(startIndex, endIndex + 1);\n//   };\n\n//   const getFareForStations = (responseData) => {\n//     const stopCount = responseData.Stops.length - 1;\n//     const farePerStop = responseData.BaseFare / stopCount;\n\n//     const x = (getStopsBetweenStations(responseData.Stops).length - 1 )* farePerStop;\n//     return x;\n//   }\n\n//   return (\n//     <div className=\"main-page\">\n//       {/* Header */}\n//       <div className=\"header\">\n//         <h1>Railway Reservation System</h1>\n//         <div className=\"header-links\">\n//           <a href=\"/login\">Sign In</a>\n//           <a href=\"/signup\">Sign Up</a>\n//         </div>\n//         <div className=\"time\">{time}</div>\n//       </div>\n\n//       {/* Search Form */}\n//       <div className=\"search-container\">\n//         <h2>Search Train</h2>\n//         <select value={originStation} onChange={(e) => setOriginStation(e.target.value)}>\n//           <option value=\"\">--Source Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n//           <option value=\"\">--Destination Station--</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <input type=\"date\" value={travelDate} onChange={(e) => setTravelDate(e.target.value)} />\n//         <button className=\"search-button\" onClick={handleSearch}>Search</button>\n//         {error && <p className=\"error\">{error}</p>}\n//       </div>\n\n\n//       {/* Train Schedules */}\n//       {sortedSchedules.length > 0 && (\n//         <div className=\"results-container\">\n//           <h3>Available Train Schedules</h3>\n//            {/* Sorting Buttons */}\n//       <div className=\"sorting-buttons\">\n//         <button onClick={() => handleSort(\"ArrivalDateTime\")}>Sort by Arrival Time</button>\n//         <button onClick={() => handleSort(\"DepartureDateTime\")}>Sort by Departure Time</button>\n//       </div>\n//           <table className=\"schedules-table\">\n//             <thead>\n//               <tr>\n//                 <th>Train ID</th>\n//                 <th>Transit Line</th>\n//                 <th>Departure Time</th>\n//                 <th>Arrival Time</th>\n//                 <th>Fare</th>\n//                 <th>Details</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {sortedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n//                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>{getFare(schedule.ScheduleID)}</td>\n//                   <td>\n//                     <button onClick={() => fetchTrainDetails(schedule.ScheduleID)}>\n//                       View Details\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {/* Train Details */}\n//       {trainDetails && (\n//         <div className=\"train-details\">\n//           <h3>Train Details</h3>\n//           {/* <p><strong>Fare:</strong> ${trainDetails.BaseFare}</p> */}\n//           <p><strong>Fare:</strong> ${getFareForStations(trainDetails)}</p>\n//           <h4>Stops:</h4>\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Station</th>\n//                 <th>Arrival</th>\n//                 <th>Departure</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {getStopsBetweenStations(trainDetails.Stops).map((stop, idx) => (\n//                 <tr key={idx}>\n//                   <td>{stop.StationName}</td>\n//                   <td>{new Date(stop.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>{new Date(stop.DepartureDateTime).toLocaleString()}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default MainPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n// import \"../styles.css\";\n\nconst MainPage = () => {\n  const [stations, setStations] = useState([]);\n  const [originStation, setOriginStation] = useState(\"\");\n  const [destinationStation, setDestinationStation] = useState(\"\");\n  const [travelDate, setTravelDate] = useState(\"\");\n  const [schedules, setSchedules] = useState([]);\n  const [sortedSchedules, setSortedSchedules] = useState([]);\n  const [trainDetails, setTrainDetails] = useState(null);\n  const [sortField, setSortField] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n\n  // Fetch available stations\n  useEffect(() => {\n    const fetchStations = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:3000/api/stations\");\n        setStations(response.data.stations);\n      } catch (err) {\n        console.error(\"Error fetching stations:\", err);\n        setError(\"Failed to fetch stations.\");\n      }\n    };\n\n    fetchStations();\n\n    // Real-time clock\n    const interval = setInterval(() => {\n      setTime(new Date().toLocaleTimeString());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Sort train schedules\n  const handleSort = (field) => {\n    const sortedData = [...schedules].sort((a, b) => {\n      const timeA = new Date(a[field]);\n      const timeB = new Date(b[field]);\n      return timeA - timeB;\n    });\n    setSortedSchedules(sortedData);\n    setSortField(field);\n  };\n\n  // Handle search for train schedules\n  const handleSearch = async () => {\n    if (!originStation || !destinationStation || !travelDate) {\n      setError(\"Please fill all fields.\");\n      return;\n    }\n    setError(\"\");\n\n    try {\n      const response = await axios.get(\n        \"http://localhost:3000/api/mainPage/train-schedules\",\n        {\n          params: { originStation, destinationStation, travelDate },\n        }\n      );\n      setSchedules(response.data.trainSchedules);\n      setSortedSchedules(response.data.trainSchedules);\n    } catch (err) {\n      console.error(\"Error fetching train schedules:\", err);\n      setError(\"Failed to fetch train schedules.\");\n    }\n  };\n\n  // Fetch train details\n  const fetchTrainDetails = async (scheduleID) => {\n    try {\n      const response = await axios.get(\n        `http://localhost:3000/api/mainPage/train-schedules/${scheduleID}/stops`\n      );\n      setTrainDetails(response.data);\n    } catch (err) {\n      console.error(\"Error fetching train details:\", err);\n      setError(\"Failed to fetch train details.\");\n    }\n  };\n\n  return (\n    <div className=\"main-page\">\n      {/* Header */}\n      <div className=\"header\">\n        <h1>Railway Reservation System</h1>\n        <div className=\"header-links\">\n          <a href=\"/login\">Sign In</a>\n          <a href=\"/signup\">Sign Up</a>\n        </div>\n        <div className=\"time\">{time}</div>\n      </div>\n\n      {/* Search Container */}\n      <div className=\"search-container\">\n        <h2>Search Train</h2>\n        <select value={originStation} onChange={(e) => setOriginStation(e.target.value)}>\n          <option value=\"\">--Source Station--</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n\n        <select\n          value={destinationStation}\n          onChange={(e) => setDestinationStation(e.target.value)}\n        >\n          <option value=\"\">--Destination Station--</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n\n        <input\n          type=\"date\"\n          value={travelDate}\n          onChange={(e) => setTravelDate(e.target.value)}\n        />\n\n        <button className=\"search-button\" onClick={handleSearch}>\n          Search\n        </button>\n        {error && <p className=\"error\">{error}</p>}\n      </div>\n\n      {/* Sorting Buttons */}\n      {schedules.length > 0 && (\n        <div className=\"sorting-buttons\">\n          <button onClick={() => handleSort(\"ArrivalDateTime\")}>\n            Sort by Arrival Time\n          </button>\n          <button onClick={() => handleSort(\"DepartureDateTime\")}>\n            Sort by Departure Time\n          </button>\n        </div>\n      )}\n\n      {/* Display Train Schedules */}\n      {sortedSchedules.length > 0 && (\n        <div className=\"results-container\">\n          <h3>Available Train Schedules</h3>\n          <table className=\"schedules-table\">\n            <thead>\n              <tr>\n                <th>Train ID</th>\n                <th>Origin</th>\n                <th>Destination</th>\n                <th>Departure Time</th>\n                <th>Arrival Time</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedSchedules.map((schedule) => (\n                <tr key={schedule.ScheduleID}>\n                  <td>{schedule.TrainID}</td>\n                  <td>{originStation}</td>\n                  <td>{destinationStation}</td>\n                  <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n                  <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n                  <td>\n                    <button\n                      className=\"details-button\"\n                      onClick={() => fetchTrainDetails(schedule.ScheduleID)}\n                    >\n                      View Details\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {/* Train Details */}\n      {trainDetails && (\n        <div className=\"train-details\">\n          <h3>Train Details</h3>\n          <p>\n            <strong>Fare:</strong> ${trainDetails.BaseFare}\n          </p>\n          <h4>Stops:</h4>\n          <ul>\n            {trainDetails.Stops.map((stop, index) => (\n              <li key={index}>\n                {stop.StationName} - Arrival:{\" \"}\n                {new Date(stop.ArrivalDateTime).toLocaleString()}, Departure:{\" \"}\n                {new Date(stop.DepartureDateTime).toLocaleString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MainPage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,kBAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}