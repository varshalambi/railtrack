{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/AskQuestionTab.js\",\n  _s = $RefreshSig$();\n// // // AskQuestionTab.js\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const AskQuestionTab = () => {\n// //   const [question, setQuestion] = useState('');\n// //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //   }, []);\n\n// //   // Fetch all previously asked questions by the customer\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer/questions');\n// //       setSubmittedQuestions(response.data.questions);\n// //     } catch (err) {\n// //       console.error('Error fetching questions:', err);\n// //     }\n// //   };\n\n// //   // Handle question submission\n// //   const handleSubmitQuestion = async () => {\n// //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n\n// //     if (!questionText.trim()) {\n// //       setError('Question cannot be empty.');\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.post('/customer/questions', {\n// //         customerId, // Include customerId\n// //         questionText,\n// //       });\n\n// //       setSuccess('Your question has been submitted successfully!');\n// //       setQuestionText('');\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error submitting question:', err);\n// //       setError('Failed to submit the question. Please try again.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Ask a Question</h3>\n// //       <div>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter your question\"\n// //           value={question}\n// //           onChange={(e) => setQuestion(e.target.value)}\n// //         />\n// //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// //       </div>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       <div>\n// //         <h4>Your Submitted Questions</h4>\n// //         {submittedQuestions.length > 0 ? (\n// //           <ul>\n// //             {submittedQuestions.map((q) => (\n// //               <li key={q.QuestionID}>\n// //                 <p><strong>Question:</strong> {q.Question}</p>\n// //                 <p><strong>Answer:</strong> {q.Answer ? q.Answer : 'Not answered yet'}</p>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         ) : (\n// //           <p>No questions submitted yet.</p>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default AskQuestionTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   // Fetch all previously asked questions by the customer\n//   const fetchQuestions = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Ensure customer ID exists\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer/questions', {\n//         params: { customerId }, // Pass customerId as query param\n//       });\n//       setSubmittedQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   // Handle question submission\n//   const handleSubmitQuestion = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     if (!question.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.post('/customer/questions', {\n//         customerId, // Include customerId\n//         questionText: question, // Use the correct state variable\n//       });\n\n//       setSuccess('Your question has been submitted successfully!');\n//       setQuestion(''); // Clear the input field\n//       fetchQuestions(); // Re-fetch questions to update the list\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit the question. Please try again.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       <div>\n//         <h4>Your Submitted Questions</h4>\n//         {submittedQuestions.length > 0 ? (\n//           <ul>\n//             {submittedQuestions.map((q) => (\n//               <li key={q.QuestionID}>\n//                 <p>\n//                   <strong>Question:</strong> {q.Question}\n//                 </p>\n//                 <p>\n//                   <strong>Answer:</strong>{' '}\n//                   {q.Answer ? q.Answer : 'Not answered yet'}\n//                 </p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No questions submitted yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [editQuestionId, setEditQuestionId] = useState(null);\n//   const [editText, setEditText] = useState('');\n//   const customerId = localStorage.getItem('customerId');\n\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer/questions');\n//       setSubmittedQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   const handleSubmitQuestion = async () => {\n//     const customerId = localStorage.getItem('customerId');\n//     if (!customerId) {\n//       setError('Customer ID not found.');\n//       return;\n//     }\n//     if (!question.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n//     try {\n//       await axiosInstance.post('/customer/questions', {\n//         customerId,\n//         questionText: question,\n//       });\n//       setSuccess('Question submitted successfully!');\n//       setQuestion('');\n//       fetchQuestions();\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit question.');\n//     }\n//   };\n\n//   const handleDeleteQuestion = async (questionId) => {\n//     try {\n//       await axiosInstance.delete(`/customer/questions/${questionId}`);\n//       setSuccess('Question deleted successfully!');\n//       fetchQuestions();\n//     } catch (err) {\n//       console.error('Error deleting question:', err);\n//       setError('Failed to delete question.');\n//     }\n//   };\n\n//   const handleEditQuestion = async () => {\n//     try {\n//       await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n//         updatedQuestion: editText,\n//       });\n//       setSuccess('Question updated successfully!');\n//       setEditQuestionId(null);\n//       setEditText('');\n//       fetchQuestions();\n//     } catch (err) {\n//       console.error('Error updating question:', err);\n//       setError('Failed to update question.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       <h4>All Questions</h4>\n//       {submittedQuestions.length > 0 ? (\n//         <ul>\n//           {submittedQuestions.map((q) => (\n//             <li key={q.QuestionID}>\n//               {editQuestionId === q.QuestionID ? (\n//                 <div>\n//                   <input\n//                     type=\"text\"\n//                     value={editText}\n//                     onChange={(e) => setEditText(e.target.value)}\n//                   />\n//                   <button onClick={handleEditQuestion}>Save</button>\n//                   <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n//                 </div>\n//               ) : (\n//                 <div>\n//                   <p><strong>Question:</strong> {q.Question}</p>\n//                   <p><strong>Answer:</strong> {q.Answer || 'Not answered yet'}</p>\n//                   {customerId == q.CustomerID && (<div>\n//                     <button onClick={() => handleDeleteQuestion(q.QuestionID)}>Delete</button>\n//                   <button onClick={() => {\n//                     setEditQuestionId(q.QuestionID);\n//                     setEditText(q.Question);\n//                   }}>\n//                     Edit\n//                   </button>\n//                 </div>)}\n//                 </div>\n//               )}\n//             </li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No questions submitted yet.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AskQuestionTab = () => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [submittedQuestions, setSubmittedQuestions] = useState([]);\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\n  const [filterMode, setFilterMode] = useState('all'); // all | mine\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [editQuestionId, setEditQuestionId] = useState(null);\n  const [editText, setEditText] = useState('');\n  const customerId = localStorage.getItem('customerId');\n\n  // Fetch all questions on component mount\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  const fetchQuestions = async () => {\n    try {\n      const response = await axiosInstance.get('/customer/questions');\n      setSubmittedQuestions(response.data.questions);\n      applyFilter(response.data.questions, filterMode);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching questions:', err);\n      setError('Failed to fetch questions.');\n    }\n  };\n\n  // Apply filter based on the selected mode\n  const applyFilter = (questions, mode) => {\n    if (mode === 'mine') {\n      const filtered = questions.filter(q => q.CustomerID == customerId);\n      setFilteredQuestions(filtered);\n    } else {\n      setFilteredQuestions(questions);\n    }\n  };\n\n  // Handle question submission\n  const handleSubmitQuestion = async () => {\n    if (!customerId) {\n      setError('Customer ID not found.');\n      return;\n    }\n    if (!question.trim()) {\n      setError('Question cannot be empty.');\n      return;\n    }\n    try {\n      await axiosInstance.post('/customer/questions', {\n        customerId,\n        questionText: question\n      });\n      setSuccess('Question submitted successfully!');\n      setQuestion('');\n      fetchQuestions();\n      setError('');\n    } catch (err) {\n      console.error('Error submitting question:', err);\n      setError('Failed to submit question.');\n    }\n  };\n\n  // Handle question deletion\n  const handleDeleteQuestion = async questionId => {\n    try {\n      await axiosInstance.delete(`/customer/questions/${questionId}`);\n      setSuccess('Question deleted successfully!');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error deleting question:', err);\n      setError('Failed to delete question.');\n    }\n  };\n\n  // Handle question editing\n  const handleEditQuestion = async () => {\n    try {\n      await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n        updatedQuestion: editText\n      });\n      setSuccess('Question updated successfully!');\n      setEditQuestionId(null);\n      setEditText('');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error updating question:', err);\n      setError('Failed to update question.');\n    }\n  };\n\n  // Switch between All Questions and My Questions\n  const handleFilterChange = mode => {\n    setFilterMode(mode);\n    applyFilter(submittedQuestions, mode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Ask a Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your question\",\n        value: question,\n        onChange: e => setQuestion(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitQuestion,\n        children: \"Submit Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleFilterChange('all'),\n        style: {\n          backgroundColor: filterMode === 'all' ? '#4CAF50' : '#f0f0f0',\n          color: filterMode === 'all' ? 'white' : 'black',\n          marginRight: '10px'\n        },\n        children: \"All Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleFilterChange('mine'),\n        style: {\n          backgroundColor: filterMode === 'mine' ? '#4CAF50' : '#f0f0f0',\n          color: filterMode === 'mine' ? 'white' : 'black'\n        },\n        children: \"My Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: filterMode === 'mine' ? 'My Submitted Questions' : 'All Questions'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), filteredQuestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredQuestions.map(q => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: editQuestionId === q.QuestionID ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText,\n            onChange: e => setEditText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleEditQuestion,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditQuestionId(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Question:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 21\n            }, this), \" \", q.Question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 21\n            }, this), \" \", q.Answer || 'Not answered yet']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 19\n          }, this), customerId == q.CustomerID && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteQuestion(q.QuestionID),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setEditQuestionId(q.QuestionID);\n                setEditText(q.Question);\n              },\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 17\n        }, this)\n      }, q.QuestionID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No questions available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this);\n};\n_s(AskQuestionTab, \"RfVYQZR/SmG7FIIf8kHsNa72nCo=\");\n_c = AskQuestionTab;\nexport default AskQuestionTab;\nvar _c;\n$RefreshReg$(_c, \"AskQuestionTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","AskQuestionTab","_s","question","setQuestion","submittedQuestions","setSubmittedQuestions","filteredQuestions","setFilteredQuestions","filterMode","setFilterMode","error","setError","success","setSuccess","editQuestionId","setEditQuestionId","editText","setEditText","customerId","localStorage","getItem","fetchQuestions","response","get","data","questions","applyFilter","err","console","mode","filtered","filter","q","CustomerID","handleSubmitQuestion","trim","post","questionText","handleDeleteQuestion","questionId","delete","handleEditQuestion","put","updatedQuestion","handleFilterChange","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","className","style","backgroundColor","color","marginRight","length","map","QuestionID","Question","Answer","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/AskQuestionTab.js"],"sourcesContent":["// // // AskQuestionTab.js\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const AskQuestionTab = () => {\n// //   const [question, setQuestion] = useState('');\n// //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //   }, []);\n\n// //   // Fetch all previously asked questions by the customer\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer/questions');\n// //       setSubmittedQuestions(response.data.questions);\n// //     } catch (err) {\n// //       console.error('Error fetching questions:', err);\n// //     }\n// //   };\n\n// //   // Handle question submission\n// //   const handleSubmitQuestion = async () => {\n// //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n  \n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n  \n// //     if (!questionText.trim()) {\n// //       setError('Question cannot be empty.');\n// //       return;\n// //     }\n  \n// //     try {\n// //       const response = await axiosInstance.post('/customer/questions', {\n// //         customerId, // Include customerId\n// //         questionText,\n// //       });\n  \n// //       setSuccess('Your question has been submitted successfully!');\n// //       setQuestionText('');\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error submitting question:', err);\n// //       setError('Failed to submit the question. Please try again.');\n// //     }\n// //   };\n  \n\n// //   return (\n// //     <div>\n// //       <h3>Ask a Question</h3>\n// //       <div>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter your question\"\n// //           value={question}\n// //           onChange={(e) => setQuestion(e.target.value)}\n// //         />\n// //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// //       </div>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       <div>\n// //         <h4>Your Submitted Questions</h4>\n// //         {submittedQuestions.length > 0 ? (\n// //           <ul>\n// //             {submittedQuestions.map((q) => (\n// //               <li key={q.QuestionID}>\n// //                 <p><strong>Question:</strong> {q.Question}</p>\n// //                 <p><strong>Answer:</strong> {q.Answer ? q.Answer : 'Not answered yet'}</p>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         ) : (\n// //           <p>No questions submitted yet.</p>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default AskQuestionTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   // Fetch all previously asked questions by the customer\n//   const fetchQuestions = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Ensure customer ID exists\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer/questions', {\n//         params: { customerId }, // Pass customerId as query param\n//       });\n//       setSubmittedQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   // Handle question submission\n//   const handleSubmitQuestion = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     if (!question.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.post('/customer/questions', {\n//         customerId, // Include customerId\n//         questionText: question, // Use the correct state variable\n//       });\n\n//       setSuccess('Your question has been submitted successfully!');\n//       setQuestion(''); // Clear the input field\n//       fetchQuestions(); // Re-fetch questions to update the list\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit the question. Please try again.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       <div>\n//         <h4>Your Submitted Questions</h4>\n//         {submittedQuestions.length > 0 ? (\n//           <ul>\n//             {submittedQuestions.map((q) => (\n//               <li key={q.QuestionID}>\n//                 <p>\n//                   <strong>Question:</strong> {q.Question}\n//                 </p>\n//                 <p>\n//                   <strong>Answer:</strong>{' '}\n//                   {q.Answer ? q.Answer : 'Not answered yet'}\n//                 </p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No questions submitted yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [editQuestionId, setEditQuestionId] = useState(null);\n//   const [editText, setEditText] = useState('');\n//   const customerId = localStorage.getItem('customerId');\n\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer/questions');\n//       setSubmittedQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   const handleSubmitQuestion = async () => {\n//     const customerId = localStorage.getItem('customerId');\n//     if (!customerId) {\n//       setError('Customer ID not found.');\n//       return;\n//     }\n//     if (!question.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n//     try {\n//       await axiosInstance.post('/customer/questions', {\n//         customerId,\n//         questionText: question,\n//       });\n//       setSuccess('Question submitted successfully!');\n//       setQuestion('');\n//       fetchQuestions();\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit question.');\n//     }\n//   };\n\n//   const handleDeleteQuestion = async (questionId) => {\n//     try {\n//       await axiosInstance.delete(`/customer/questions/${questionId}`);\n//       setSuccess('Question deleted successfully!');\n//       fetchQuestions();\n//     } catch (err) {\n//       console.error('Error deleting question:', err);\n//       setError('Failed to delete question.');\n//     }\n//   };\n\n//   const handleEditQuestion = async () => {\n//     try {\n//       await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n//         updatedQuestion: editText,\n//       });\n//       setSuccess('Question updated successfully!');\n//       setEditQuestionId(null);\n//       setEditText('');\n//       fetchQuestions();\n//     } catch (err) {\n//       console.error('Error updating question:', err);\n//       setError('Failed to update question.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       <h4>All Questions</h4>\n//       {submittedQuestions.length > 0 ? (\n//         <ul>\n//           {submittedQuestions.map((q) => (\n//             <li key={q.QuestionID}>\n//               {editQuestionId === q.QuestionID ? (\n//                 <div>\n//                   <input\n//                     type=\"text\"\n//                     value={editText}\n//                     onChange={(e) => setEditText(e.target.value)}\n//                   />\n//                   <button onClick={handleEditQuestion}>Save</button>\n//                   <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n//                 </div>\n//               ) : (\n//                 <div>\n//                   <p><strong>Question:</strong> {q.Question}</p>\n//                   <p><strong>Answer:</strong> {q.Answer || 'Not answered yet'}</p>\n//                   {customerId == q.CustomerID && (<div>\n//                     <button onClick={() => handleDeleteQuestion(q.QuestionID)}>Delete</button>\n//                   <button onClick={() => {\n//                     setEditQuestionId(q.QuestionID);\n//                     setEditText(q.Question);\n//                   }}>\n//                     Edit\n//                   </button>\n//                 </div>)}\n//                 </div>\n//               )}\n//             </li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No questions submitted yet.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst AskQuestionTab = () => {\n  const [question, setQuestion] = useState('');\n  const [submittedQuestions, setSubmittedQuestions] = useState([]);\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\n  const [filterMode, setFilterMode] = useState('all'); // all | mine\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [editQuestionId, setEditQuestionId] = useState(null);\n  const [editText, setEditText] = useState('');\n  const customerId = localStorage.getItem('customerId');\n\n  // Fetch all questions on component mount\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  const fetchQuestions = async () => {\n    try {\n      const response = await axiosInstance.get('/customer/questions');\n      setSubmittedQuestions(response.data.questions);\n      applyFilter(response.data.questions, filterMode);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching questions:', err);\n      setError('Failed to fetch questions.');\n    }\n  };\n\n  // Apply filter based on the selected mode\n  const applyFilter = (questions, mode) => {\n    if (mode === 'mine') {\n      const filtered = questions.filter((q) => q.CustomerID == customerId);\n      setFilteredQuestions(filtered);\n    } else {\n      setFilteredQuestions(questions);\n    }\n  };\n\n  // Handle question submission\n  const handleSubmitQuestion = async () => {\n    if (!customerId) {\n      setError('Customer ID not found.');\n      return;\n    }\n    if (!question.trim()) {\n      setError('Question cannot be empty.');\n      return;\n    }\n    try {\n      await axiosInstance.post('/customer/questions', {\n        customerId,\n        questionText: question,\n      });\n      setSuccess('Question submitted successfully!');\n      setQuestion('');\n      fetchQuestions();\n      setError('');\n    } catch (err) {\n      console.error('Error submitting question:', err);\n      setError('Failed to submit question.');\n    }\n  };\n\n  // Handle question deletion\n  const handleDeleteQuestion = async (questionId) => {\n    try {\n      await axiosInstance.delete(`/customer/questions/${questionId}`);\n      setSuccess('Question deleted successfully!');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error deleting question:', err);\n      setError('Failed to delete question.');\n    }\n  };\n\n  // Handle question editing\n  const handleEditQuestion = async () => {\n    try {\n      await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n        updatedQuestion: editText,\n      });\n      setSuccess('Question updated successfully!');\n      setEditQuestionId(null);\n      setEditText('');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error updating question:', err);\n      setError('Failed to update question.');\n    }\n  };\n\n  // Switch between All Questions and My Questions\n  const handleFilterChange = (mode) => {\n    setFilterMode(mode);\n    applyFilter(submittedQuestions, mode);\n  };\n\n  return (\n    <div>\n      <h3>Ask a Question</h3>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your question\"\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n        />\n        <button onClick={handleSubmitQuestion}>Submit Question</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n      {success && <p className=\"success\">{success}</p>}\n\n      {/* Buttons to switch between All Questions and My Questions */}\n      <div>\n        <button\n          onClick={() => handleFilterChange('all')}\n          style={{\n            backgroundColor: filterMode === 'all' ? '#4CAF50' : '#f0f0f0',\n            color: filterMode === 'all' ? 'white' : 'black',\n            marginRight: '10px',\n          }}\n        >\n          All Questions\n        </button>\n        <button\n          onClick={() => handleFilterChange('mine')}\n          style={{\n            backgroundColor: filterMode === 'mine' ? '#4CAF50' : '#f0f0f0',\n            color: filterMode === 'mine' ? 'white' : 'black',\n          }}\n        >\n          My Questions\n        </button>\n      </div>\n\n      <h4>{filterMode === 'mine' ? 'My Submitted Questions' : 'All Questions'}</h4>\n      {filteredQuestions.length > 0 ? (\n        <ul>\n          {filteredQuestions.map((q) => (\n            <li key={q.QuestionID}>\n              {editQuestionId === q.QuestionID ? (\n                <div>\n                  <input\n                    type=\"text\"\n                    value={editText}\n                    onChange={(e) => setEditText(e.target.value)}\n                  />\n                  <button onClick={handleEditQuestion}>Save</button>\n                  <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n                </div>\n              ) : (\n                <div>\n                  <p>\n                    <strong>Question:</strong> {q.Question}\n                  </p>\n                  <p>\n                    <strong>Answer:</strong> {q.Answer || 'Not answered yet'}\n                  </p>\n                  {customerId == q.CustomerID && (\n                    <div>\n                      <button onClick={() => handleDeleteQuestion(q.QuestionID)}>\n                        Delete\n                      </button>\n                      <button\n                        onClick={() => {\n                          setEditQuestionId(q.QuestionID);\n                          setEditText(q.Question);\n                        }}\n                      >\n                        Edit\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No questions available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default AskQuestionTab;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}