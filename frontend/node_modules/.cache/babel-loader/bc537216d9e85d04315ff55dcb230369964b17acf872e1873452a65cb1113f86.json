{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ReservationsTab.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axiosInstance from \"../utils/axiosInstance\";\n\n// const Reservations = () => {\n//   const [reservations, setReservations] = useState([]);\n//   const [transitLines, setTransitLines] = useState([]);\n//   const [customers, setCustomers] = useState([]);\n//   const [filterBy, setFilterBy] = useState(\"all\");\n//   const [filterValue, setFilterValue] = useState(\"\");\n\n//   useEffect(() => {\n//     // Fetch initial reservation data\n//     const fetchReservations = async () => {\n//       try {\n//         const response = await axiosInstance.get(\"/admin/reservations\");\n//         setReservations(response.data.reservations || []);\n//       } catch (err) {\n//         console.error(\"Error fetching reservations:\", err);\n//       }\n//     };\n\n//     // Fetch transit lines for dropdown\n//     const fetchTransitLines = async () => {\n//       try {\n//         const response = await axiosInstance.get(\"/admin/transit-lines\");\n//         setTransitLines(response.data || []);\n//       } catch (err) {\n//         console.error(\"Error fetching transit lines:\", err);\n//       }\n//     };\n\n//     // Fetch customers for dropdown\n//     const fetchCustomers = async () => {\n//       try {\n//         const response = await axiosInstance.get(\"/admin/customers\");\n//         setCustomers(response.data || []);\n//       } catch (err) {\n//         console.error(\"Error fetching customers:\", err);\n//       }\n//     };\n\n//     fetchReservations();\n//     fetchTransitLines();\n//     fetchCustomers();\n//   }, []);\n\n//   const handleFilterChange = async () => {\n//     let endpoint = \"/admin/reservations\";\n//     if (filterBy === \"transitLine\" && filterValue) {\n//       endpoint = `/admin/reservations?transitLine=${filterValue}`;\n//     } else if (filterBy === \"customer\" && filterValue) {\n//       endpoint = `/admin/reservations?customerName=${filterValue}`;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get(endpoint);\n//       setReservations(response.data.reservations || []);\n//     } catch (err) {\n//       console.error(\"Error filtering reservations:\", err);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reservations</h2>\n\n//       {/* Filter Dropdowns */}\n//       <div style={{ marginBottom: \"1rem\" }}>\n//         <label htmlFor=\"filterBy\">Filter By: </label>\n//         <select\n//           id=\"filterBy\"\n//           value={filterBy}\n//           onChange={(e) => setFilterBy(e.target.value)}\n//         >\n//           <option value=\"all\">All</option>\n//           <option value=\"transitLine\">Transit Line</option>\n//           <option value=\"customer\">Customer</option>\n//         </select>\n\n//         {filterBy === \"transitLine\" && (\n//           <select\n//             id=\"transitLine\"\n//             value={filterValue}\n//             onChange={(e) => setFilterValue(e.target.value)}\n//             style={{ marginLeft: \"1rem\" }}\n//           >\n//             <option value=\"\">Select Transit Line</option>\n//             {transitLines.map((line) => (\n//               <option key={line.TransitLineName} value={line.TransitLineName}>\n//                 {line.TransitLineName}\n//               </option>\n//             ))}\n//           </select>\n//         )}\n\n//         {filterBy === \"customer\" && (\n//           <select\n//             id=\"customer\"\n//             value={filterValue}\n//             onChange={(e) => setFilterValue(e.target.value)}\n//             style={{ marginLeft: \"1rem\" }}\n//           >\n//             <option value=\"\">Select Customer</option>\n//             {customers.map((customer) => (\n//               <option\n//                 key={customer.CustomerID}\n//                 value={`${customer.FirstName} ${customer.LastName}`}\n//               >\n//                 {customer.FirstName} {customer.LastName}\n//               </option>\n//             ))}\n//           </select>\n//         )}\n\n//         <button\n//           onClick={handleFilterChange}\n//           style={{ marginLeft: \"1rem\", padding: \"0.5rem\" }}\n//         >\n//           Apply Filter\n//         </button>\n//       </div>\n\n//       {/* Display Reservations */}\n//       <table border=\"1\" style={{ width: \"100%\", textAlign: \"left\" }}>\n//         <thead>\n//           <tr>\n//             <th>Reservation ID</th>\n//             <th>Customer</th>\n//             <th>Transit Line</th>\n//             <th>Total Fare</th>\n//             <th>Trip Type</th>\n//             <th>Departure</th>\n//             <th>Arrival</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {reservations.length > 0 ? (\n//             reservations.map((reservation) => (\n//               <tr key={reservation.ReservationID}>\n//                 <td>{reservation.ReservationID}</td>\n//                 <td>{`${reservation.FirstName} ${reservation.LastName}`}</td>\n//                 <td>{reservation.TransitLineName}</td>\n//                 <td>${reservation.TotalFare.toFixed(2)}</td>\n//                 <td>{reservation.TripType}</td>\n//                 <td>{reservation.DepartureStation}</td>\n//                 <td>{reservation.ArrivalStation}</td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"7\">No reservations found.</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Reservations;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const Reservations = () => {\n//   const [reservations, setReservations] = useState([]);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchReservations();\n//   }, []);\n\n//   const fetchReservations = async () => {\n//     try {\n//       setLoading(true); // Start loading before fetching data\n//       const response = await axiosInstance.get('/admin/reservations');\n//       const data = response.data.reservations;\n\n//       // Ensure that all the expected fields are available in the response\n//       const reservationsWithDetails = data.map((reservation) => ({\n//         ReservationID: reservation.ReservationID,\n//         ReservationDate: reservation.ReservationDate,\n//         CustomerName: `${reservation.CustomerFirstName} ${reservation.CustomerLastName}`,\n//         TransitLine: reservation.TransitLine || 'Unknown Transit Line',\n//         TotalFare: reservation.TotalFare,\n//         TripType: reservation.TripType,\n//         DepartureStation: reservation.DepartureStation,\n//         ArrivalStation: reservation.ArrivalStation,\n//       }));\n\n//       setReservations(reservationsWithDetails);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching reservations:', err);\n//       setError('Failed to fetch reservations.');\n//     } finally {\n//       setLoading(false); // Stop loading after data is fetched or on error\n//     }\n//   };\n\n//   const deleteReservation = async (reservationId) => {\n//     try {\n//       await axiosInstance.delete(`/admin/reservations/${reservationId}`);\n//       setReservations(reservations.filter((r) => r.ReservationID !== reservationId));\n//     } catch (err) {\n//       console.error('Error deleting reservation:', err);\n//       setError('Failed to delete reservation.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reservations</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       {loading ? (\n//         <p>Loading reservations...</p>\n//       ) : (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Reservation ID</th>\n//               <th>Customer</th>\n//               <th>Transit Line</th>\n//               <th>Total Fare</th>\n//               <th>Trip Type</th>\n//               <th>Departure</th>\n//               <th>Arrival</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {reservations.length > 0 ? (\n//               reservations.map((reservation) => (\n//                 <tr key={reservation.ReservationID}>\n//                   <td>{reservation.ReservationID}</td>\n//                   <td>{reservation.CustomerName}</td>\n//                   <td>{reservation.TransitLine}</td>\n//                   <td>${reservation.TotalFare.toFixed(2)}</td>\n//                   <td>{reservation.TripType}</td>\n//                   <td>{reservation.DepartureStation}</td>\n//                   <td>{reservation.ArrivalStation}</td>\n//                   <td>\n//                     <button onClick={() => deleteReservation(reservation.ReservationID)}>Delete</button>\n//                   </td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"8\" style={{ textAlign: 'center' }}>\n//                   No reservations available.\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Reservations;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ReservationsTab = () => {\n//   const [reservations, setReservations] = useState([]);\n//   const [error, setError] = useState('');\n//   const [customerName, setCustomerName] = useState('');\n//   const [transitLine, setTransitLine] = useState('');\n//   const [tripType, setTripType] = useState('');\n\n//   useEffect(() => {\n//     fetchReservations();\n//   }, []);\n\n//   const fetchReservations = async (filters = {}) => {\n//     try {\n//       const response = await axiosInstance.get('/admin/reservations', {\n//         params: filters,\n//       });\n//       setReservations(response.data.reservations);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching reservations:', err);\n//       setError('Failed to fetch reservations.');\n//     }\n//   };\n\n//   const handleFilterSubmit = (e) => {\n//     e.preventDefault();\n//     fetchReservations({\n//       customerName,\n//       transitLine,\n//       tripType,\n//     });\n//   };\n\n//   const deleteReservation = async (reservationId) => {\n//     try {\n//       await axiosInstance.delete(`/admin/reservations/${reservationId}`);\n//       setReservations(reservations.filter((r) => r.ReservationID !== reservationId));\n//     } catch (err) {\n//       console.error('Error deleting reservation:', err);\n//       setError('Failed to delete reservation.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reservations</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <form onSubmit={handleFilterSubmit}>\n//         <div>\n//           <label>Customer Name: </label>\n//           <input\n//             type=\"text\"\n//             value={customerName}\n//             onChange={(e) => setCustomerName(e.target.value)}\n//           />\n//         </div>\n//         <div>\n//           <label>Transit Line: </label>\n//           <input\n//             type=\"text\"\n//             value={transitLine}\n//             onChange={(e) => setTransitLine(e.target.value)}\n//           />\n//         </div>\n//         <div>\n//           <label>Trip Type: </label>\n//           <input\n//             type=\"text\"\n//             value={tripType}\n//             onChange={(e) => setTripType(e.target.value)}\n//           />\n//         </div>\n//         <button type=\"submit\">Apply Filter</button>\n//       </form>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Reservation ID</th>\n//             <th>Customer</th>\n//             <th>Transit Line</th>\n//             <th>Total Fare</th>\n//             <th>Trip Type</th>\n//             <th>Departure</th>\n//             <th>Arrival</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {reservations.map((reservation) => (\n//             <tr key={reservation.ReservationID}>\n//               <td>{reservation.ReservationID}</td>\n//               <td>{reservation.CustomerFirstName} {reservation.CustomerLastName}</td>\n//               <td>{reservation.TransitLine}</td>\n//               <td>${reservation.TotalFare.toFixed(2)}</td>\n//               <td>{reservation.TripType}</td>\n//               <td>{reservation.DepartureStation}</td>\n//               <td>{reservation.ArrivalStation}</td>\n//               <td>\n//                 <button onClick={() => deleteReservation(reservation.ReservationID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ReservationsTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ReservationsTab = () => {\n//   const [reservations, setReservations] = useState([]);\n//   const [error, setError] = useState('');\n//   const [filterType, setFilterType] = useState(''); // to store whether filtering by 'CustomerName' or 'TransitLine'\n//   const [filterValue, setFilterValue] = useState(''); // to store the input value for filtering\n\n//   useEffect(() => {\n//     fetchReservations();\n//   }, []);\n\n//   const fetchReservations = async (filters = {}) => {\n//     try {\n//       const response = await axiosInstance.get('/admin/reservations', {\n//         params: filters,\n//       });\n//       setReservations(response.data.reservations);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching reservations:', err);\n//       setError('Failed to fetch reservations.');\n//     }\n//   };\n\n//   const handleFilterSubmit = (e) => {\n//     e.preventDefault();\n//     // Choose filter type\n//     if (filterType && filterValue) {\n//       fetchReservations({\n//         [filterType]: filterValue,\n//       });\n//     } else {\n//       fetchReservations(); // Fetch without filter if nothing is selected\n//     }\n//   };\n\n//   const deleteReservation = async (reservationId) => {\n//     try {\n//       await axiosInstance.delete(`/admin/reservations/${reservationId}`);\n//       setReservations(reservations.filter((r) => r.ReservationID !== reservationId));\n//     } catch (err) {\n//       console.error('Error deleting reservation:', err);\n//       setError('Failed to delete reservation.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reservations</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Filter Form */}\n//       <form onSubmit={handleFilterSubmit}>\n//         <div>\n//           <label>Filter By: </label>\n//           <select\n//             value={filterType}\n//             onChange={(e) => setFilterType(e.target.value)}\n//           >\n//             <option value=\"\">Select Filter Type</option>\n//             <option value=\"customerName\">Customer Name</option>\n//             <option value=\"transitLine\">Transit Line</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label>Filter Value: </label>\n//           <input\n//             type=\"text\"\n//             value={filterValue}\n//             onChange={(e) => setFilterValue(e.target.value)}\n//           />\n//         </div>\n//         <button type=\"submit\">Apply Filter</button>\n//       </form>\n\n//       {/* Reservations Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Reservation ID</th>\n//             <th>Customer</th>\n//             <th>Transit Line</th>\n//             <th>Total Fare</th>\n//             <th>Trip Type</th>\n//             <th>Departure</th>\n//             <th>Arrival</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {reservations.map((reservation) => (\n//             <tr key={reservation.ReservationID}>\n//               <td>{reservation.ReservationID}</td>\n//               <td>{reservation.CustomerFirstName} {reservation.CustomerLastName}</td>\n//               <td>{reservation.TransitLine}</td>\n//               <td>${reservation.TotalFare.toFixed(2)}</td>\n//               <td>{reservation.TripType}</td>\n//               <td>{reservation.DepartureStation}</td>\n//               <td>{reservation.ArrivalStation}</td>\n//               <td>\n//                 <button onClick={() => deleteReservation(reservation.ReservationID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ReservationsTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReservationsTab = () => {\n  _s();\n  const [reservations, setReservations] = useState([]);\n  const [error, setError] = useState('');\n  const [filterType, setFilterType] = useState(''); // to store whether filtering by 'CustomerName' or 'TransitLine'\n  const [filterValue, setFilterValue] = useState(''); // to store the input value for filtering\n\n  useEffect(() => {\n    fetchReservations();\n  }, []);\n  const fetchReservations = async (filters = {}) => {\n    try {\n      const response = await axiosInstance.get('/admin/reservations', {\n        params: filters\n      });\n      setReservations(response.data.reservations);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching reservations:', err);\n      setError('Failed to fetch reservations.');\n    }\n  };\n  const handleFilterSubmit = e => {\n    e.preventDefault();\n    // Choose filter type\n    if (filterType && filterValue) {\n      fetchReservations({\n        [filterType]: filterValue\n      });\n    } else {\n      fetchReservations(); // Fetch without filter if nothing is selected\n    }\n  };\n  const handleClearFilter = () => {\n    setFilterType(''); // Clear filter type\n    setFilterValue(''); // Clear filter value\n    fetchReservations(); // Fetch all reservations without filters\n  };\n  const deleteReservation = async reservationId => {\n    try {\n      await axiosInstance.delete(`/admin/reservations/${reservationId}`);\n      setReservations(reservations.filter(r => r.ReservationID !== reservationId));\n    } catch (err) {\n      console.error('Error deleting reservation:', err);\n      setError('Failed to delete reservation.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reservations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFilterSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Filter By: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filterType,\n          onChange: e => setFilterType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Filter Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"customerName\",\n            children: \"Customer Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"transitLine\",\n            children: \"Transit Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Filter Value: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: filterValue,\n          onChange: e => setFilterValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Apply Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleClearFilter,\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Clear Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Reservation ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Customer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transit Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Fare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Trip Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: reservations.map(reservation => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: reservation.ReservationID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [reservation.CustomerFirstName, \" \", reservation.CustomerLastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: reservation.TransitLine\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", reservation.TotalFare.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: reservation.TripType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: reservation.DepartureStation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: reservation.ArrivalStation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteReservation(reservation.ReservationID),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 15\n          }, this)]\n        }, reservation.ReservationID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 549,\n    columnNumber: 5\n  }, this);\n};\n_s(ReservationsTab, \"A4sxST9DfkhU2HYj5QXMkgyFlP0=\");\n_c = ReservationsTab;\nexport default ReservationsTab;\nvar _c;\n$RefreshReg$(_c, \"ReservationsTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","ReservationsTab","_s","reservations","setReservations","error","setError","filterType","setFilterType","filterValue","setFilterValue","fetchReservations","filters","response","get","params","data","err","console","handleFilterSubmit","e","preventDefault","handleClearFilter","deleteReservation","reservationId","delete","filter","r","ReservationID","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","value","onChange","target","type","onClick","style","marginLeft","map","reservation","CustomerFirstName","CustomerLastName","TransitLine","TotalFare","toFixed","TripType","DepartureStation","ArrivalStation","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ReservationsTab.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axiosInstance from \"../utils/axiosInstance\";\n\n// const Reservations = () => {\n//   const [reservations, setReservations] = useState([]);\n//   const [transitLines, setTransitLines] = useState([]);\n//   const [customers, setCustomers] = useState([]);\n//   const [filterBy, setFilterBy] = useState(\"all\");\n//   const [filterValue, setFilterValue] = useState(\"\");\n\n//   useEffect(() => {\n//     // Fetch initial reservation data\n//     const fetchReservations = async () => {\n//       try {\n//         const response = await axiosInstance.get(\"/admin/reservations\");\n//         setReservations(response.data.reservations || []);\n//       } catch (err) {\n//         console.error(\"Error fetching reservations:\", err);\n//       }\n//     };\n\n//     // Fetch transit lines for dropdown\n//     const fetchTransitLines = async () => {\n//       try {\n//         const response = await axiosInstance.get(\"/admin/transit-lines\");\n//         setTransitLines(response.data || []);\n//       } catch (err) {\n//         console.error(\"Error fetching transit lines:\", err);\n//       }\n//     };\n\n//     // Fetch customers for dropdown\n//     const fetchCustomers = async () => {\n//       try {\n//         const response = await axiosInstance.get(\"/admin/customers\");\n//         setCustomers(response.data || []);\n//       } catch (err) {\n//         console.error(\"Error fetching customers:\", err);\n//       }\n//     };\n\n//     fetchReservations();\n//     fetchTransitLines();\n//     fetchCustomers();\n//   }, []);\n\n//   const handleFilterChange = async () => {\n//     let endpoint = \"/admin/reservations\";\n//     if (filterBy === \"transitLine\" && filterValue) {\n//       endpoint = `/admin/reservations?transitLine=${filterValue}`;\n//     } else if (filterBy === \"customer\" && filterValue) {\n//       endpoint = `/admin/reservations?customerName=${filterValue}`;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get(endpoint);\n//       setReservations(response.data.reservations || []);\n//     } catch (err) {\n//       console.error(\"Error filtering reservations:\", err);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reservations</h2>\n\n//       {/* Filter Dropdowns */}\n//       <div style={{ marginBottom: \"1rem\" }}>\n//         <label htmlFor=\"filterBy\">Filter By: </label>\n//         <select\n//           id=\"filterBy\"\n//           value={filterBy}\n//           onChange={(e) => setFilterBy(e.target.value)}\n//         >\n//           <option value=\"all\">All</option>\n//           <option value=\"transitLine\">Transit Line</option>\n//           <option value=\"customer\">Customer</option>\n//         </select>\n\n//         {filterBy === \"transitLine\" && (\n//           <select\n//             id=\"transitLine\"\n//             value={filterValue}\n//             onChange={(e) => setFilterValue(e.target.value)}\n//             style={{ marginLeft: \"1rem\" }}\n//           >\n//             <option value=\"\">Select Transit Line</option>\n//             {transitLines.map((line) => (\n//               <option key={line.TransitLineName} value={line.TransitLineName}>\n//                 {line.TransitLineName}\n//               </option>\n//             ))}\n//           </select>\n//         )}\n\n//         {filterBy === \"customer\" && (\n//           <select\n//             id=\"customer\"\n//             value={filterValue}\n//             onChange={(e) => setFilterValue(e.target.value)}\n//             style={{ marginLeft: \"1rem\" }}\n//           >\n//             <option value=\"\">Select Customer</option>\n//             {customers.map((customer) => (\n//               <option\n//                 key={customer.CustomerID}\n//                 value={`${customer.FirstName} ${customer.LastName}`}\n//               >\n//                 {customer.FirstName} {customer.LastName}\n//               </option>\n//             ))}\n//           </select>\n//         )}\n\n//         <button\n//           onClick={handleFilterChange}\n//           style={{ marginLeft: \"1rem\", padding: \"0.5rem\" }}\n//         >\n//           Apply Filter\n//         </button>\n//       </div>\n\n//       {/* Display Reservations */}\n//       <table border=\"1\" style={{ width: \"100%\", textAlign: \"left\" }}>\n//         <thead>\n//           <tr>\n//             <th>Reservation ID</th>\n//             <th>Customer</th>\n//             <th>Transit Line</th>\n//             <th>Total Fare</th>\n//             <th>Trip Type</th>\n//             <th>Departure</th>\n//             <th>Arrival</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {reservations.length > 0 ? (\n//             reservations.map((reservation) => (\n//               <tr key={reservation.ReservationID}>\n//                 <td>{reservation.ReservationID}</td>\n//                 <td>{`${reservation.FirstName} ${reservation.LastName}`}</td>\n//                 <td>{reservation.TransitLineName}</td>\n//                 <td>${reservation.TotalFare.toFixed(2)}</td>\n//                 <td>{reservation.TripType}</td>\n//                 <td>{reservation.DepartureStation}</td>\n//                 <td>{reservation.ArrivalStation}</td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"7\">No reservations found.</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Reservations;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const Reservations = () => {\n//   const [reservations, setReservations] = useState([]);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     fetchReservations();\n//   }, []);\n\n//   const fetchReservations = async () => {\n//     try {\n//       setLoading(true); // Start loading before fetching data\n//       const response = await axiosInstance.get('/admin/reservations');\n//       const data = response.data.reservations;\n\n//       // Ensure that all the expected fields are available in the response\n//       const reservationsWithDetails = data.map((reservation) => ({\n//         ReservationID: reservation.ReservationID,\n//         ReservationDate: reservation.ReservationDate,\n//         CustomerName: `${reservation.CustomerFirstName} ${reservation.CustomerLastName}`,\n//         TransitLine: reservation.TransitLine || 'Unknown Transit Line',\n//         TotalFare: reservation.TotalFare,\n//         TripType: reservation.TripType,\n//         DepartureStation: reservation.DepartureStation,\n//         ArrivalStation: reservation.ArrivalStation,\n//       }));\n\n//       setReservations(reservationsWithDetails);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching reservations:', err);\n//       setError('Failed to fetch reservations.');\n//     } finally {\n//       setLoading(false); // Stop loading after data is fetched or on error\n//     }\n//   };\n\n//   const deleteReservation = async (reservationId) => {\n//     try {\n//       await axiosInstance.delete(`/admin/reservations/${reservationId}`);\n//       setReservations(reservations.filter((r) => r.ReservationID !== reservationId));\n//     } catch (err) {\n//       console.error('Error deleting reservation:', err);\n//       setError('Failed to delete reservation.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reservations</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       {loading ? (\n//         <p>Loading reservations...</p>\n//       ) : (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Reservation ID</th>\n//               <th>Customer</th>\n//               <th>Transit Line</th>\n//               <th>Total Fare</th>\n//               <th>Trip Type</th>\n//               <th>Departure</th>\n//               <th>Arrival</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {reservations.length > 0 ? (\n//               reservations.map((reservation) => (\n//                 <tr key={reservation.ReservationID}>\n//                   <td>{reservation.ReservationID}</td>\n//                   <td>{reservation.CustomerName}</td>\n//                   <td>{reservation.TransitLine}</td>\n//                   <td>${reservation.TotalFare.toFixed(2)}</td>\n//                   <td>{reservation.TripType}</td>\n//                   <td>{reservation.DepartureStation}</td>\n//                   <td>{reservation.ArrivalStation}</td>\n//                   <td>\n//                     <button onClick={() => deleteReservation(reservation.ReservationID)}>Delete</button>\n//                   </td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"8\" style={{ textAlign: 'center' }}>\n//                   No reservations available.\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Reservations;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ReservationsTab = () => {\n//   const [reservations, setReservations] = useState([]);\n//   const [error, setError] = useState('');\n//   const [customerName, setCustomerName] = useState('');\n//   const [transitLine, setTransitLine] = useState('');\n//   const [tripType, setTripType] = useState('');\n\n//   useEffect(() => {\n//     fetchReservations();\n//   }, []);\n\n//   const fetchReservations = async (filters = {}) => {\n//     try {\n//       const response = await axiosInstance.get('/admin/reservations', {\n//         params: filters,\n//       });\n//       setReservations(response.data.reservations);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching reservations:', err);\n//       setError('Failed to fetch reservations.');\n//     }\n//   };\n\n//   const handleFilterSubmit = (e) => {\n//     e.preventDefault();\n//     fetchReservations({\n//       customerName,\n//       transitLine,\n//       tripType,\n//     });\n//   };\n\n//   const deleteReservation = async (reservationId) => {\n//     try {\n//       await axiosInstance.delete(`/admin/reservations/${reservationId}`);\n//       setReservations(reservations.filter((r) => r.ReservationID !== reservationId));\n//     } catch (err) {\n//       console.error('Error deleting reservation:', err);\n//       setError('Failed to delete reservation.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reservations</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <form onSubmit={handleFilterSubmit}>\n//         <div>\n//           <label>Customer Name: </label>\n//           <input\n//             type=\"text\"\n//             value={customerName}\n//             onChange={(e) => setCustomerName(e.target.value)}\n//           />\n//         </div>\n//         <div>\n//           <label>Transit Line: </label>\n//           <input\n//             type=\"text\"\n//             value={transitLine}\n//             onChange={(e) => setTransitLine(e.target.value)}\n//           />\n//         </div>\n//         <div>\n//           <label>Trip Type: </label>\n//           <input\n//             type=\"text\"\n//             value={tripType}\n//             onChange={(e) => setTripType(e.target.value)}\n//           />\n//         </div>\n//         <button type=\"submit\">Apply Filter</button>\n//       </form>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Reservation ID</th>\n//             <th>Customer</th>\n//             <th>Transit Line</th>\n//             <th>Total Fare</th>\n//             <th>Trip Type</th>\n//             <th>Departure</th>\n//             <th>Arrival</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {reservations.map((reservation) => (\n//             <tr key={reservation.ReservationID}>\n//               <td>{reservation.ReservationID}</td>\n//               <td>{reservation.CustomerFirstName} {reservation.CustomerLastName}</td>\n//               <td>{reservation.TransitLine}</td>\n//               <td>${reservation.TotalFare.toFixed(2)}</td>\n//               <td>{reservation.TripType}</td>\n//               <td>{reservation.DepartureStation}</td>\n//               <td>{reservation.ArrivalStation}</td>\n//               <td>\n//                 <button onClick={() => deleteReservation(reservation.ReservationID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ReservationsTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ReservationsTab = () => {\n//   const [reservations, setReservations] = useState([]);\n//   const [error, setError] = useState('');\n//   const [filterType, setFilterType] = useState(''); // to store whether filtering by 'CustomerName' or 'TransitLine'\n//   const [filterValue, setFilterValue] = useState(''); // to store the input value for filtering\n\n//   useEffect(() => {\n//     fetchReservations();\n//   }, []);\n\n//   const fetchReservations = async (filters = {}) => {\n//     try {\n//       const response = await axiosInstance.get('/admin/reservations', {\n//         params: filters,\n//       });\n//       setReservations(response.data.reservations);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching reservations:', err);\n//       setError('Failed to fetch reservations.');\n//     }\n//   };\n\n//   const handleFilterSubmit = (e) => {\n//     e.preventDefault();\n//     // Choose filter type\n//     if (filterType && filterValue) {\n//       fetchReservations({\n//         [filterType]: filterValue,\n//       });\n//     } else {\n//       fetchReservations(); // Fetch without filter if nothing is selected\n//     }\n//   };\n\n//   const deleteReservation = async (reservationId) => {\n//     try {\n//       await axiosInstance.delete(`/admin/reservations/${reservationId}`);\n//       setReservations(reservations.filter((r) => r.ReservationID !== reservationId));\n//     } catch (err) {\n//       console.error('Error deleting reservation:', err);\n//       setError('Failed to delete reservation.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Reservations</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Filter Form */}\n//       <form onSubmit={handleFilterSubmit}>\n//         <div>\n//           <label>Filter By: </label>\n//           <select\n//             value={filterType}\n//             onChange={(e) => setFilterType(e.target.value)}\n//           >\n//             <option value=\"\">Select Filter Type</option>\n//             <option value=\"customerName\">Customer Name</option>\n//             <option value=\"transitLine\">Transit Line</option>\n//           </select>\n//         </div>\n//         <div>\n//           <label>Filter Value: </label>\n//           <input\n//             type=\"text\"\n//             value={filterValue}\n//             onChange={(e) => setFilterValue(e.target.value)}\n//           />\n//         </div>\n//         <button type=\"submit\">Apply Filter</button>\n//       </form>\n\n//       {/* Reservations Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Reservation ID</th>\n//             <th>Customer</th>\n//             <th>Transit Line</th>\n//             <th>Total Fare</th>\n//             <th>Trip Type</th>\n//             <th>Departure</th>\n//             <th>Arrival</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {reservations.map((reservation) => (\n//             <tr key={reservation.ReservationID}>\n//               <td>{reservation.ReservationID}</td>\n//               <td>{reservation.CustomerFirstName} {reservation.CustomerLastName}</td>\n//               <td>{reservation.TransitLine}</td>\n//               <td>${reservation.TotalFare.toFixed(2)}</td>\n//               <td>{reservation.TripType}</td>\n//               <td>{reservation.DepartureStation}</td>\n//               <td>{reservation.ArrivalStation}</td>\n//               <td>\n//                 <button onClick={() => deleteReservation(reservation.ReservationID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ReservationsTab;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ReservationsTab = () => {\n  const [reservations, setReservations] = useState([]);\n  const [error, setError] = useState('');\n  const [filterType, setFilterType] = useState(''); // to store whether filtering by 'CustomerName' or 'TransitLine'\n  const [filterValue, setFilterValue] = useState(''); // to store the input value for filtering\n\n  useEffect(() => {\n    fetchReservations();\n  }, []);\n\n  const fetchReservations = async (filters = {}) => {\n    try {\n      const response = await axiosInstance.get('/admin/reservations', {\n        params: filters,\n      });\n      setReservations(response.data.reservations);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching reservations:', err);\n      setError('Failed to fetch reservations.');\n    }\n  };\n\n  const handleFilterSubmit = (e) => {\n    e.preventDefault();\n    // Choose filter type\n    if (filterType && filterValue) {\n      fetchReservations({\n        [filterType]: filterValue,\n      });\n    } else {\n      fetchReservations(); // Fetch without filter if nothing is selected\n    }\n  };\n\n  const handleClearFilter = () => {\n    setFilterType(''); // Clear filter type\n    setFilterValue(''); // Clear filter value\n    fetchReservations(); // Fetch all reservations without filters\n  };\n\n  const deleteReservation = async (reservationId) => {\n    try {\n      await axiosInstance.delete(`/admin/reservations/${reservationId}`);\n      setReservations(reservations.filter((r) => r.ReservationID !== reservationId));\n    } catch (err) {\n      console.error('Error deleting reservation:', err);\n      setError('Failed to delete reservation.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Reservations</h2>\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Filter Form */}\n      <form onSubmit={handleFilterSubmit}>\n        <div>\n          <label>Filter By: </label>\n          <select\n            value={filterType}\n            onChange={(e) => setFilterType(e.target.value)}\n          >\n            <option value=\"\">Select Filter Type</option>\n            <option value=\"customerName\">Customer Name</option>\n            <option value=\"transitLine\">Transit Line</option>\n          </select>\n        </div>\n        <div>\n          <label>Filter Value: </label>\n          <input\n            type=\"text\"\n            value={filterValue}\n            onChange={(e) => setFilterValue(e.target.value)}\n          />\n        </div>\n        <button type=\"submit\">Apply Filter</button>\n        <button type=\"button\" onClick={handleClearFilter} style={{ marginLeft: '10px' }}>\n          Clear Filter\n        </button>\n      </form>\n\n      {/* Reservations Table */}\n      <table>\n        <thead>\n          <tr>\n            <th>Reservation ID</th>\n            <th>Customer</th>\n            <th>Transit Line</th>\n            <th>Total Fare</th>\n            <th>Trip Type</th>\n            <th>Departure</th>\n            <th>Arrival</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {reservations.map((reservation) => (\n            <tr key={reservation.ReservationID}>\n              <td>{reservation.ReservationID}</td>\n              <td>{reservation.CustomerFirstName} {reservation.CustomerLastName}</td>\n              <td>{reservation.TransitLine}</td>\n              <td>${reservation.TotalFare.toFixed(2)}</td>\n              <td>{reservation.TripType}</td>\n              <td>{reservation.DepartureStation}</td>\n              <td>{reservation.ArrivalStation}</td>\n              <td>\n                <button onClick={() => deleteReservation(reservation.ReservationID)}>Delete</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ReservationsTab;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}