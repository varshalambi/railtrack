{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/AskQuestionTab.js\",\n  _s = $RefreshSig$();\n// // // AskQuestionTab.js\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const AskQuestionTab = () => {\n// //   const [question, setQuestion] = useState('');\n// //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //   }, []);\n\n// //   // Fetch all previously asked questions by the customer\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer/questions');\n// //       setSubmittedQuestions(response.data.questions);\n// //     } catch (err) {\n// //       console.error('Error fetching questions:', err);\n// //     }\n// //   };\n\n// //   // Handle question submission\n// //   const handleSubmitQuestion = async () => {\n// //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n\n// //     if (!questionText.trim()) {\n// //       setError('Question cannot be empty.');\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.post('/customer/questions', {\n// //         customerId, // Include customerId\n// //         questionText,\n// //       });\n\n// //       setSuccess('Your question has been submitted successfully!');\n// //       setQuestionText('');\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error submitting question:', err);\n// //       setError('Failed to submit the question. Please try again.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Ask a Question</h3>\n// //       <div>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter your question\"\n// //           value={question}\n// //           onChange={(e) => setQuestion(e.target.value)}\n// //         />\n// //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// //       </div>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       <div>\n// //         <h4>Your Submitted Questions</h4>\n// //         {submittedQuestions.length > 0 ? (\n// //           <ul>\n// //             {submittedQuestions.map((q) => (\n// //               <li key={q.QuestionID}>\n// //                 <p><strong>Question:</strong> {q.Question}</p>\n// //                 <p><strong>Answer:</strong> {q.Answer ? q.Answer : 'Not answered yet'}</p>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         ) : (\n// //           <p>No questions submitted yet.</p>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default AskQuestionTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   // Fetch all previously asked questions by the customer\n//   const fetchQuestions = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Ensure customer ID exists\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer/questions', {\n//         params: { customerId }, // Pass customerId as query param\n//       });\n//       setSubmittedQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   // Handle question submission\n//   const handleSubmitQuestion = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     if (!question.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.post('/customer/questions', {\n//         customerId, // Include customerId\n//         questionText: question, // Use the correct state variable\n//       });\n\n//       setSuccess('Your question has been submitted successfully!');\n//       setQuestion(''); // Clear the input field\n//       fetchQuestions(); // Re-fetch questions to update the list\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit the question. Please try again.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       <div>\n//         <h4>Your Submitted Questions</h4>\n//         {submittedQuestions.length > 0 ? (\n//           <ul>\n//             {submittedQuestions.map((q) => (\n//               <li key={q.QuestionID}>\n//                 <p>\n//                   <strong>Question:</strong> {q.Question}\n//                 </p>\n//                 <p>\n//                   <strong>Answer:</strong>{' '}\n//                   {q.Answer ? q.Answer : 'Not answered yet'}\n//                 </p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No questions submitted yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AskQuestionTab = () => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [submittedQuestions, setSubmittedQuestions] = useState([]);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [editQuestionId, setEditQuestionId] = useState(null);\n  const [editText, setEditText] = useState('');\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  const fetchQuestions = async () => {\n    const customerId = localStorage.getItem('customerId');\n    if (!customerId) {\n      setError('Customer ID not found. Please log in again.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.get('/customer/questions');\n      setSubmittedQuestions(response.data);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching questions:', err);\n      setError('Failed to fetch questions.');\n    }\n  };\n  const handleSubmitQuestion = async () => {\n    const customerId = localStorage.getItem('customerId');\n    if (!customerId) {\n      setError('Customer ID not found.');\n      return;\n    }\n    if (!question.trim()) {\n      setError('Question cannot be empty.');\n      return;\n    }\n    try {\n      await axiosInstance.post('/customer/questions', {\n        customerId,\n        questionText: question\n      });\n      setSuccess('Question submitted successfully!');\n      setQuestion('');\n      fetchQuestions();\n      setError('');\n    } catch (err) {\n      console.error('Error submitting question:', err);\n      setError('Failed to submit question.');\n    }\n  };\n  const handleDeleteQuestion = async questionId => {\n    try {\n      await axiosInstance.delete(`/customer/questions/${questionId}`);\n      setSuccess('Question deleted successfully!');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error deleting question:', err);\n      setError('Failed to delete question.');\n    }\n  };\n  const handleEditQuestion = async () => {\n    try {\n      await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n        updatedQuestion: editText\n      });\n      setSuccess('Question updated successfully!');\n      setEditQuestionId(null);\n      setEditText('');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error updating question:', err);\n      setError('Failed to update question.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Ask a Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your question\",\n        value: question,\n        onChange: e => setQuestion(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitQuestion,\n        children: \"Submit Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Your Submitted Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), submittedQuestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: submittedQuestions.map(q => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: editQuestionId === q.QuestionID ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText,\n            onChange: e => setEditText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleEditQuestion,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditQuestionId(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Question:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 22\n            }, this), \" \", q.Question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 22\n            }, this), \" \", q.Answer || 'Not answered yet']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteQuestion(q.QuestionID),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setEditQuestionId(q.QuestionID);\n              setEditText(q.Question);\n            },\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }, this)\n      }, q.QuestionID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No questions submitted yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n};\n_s(AskQuestionTab, \"rgstFzvN55bnY2gjz+9Ly9BJI30=\");\n_c = AskQuestionTab;\nexport default AskQuestionTab;\nvar _c;\n$RefreshReg$(_c, \"AskQuestionTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","AskQuestionTab","_s","question","setQuestion","submittedQuestions","setSubmittedQuestions","error","setError","success","setSuccess","editQuestionId","setEditQuestionId","editText","setEditText","fetchQuestions","customerId","localStorage","getItem","response","get","data","err","console","handleSubmitQuestion","trim","post","questionText","handleDeleteQuestion","questionId","delete","handleEditQuestion","put","updatedQuestion","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","className","length","map","q","QuestionID","Question","Answer","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/AskQuestionTab.js"],"sourcesContent":["// // // AskQuestionTab.js\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const AskQuestionTab = () => {\n// //   const [question, setQuestion] = useState('');\n// //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //   }, []);\n\n// //   // Fetch all previously asked questions by the customer\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer/questions');\n// //       setSubmittedQuestions(response.data.questions);\n// //     } catch (err) {\n// //       console.error('Error fetching questions:', err);\n// //     }\n// //   };\n\n// //   // Handle question submission\n// //   const handleSubmitQuestion = async () => {\n// //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n  \n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n  \n// //     if (!questionText.trim()) {\n// //       setError('Question cannot be empty.');\n// //       return;\n// //     }\n  \n// //     try {\n// //       const response = await axiosInstance.post('/customer/questions', {\n// //         customerId, // Include customerId\n// //         questionText,\n// //       });\n  \n// //       setSuccess('Your question has been submitted successfully!');\n// //       setQuestionText('');\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error submitting question:', err);\n// //       setError('Failed to submit the question. Please try again.');\n// //     }\n// //   };\n  \n\n// //   return (\n// //     <div>\n// //       <h3>Ask a Question</h3>\n// //       <div>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter your question\"\n// //           value={question}\n// //           onChange={(e) => setQuestion(e.target.value)}\n// //         />\n// //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// //       </div>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       <div>\n// //         <h4>Your Submitted Questions</h4>\n// //         {submittedQuestions.length > 0 ? (\n// //           <ul>\n// //             {submittedQuestions.map((q) => (\n// //               <li key={q.QuestionID}>\n// //                 <p><strong>Question:</strong> {q.Question}</p>\n// //                 <p><strong>Answer:</strong> {q.Answer ? q.Answer : 'Not answered yet'}</p>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         ) : (\n// //           <p>No questions submitted yet.</p>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default AskQuestionTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   // Fetch all previously asked questions by the customer\n//   const fetchQuestions = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Ensure customer ID exists\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer/questions', {\n//         params: { customerId }, // Pass customerId as query param\n//       });\n//       setSubmittedQuestions(response.data.questions);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   // Handle question submission\n//   const handleSubmitQuestion = async () => {\n//     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n//     if (!customerId) {\n//       setError('Customer ID not found. Please log in again.');\n//       return;\n//     }\n\n//     if (!question.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.post('/customer/questions', {\n//         customerId, // Include customerId\n//         questionText: question, // Use the correct state variable\n//       });\n\n//       setSuccess('Your question has been submitted successfully!');\n//       setQuestion(''); // Clear the input field\n//       fetchQuestions(); // Re-fetch questions to update the list\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit the question. Please try again.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       <div>\n//         <h4>Your Submitted Questions</h4>\n//         {submittedQuestions.length > 0 ? (\n//           <ul>\n//             {submittedQuestions.map((q) => (\n//               <li key={q.QuestionID}>\n//                 <p>\n//                   <strong>Question:</strong> {q.Question}\n//                 </p>\n//                 <p>\n//                   <strong>Answer:</strong>{' '}\n//                   {q.Answer ? q.Answer : 'Not answered yet'}\n//                 </p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No questions submitted yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst AskQuestionTab = () => {\n  const [question, setQuestion] = useState('');\n  const [submittedQuestions, setSubmittedQuestions] = useState([]);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [editQuestionId, setEditQuestionId] = useState(null);\n  const [editText, setEditText] = useState('');\n\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  const fetchQuestions = async () => {\n    const customerId = localStorage.getItem('customerId');\n    if (!customerId) {\n      setError('Customer ID not found. Please log in again.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.get('/customer/questions');\n      setSubmittedQuestions(response.data);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching questions:', err);\n      setError('Failed to fetch questions.');\n    }\n  };\n\n  const handleSubmitQuestion = async () => {\n    const customerId = localStorage.getItem('customerId');\n    if (!customerId) {\n      setError('Customer ID not found.');\n      return;\n    }\n    if (!question.trim()) {\n      setError('Question cannot be empty.');\n      return;\n    }\n    try {\n      await axiosInstance.post('/customer/questions', {\n        customerId,\n        questionText: question,\n      });\n      setSuccess('Question submitted successfully!');\n      setQuestion('');\n      fetchQuestions();\n      setError('');\n    } catch (err) {\n      console.error('Error submitting question:', err);\n      setError('Failed to submit question.');\n    }\n  };\n\n  const handleDeleteQuestion = async (questionId) => {\n    try {\n      await axiosInstance.delete(`/customer/questions/${questionId}`);\n      setSuccess('Question deleted successfully!');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error deleting question:', err);\n      setError('Failed to delete question.');\n    }\n  };\n\n  const handleEditQuestion = async () => {\n    try {\n      await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n        updatedQuestion: editText,\n      });\n      setSuccess('Question updated successfully!');\n      setEditQuestionId(null);\n      setEditText('');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error updating question:', err);\n      setError('Failed to update question.');\n    }\n  };\n\n  return (\n    <div>\n      <h3>Ask a Question</h3>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your question\"\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n        />\n        <button onClick={handleSubmitQuestion}>Submit Question</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n      {success && <p className=\"success\">{success}</p>}\n\n      <h4>Your Submitted Questions</h4>\n      {submittedQuestions.length > 0 ? (\n        <ul>\n          {submittedQuestions.map((q) => (\n            <li key={q.QuestionID}>\n              {editQuestionId === q.QuestionID ? (\n                <div>\n                  <input\n                    type=\"text\"\n                    value={editText}\n                    onChange={(e) => setEditText(e.target.value)}\n                  />\n                  <button onClick={handleEditQuestion}>Save</button>\n                  <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n                </div>\n              ) : (\n                <div>\n                  <p><strong>Question:</strong> {q.Question}</p>\n                  <p><strong>Answer:</strong> {q.Answer || 'Not answered yet'}</p>\n                  <button onClick={() => handleDeleteQuestion(q.QuestionID)}>Delete</button>\n                  <button onClick={() => {\n                    setEditQuestionId(q.QuestionID);\n                    setEditText(q.Question);\n                  }}>\n                    Edit\n                  </button>\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No questions submitted yet.</p>\n      )}\n    </div>\n  );\n};\n\nexport default AskQuestionTab;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}