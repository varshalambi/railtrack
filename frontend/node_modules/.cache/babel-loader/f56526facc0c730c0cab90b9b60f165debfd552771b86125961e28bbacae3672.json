{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n//   const [editMode, setEditMode] = useState(null);\n//   const [formValues, setFormValues] = useState({});\n\n//   // Fetch schedules on component mount\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Function to fetch train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/representative/schedules');\n//       setSchedules(response.data.schedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle delete schedule\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   // Handle edit schedule\n//   const editSchedule = (schedule) => {\n//     setEditMode(schedule.ScheduleID);\n//     setFormValues({\n//       TransitLineName: schedule.TransitLineName,\n//       DepartureDateTime: schedule.DepartureDateTime,\n//       ArrivalDateTime: schedule.ArrivalDateTime,\n//       TravelTime: schedule.TravelTime,\n//     });\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormValues({ ...formValues, [name]: value });\n//   };\n\n//   // Handle save edited schedule\n//   const saveSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n//       setEditMode(null);\n//       fetchSchedules();\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update schedule.');\n//     }\n//   };\n\n//   // Render\n//   return (\n//     <div>\n//       <h2>Manage Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line</th>\n//             <th>Departure Time</th>\n//             <th>Arrival Time</th>\n//             <th>Travel Time</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"text\"\n//                     name=\"TransitLineName\"\n//                     value={formValues.TransitLineName}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TransitLineName\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"DepartureDateTime\"\n//                     value={formValues.DepartureDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.DepartureDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"ArrivalDateTime\"\n//                     value={formValues.ArrivalDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.ArrivalDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"time\"\n//                     name=\"TravelTime\"\n//                     value={formValues.TravelTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TravelTime\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <>\n//                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={() => setEditMode(null)}>Cancel</button>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n//                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//                   </>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime}</td>\n//               <td>{schedule.DepartureDateTime}</td>\n//               <td>{schedule.TrainID}</td>\n//               <td>\n//                 <button\n//                   onClick={() => console.log('Edit schedule')}\n//                   style={{ marginRight: '5px' }}\n//                 >\n//                   Edit\n//                 </button>\n//                 {schedule.ReservationCount === 0 ? (\n//                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                 ) : (\n//                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ManageSchedulesTab = () => {\n  _s();\n  const [schedules, setSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchSchedules();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = schedule => {\n    setEditingSchedule(schedule);\n  };\n\n  // Handle input change for editable fields\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditingSchedule(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async scheduleId => {\n    try {\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async scheduleId => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter(schedule => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 877,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 878,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Schedule ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 882,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transit Line Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Travel Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival DateTime\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 885,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure DateTime\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 886,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Train ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 888,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 881,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: schedules.map(schedule => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ScheduleID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 896,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"TransitLineName\",\n                value: editingSchedule.TransitLineName,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 898,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 897,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"TravelTime\",\n                value: editingSchedule.TravelTime,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 906,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"ArrivalDateTime\",\n                value: editingSchedule.ArrivalDateTime,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 914,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"DepartureDateTime\",\n                value: editingSchedule.DepartureDateTime,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 922,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 921,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"TrainID\",\n                value: editingSchedule.TrainID,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 930,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 929,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSave(schedule.ScheduleID),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 938,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleCancel,\n                style: {\n                  marginLeft: '5px'\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 939,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 937,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ScheduleID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 944,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TransitLineName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 945,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TravelTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ArrivalDateTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 947,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.DepartureDateTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 948,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TrainID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 949,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleEditClick(schedule),\n                style: {\n                  marginRight: '5px'\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 951,\n                columnNumber: 21\n              }, this), schedule.ReservationCount === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDelete(schedule.ScheduleID),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 955,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: true,\n                title: \"Cannot delete. Reservations exist.\",\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 950,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, schedule.ScheduleID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 891,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 876,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageSchedulesTab, \"16Yy5jzPqNz7QNVR7si5fExWyA0=\");\n_c = ManageSchedulesTab;\nexport default ManageSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"ManageSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","Fragment","_Fragment","ManageSchedulesTab","_s","schedules","setSchedules","editingSchedule","setEditingSchedule","error","setError","fetchSchedules","response","get","data","trainSchedules","err","console","handleEditClick","schedule","handleInputChange","e","name","value","target","prev","handleSave","scheduleId","put","handleCancel","handleDelete","delete","filter","ScheduleID","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","type","TransitLineName","onChange","TravelTime","ArrivalDateTime","DepartureDateTime","TrainID","onClick","style","marginLeft","marginRight","ReservationCount","disabled","title","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n//   const [editMode, setEditMode] = useState(null);\n//   const [formValues, setFormValues] = useState({});\n\n//   // Fetch schedules on component mount\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Function to fetch train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/representative/schedules');\n//       setSchedules(response.data.schedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle delete schedule\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   // Handle edit schedule\n//   const editSchedule = (schedule) => {\n//     setEditMode(schedule.ScheduleID);\n//     setFormValues({\n//       TransitLineName: schedule.TransitLineName,\n//       DepartureDateTime: schedule.DepartureDateTime,\n//       ArrivalDateTime: schedule.ArrivalDateTime,\n//       TravelTime: schedule.TravelTime,\n//     });\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormValues({ ...formValues, [name]: value });\n//   };\n\n//   // Handle save edited schedule\n//   const saveSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n//       setEditMode(null);\n//       fetchSchedules();\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update schedule.');\n//     }\n//   };\n\n//   // Render\n//   return (\n//     <div>\n//       <h2>Manage Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line</th>\n//             <th>Departure Time</th>\n//             <th>Arrival Time</th>\n//             <th>Travel Time</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"text\"\n//                     name=\"TransitLineName\"\n//                     value={formValues.TransitLineName}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TransitLineName\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"DepartureDateTime\"\n//                     value={formValues.DepartureDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.DepartureDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"ArrivalDateTime\"\n//                     value={formValues.ArrivalDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.ArrivalDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"time\"\n//                     name=\"TravelTime\"\n//                     value={formValues.TravelTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TravelTime\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <>\n//                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={() => setEditMode(null)}>Cancel</button>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n//                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//                   </>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime}</td>\n//               <td>{schedule.DepartureDateTime}</td>\n//               <td>{schedule.TrainID}</td>\n//               <td>\n//                 <button\n//                   onClick={() => console.log('Edit schedule')}\n//                   style={{ marginRight: '5px' }}\n//                 >\n//                   Edit\n//                 </button>\n//                 {schedule.ReservationCount === 0 ? (\n//                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                 ) : (\n//                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ManageSchedulesTab = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchSchedules();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Handle edit button click\n  const handleEditClick = (schedule) => {\n    setEditingSchedule(schedule);\n  };\n\n  // Handle input change for editable fields\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setEditingSchedule((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle save button click for updating the schedule\n  const handleSave = async (scheduleId) => {\n    try {\n      await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n      setEditingSchedule(null);\n      fetchSchedules(); // Re-fetch schedules to reflect the updates\n    } catch (err) {\n      console.error('Error updating schedule:', err);\n      setError('Failed to update train schedule.');\n    }\n  };\n\n  // Handle cancel button click to cancel editing\n  const handleCancel = () => {\n    setEditingSchedule(null);\n  };\n\n  // Handle delete button click for removing a schedule\n  const handleDelete = async (scheduleId) => {\n    try {\n      await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n      setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n    } catch (err) {\n      console.error('Error deleting schedule:', err);\n      setError('Failed to delete train schedule.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Manage Train Schedules</h2>\n      {error && <p className=\"error\">{error}</p>}\n      <table>\n        <thead>\n          <tr>\n            <th>Schedule ID</th>\n            <th>Transit Line Name</th>\n            <th>Travel Time</th>\n            <th>Arrival DateTime</th>\n            <th>Departure DateTime</th>\n            <th>Train ID</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {schedules.map((schedule) => (\n            <tr key={schedule.ScheduleID}>\n              {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n                <>\n                  <td>{schedule.ScheduleID}</td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"TransitLineName\"\n                      value={editingSchedule.TransitLineName}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"TravelTime\"\n                      value={editingSchedule.TravelTime}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"ArrivalDateTime\"\n                      value={editingSchedule.ArrivalDateTime}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"DepartureDateTime\"\n                      value={editingSchedule.DepartureDateTime}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"TrainID\"\n                      value={editingSchedule.TrainID}\n                      onChange={handleInputChange}\n                    />\n                  </td>\n                  <td>\n                    <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n                    <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n                  </td>\n                </>\n              ) : (\n                <>\n                  <td>{schedule.ScheduleID}</td>\n                  <td>{schedule.TransitLineName}</td>\n                  <td>{schedule.TravelTime}</td>\n                  <td>{schedule.ArrivalDateTime}</td>\n                  <td>{schedule.DepartureDateTime}</td>\n                  <td>{schedule.TrainID}</td>\n                  <td>\n                    <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n                      Edit\n                    </button>\n                    {schedule.ReservationCount === 0 ? (\n                      <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n                    ) : (\n                      <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n                    )}\n                  </td>\n                </>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ManageSchedulesTab;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}