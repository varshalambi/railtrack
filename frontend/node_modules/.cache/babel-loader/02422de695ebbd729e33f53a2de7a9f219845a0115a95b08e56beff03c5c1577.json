{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/TrainSchedulesTab.js\",\n  _s = $RefreshSig$();\n// // // // // TrainSchedulesTab.js\n// // // // import React, { useState } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const TrainSchedulesTab = ({ stations }) => {\n// // // //   const [originStation, setOriginStation] = useState('');\n// // // //   const [destinationStation, setDestinationStation] = useState('');\n// // // //   const [travelDate, setTravelDate] = useState('');\n// // // //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n\n// // // //   const handleSearchSchedules = async () => {\n// // // //     if (!originStation || !destinationStation || !travelDate) {\n// // // //       setError('Please select all fields.');\n// // // //       return;\n// // // //     }\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer/train-schedules', {\n// // // //         params: {\n// // // //           originStation,\n// // // //           destinationStation,\n// // // //           travelDate,\n// // // //         },\n// // // //       });\n// // // //       setAvailableSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching train schedules:', err);\n// // // //       setError('Failed to fetch train schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h3>Search & Book Train Schedules</h3>\n// // // //       <div>\n// // // //         <select\n// // // //           value={originStation}\n// // // //           onChange={(e) => setOriginStation(e.target.value)}\n// // // //         >\n// // // //           <option value=\"\">Select Origin Station</option>\n// // // //           {stations.map((station) => (\n// // // //             <option key={station.StationID} value={station.StationName}>\n// // // //               {station.StationName}\n// // // //             </option>\n// // // //           ))}\n// // // //         </select>\n// // // //         <select\n// // // //           value={destinationStation}\n// // // //           onChange={(e) => setDestinationStation(e.target.value)}\n// // // //         >\n// // // //           <option value=\"\">Select Destination Station</option>\n// // // //           {stations.map((station) => (\n// // // //             <option key={station.StationID} value={station.StationName}>\n// // // //               {station.StationName}\n// // // //             </option>\n// // // //           ))}\n// // // //         </select>\n// // // //         <input\n// // // //           type=\"date\"\n// // // //           value={travelDate}\n// // // //           onChange={(e) => setTravelDate(e.target.value)}\n// // // //         />\n// // // //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// // // //       </div>\n\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {availableSchedules.length > 0 && (\n// // // //         <table>\n// // // //           <thead>\n// // // //             <tr>\n// // // //               <th>Schedule ID</th>\n// // // //               <th>Transit Line Name</th>\n// // // //               <th>Departure Time</th>\n// // // //               <th>Arrival Time</th>\n// // // //               <th>Action</th>\n// // // //             </tr>\n// // // //           </thead>\n// // // //           <tbody>\n// // // //             {availableSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.DepartureDateTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime}</td>\n// // // //                 <td>\n// // // //                   <button>Book Now</button>\n// // // //                 </td>\n// // // //               </tr>\n// // // //             ))}\n// // // //           </tbody>\n// // // //         </table>\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default TrainSchedulesTab;\n\n// // // // import React, { useState } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const TrainSchedulesTab = ({ stations }) => {\n// // // //   const [originStation, setOriginStation] = useState('');\n// // // //   const [destinationStation, setDestinationStation] = useState('');\n// // // //   const [travelDate, setTravelDate] = useState('');\n// // // //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n// // // //   const [successMessage, setSuccessMessage] = useState('');\n\n// // // //   const handleSearchSchedules = async () => {\n// // // //     if (!originStation || !destinationStation || !travelDate) {\n// // // //       setError('Please select all fields.');\n// // // //       return;\n// // // //     }\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer/train-schedules', {\n// // // //         params: {\n// // // //           originStation,\n// // // //           destinationStation,\n// // // //           travelDate,\n// // // //         },\n// // // //       });\n// // // //       setAvailableSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching train schedules:', err);\n// // // //       setError('Failed to fetch train schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleBookNow = async (scheduleId) => {\n// // // //     try {\n// // // //       // Assuming the API takes `scheduleId` and creates a reservation\n// // // //       await axiosInstance.post('/customer/reservations', {\n// // // //         scheduleId,\n// // // //         tripType: 'one-way', // or 'round-trip' depending on your logic\n// // // //       });\n// // // //       setSuccessMessage('Reservation successfully booked!');\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error booking reservation:', err);\n// // // //       setError('Failed to book reservation.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h3>Search & Book Train Schedules</h3>\n// // // //       <div>\n// // // //         <select\n// // // //           value={originStation}\n// // // //           onChange={(e) => setOriginStation(e.target.value)}\n// // // //         >\n// // // //           <option value=\"\">Select Origin Station</option>\n// // // //           {stations.map((station) => (\n// // // //             <option key={station.StationID} value={station.StationName}>\n// // // //               {station.StationName}\n// // // //             </option>\n// // // //           ))}\n// // // //         </select>\n// // // //         <select\n// // // //           value={destinationStation}\n// // // //           onChange={(e) => setDestinationStation(e.target.value)}\n// // // //         >\n// // // //           <option value=\"\">Select Destination Station</option>\n// // // //           {stations.map((station) => (\n// // // //             <option key={station.StationID} value={station.StationName}>\n// // // //               {station.StationName}\n// // // //             </option>\n// // // //           ))}\n// // // //         </select>\n// // // //         <input\n// // // //           type=\"date\"\n// // // //           value={travelDate}\n// // // //           onChange={(e) => setTravelDate(e.target.value)}\n// // // //         />\n// // // //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// // // //       </div>\n\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       {successMessage && <p className=\"success\">{successMessage}</p>}\n\n// // // //       {availableSchedules.length > 0 && (\n// // // //         <table>\n// // // //           <thead>\n// // // //             <tr>\n// // // //               <th>Schedule ID</th>\n// // // //               <th>Transit Line Name</th>\n// // // //               <th>Departure Time</th>\n// // // //               <th>Arrival Time</th>\n// // // //               <th>Action</th>\n// // // //             </tr>\n// // // //           </thead>\n// // // //           <tbody>\n// // // //             {availableSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// // // //                 <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// // // //                 <td>\n// // // //                   <button onClick={() => handleBookNow(schedule.ScheduleID)}>\n// // // //                     Book Now\n// // // //                   </button>\n// // // //                 </td>\n// // // //               </tr>\n// // // //             ))}\n// // // //           </tbody>\n// // // //         </table>\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default TrainSchedulesTab;\n\n// // // // TrainSchedulesTab.js\n// // // import React, { useState } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const TrainSchedulesTab = ({ stations, customerId }) => {\n// // //   const [originStation, setOriginStation] = useState('');\n// // //   const [destinationStation, setDestinationStation] = useState('');\n// // //   const [travelDate, setTravelDate] = useState('');\n// // //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n// // //   const [success, setSuccess] = useState('');\n\n// // //   const handleSearchSchedules = async () => {\n// // //     if (!originStation || !destinationStation || !travelDate) {\n// // //       setError('Please select all fields.');\n// // //       setSuccess('');\n// // //       return;\n// // //     }\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer/train-schedules', {\n// // //         params: {\n// // //           originStation,\n// // //           destinationStation,\n// // //           travelDate,\n// // //         },\n// // //       });\n// // //       setAvailableSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching train schedules:', err);\n// // //       setError('Failed to fetch train schedules.');\n// // //       setSuccess('');\n// // //     }\n// // //   };\n\n// // //   const handleBookNow = async (scheduleId) => {\n// // //     try {\n// // //       const payload = {\n// // //         customerId,\n// // //         scheduleId,\n// // //         originStation,\n// // //         destinationStation,\n// // //         tripType: 'one-way', // Adjust if you want to allow round-trip bookings\n// // //       };\n// // //       const response = await axiosInstance.post('/customer/reservations', payload);\n// // //       setSuccess('Reservation successfully booked!');\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error booking reservation:', err);\n// // //       setError('Failed to book reservation.');\n// // //       setSuccess('');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h3>Search & Book Train Schedules</h3>\n// // //       <div>\n// // //         <select\n// // //           value={originStation}\n// // //           onChange={(e) => setOriginStation(e.target.value)}\n// // //         >\n// // //           <option value=\"\">Select Origin Station</option>\n// // //           {stations.map((station) => (\n// // //             <option key={station.StationID} value={station.StationName}>\n// // //               {station.StationName}\n// // //             </option>\n// // //           ))}\n// // //         </select>\n// // //         <select\n// // //           value={destinationStation}\n// // //           onChange={(e) => setDestinationStation(e.target.value)}\n// // //         >\n// // //           <option value=\"\">Select Destination Station</option>\n// // //           {stations.map((station) => (\n// // //             <option key={station.StationID} value={station.StationName}>\n// // //               {station.StationName}\n// // //             </option>\n// // //           ))}\n// // //         </select>\n// // //         <input\n// // //           type=\"date\"\n// // //           value={travelDate}\n// // //           onChange={(e) => setTravelDate(e.target.value)}\n// // //         />\n// // //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// // //       </div>\n\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       {success && <p className=\"success\">{success}</p>}\n\n// // //       {availableSchedules.length > 0 && (\n// // //         <table>\n// // //           <thead>\n// // //             <tr>\n// // //               <th>Schedule ID</th>\n// // //               <th>Transit Line Name</th>\n// // //               <th>Departure Time</th>\n// // //               <th>Arrival Time</th>\n// // //               <th>Action</th>\n// // //             </tr>\n// // //           </thead>\n// // //           <tbody>\n// // //             {availableSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.DepartureDateTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime}</td>\n// // //                 <td>\n// // //                   <button onClick={() => handleBookNow(schedule.ScheduleID)}>\n// // //                     Book Now\n// // //                   </button>\n// // //                 </td>\n// // //               </tr>\n// // //             ))}\n// // //           </tbody>\n// // //         </table>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default TrainSchedulesTab;\n\n// // // TrainSchedulesTab.js\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n\n// // const TrainSchedulesTab = ({ stations }) => {\n// //   const [originStation, setOriginStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n// //   const [selectedSchedule, setSelectedSchedule] = useState(null);\n// //   const [passengerType, setPassengerType] = useState(\"adult\");\n// //   const [reservationDetails, setReservationDetails] = useState(null);\n\n// //   useEffect(() => {\n// //     // Clear selected schedule when inputs change\n// //     setSelectedSchedule(null);\n// //   }, [originStation, destinationStation, travelDate]);\n\n// //   const handleSearchSchedules = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(\"/customer/train-schedules\", {\n// //         params: {\n// //           originStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setAvailableSchedules(response.data.trainSchedules);\n// //       setError(\"\");\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules.\");\n// //     }\n// //   };\n\n// //   const handleBookNow = async (schedule) => {\n// //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.post('/customer/reservations', {\n// //         customerId,\n// //         transitLineName: schedule.TransitLineName,\n// //         originStation,\n// //         destinationStation,\n// //         travelDate,\n// //         tripType: \"One-Way\",\n// //         isRoundTrip: false,\n// //         passengerType,\n// //       });\n\n// //       setReservationDetails({\n// //         reservationId: response.data.reservationId,\n// //         fare: response.data.fare,\n// //       });\n\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error creating reservation:', err);\n// //       setError('Failed to create reservation. Please try again.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Search & Book Train Schedules</h3>\n// //       <div>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Origin Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Destination Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// //       </div>\n\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {availableSchedules.length > 0 && (\n// //         <div>\n// //           <h4>Available Train Schedules</h4>\n// //           <table>\n// //             <thead>\n// //               <tr>\n// //                 <th>Schedule ID</th>\n// //                 <th>Transit Line Name</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //                 <th>Action</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {availableSchedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.DepartureDateTime}</td>\n// //                   <td>{schedule.ArrivalDateTime}</td>\n// //                   <td>\n// //                     <button onClick={() => handleBookNow(schedule)}>\n// //                       Book Now\n// //                     </button>\n// //                   </td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n\n// //       {selectedSchedule && (\n// //         <div>\n// //           <h4>Passenger Details</h4>\n// //           <select\n// //             value={passengerType}\n// //             onChange={(e) => setPassengerType(e.target.value)}\n// //           >\n// //             <option value=\"adult\">Adult</option>\n// //             <option value=\"child\">Child</option>\n// //             <option value=\"senior\">Senior</option>\n// //             <option value=\"disabled\">Disabled</option>\n// //           </select>\n// //           <button onClick={handleBookNow}>Confirm Reservation</button>\n// //         </div>\n// //       )}\n\n// //       {reservationDetails && (\n// //         <div>\n// //           <h4>Reservation Successful!</h4>\n// //           <p>Reservation ID: {reservationDetails.reservationId}</p>\n// //           <p>Total Fare: ${reservationDetails.fare}</p>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default TrainSchedulesTab;\n\n// import React, { useState, useEffect } from \"react\";\n// import axiosInstance from \"../utils/axiosInstance\";\n\n// const TrainSchedulesTab = ({ stations }) => {\n//   const [originStation, setOriginStation] = useState(\"\");\n//   const [destinationStation, setDestinationStation] = useState(\"\");\n//   const [travelDate, setTravelDate] = useState(\"\");\n//   const [availableSchedules, setAvailableSchedules] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [passengerType, setPassengerType] = useState(\"adult\");\n//   const [reservationDetails, setReservationDetails] = useState(null);\n\n//   // Clear reservation details when inputs change\n//   useEffect(() => {\n//     setReservationDetails(null);\n//   }, [originStation, destinationStation, travelDate]);\n\n//   // Search for train schedules\n//   const handleSearchSchedules = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError(\"Please select all fields.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get(\"/customer/train-schedules\", {\n//         params: {\n//           originStation,\n//           destinationStation,\n//           travelDate,\n//         },\n//       });\n\n//       setAvailableSchedules(response.data.trainSchedules);\n//       setError(\"\");\n//     } catch (err) {\n//       console.error(\"Error fetching train schedules:\", err);\n//       setError(\"Failed to fetch train schedules.\");\n//     }\n//   };\n\n//   // Book a reservation\n//   const handleBookNow = async (schedule) => {\n//     const customerId = localStorage.getItem(\"customerId\"); // Retrieve customer ID from localStorage\n//     if (!customerId) {\n//       setError(\"Customer ID not found. Please log in again.\");\n//       return;\n//     }\n\n//     try {\n//       const payload = {\n//         customerId,\n//         transitLineName: schedule.TransitLineName,\n//         originStation,\n//         destinationStation,\n//         travelDate,\n//         tripType: \"One-Way\", // For now, it defaults to One-Way\n//         isRoundTrip: false,\n//         passengerType,\n//       };\n\n//       const response = await axiosInstance.post(\"/customer/reservations\", payload);\n//       setReservationDetails({\n//         reservationId: response.data.reservationId,\n//         fare: response.data.fare,\n//       });\n//       setError(\"\");\n//     } catch (err) {\n//       console.error(\"Error creating reservation:\", err);\n//       setError(\"Failed to create reservation. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Search & Book Train Schedules</h3>\n\n//       {/* Search Inputs */}\n//       <div>\n//         <select value={originStation} onChange={(e) => setOriginStation(e.target.value)}>\n//           <option value=\"\">Select Origin Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n//           <option value=\"\">Select Destination Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <input\n//           type=\"date\"\n//           value={travelDate}\n//           onChange={(e) => setTravelDate(e.target.value)}\n//         />\n\n//         <button onClick={handleSearchSchedules}>Search Schedules</button>\n//       </div>\n\n//       {/* Error Messages */}\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Train Schedule Results */}\n//       {availableSchedules.length > 0 && (\n//         <div>\n//           <h4>Available Train Schedules</h4>\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Schedule ID</th>\n//                 <th>Transit Line Name</th>\n//                 <th>Departure Time</th>\n//                 <th>Arrival Time</th>\n//                 <th>Passenger Type</th>\n//                 <th>Action</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {availableSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n//                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>\n//                     <select\n//                       value={passengerType}\n//                       onChange={(e) => setPassengerType(e.target.value)}\n//                     >\n//                       <option value=\"adult\">Adult</option>\n//                       <option value=\"child\">Child</option>\n//                       <option value=\"senior\">Senior</option>\n//                       <option value=\"disabled\">Disabled</option>\n//                     </select>\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleBookNow(schedule)}>Book Now</button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {/* Success Message */}\n//       {reservationDetails && (\n//         <div>\n//           <h4>Reservation Successful!</h4>\n//           <p>Reservation ID: {reservationDetails.reservationId}</p>\n//           <p>Total Fare: ${reservationDetails.fare}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TrainSchedulesTab;\n\nimport React, { useState, useEffect } from \"react\";\nimport axiosInstance from \"../utils/axiosInstance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrainSchedulesTab = ({\n  stations\n}) => {\n  _s();\n  const [originStation, setOriginStation] = useState(\"\");\n  const [destinationStation, setDestinationStation] = useState(\"\");\n  const [travelDate, setTravelDate] = useState(\"\");\n  const [availableSchedules, setAvailableSchedules] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [passengerType, setPassengerType] = useState(\"adult\");\n  const [reservationDetails, setReservationDetails] = useState(null);\n  const [selectedSchedule, setSelectedSchedule] = useState(null);\n  const [roundTrip, setRoundTrip] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Clear reservation details when inputs change\n  useEffect(() => {\n    setReservationDetails(null);\n    setSelectedSchedule(null);\n  }, [originStation, destinationStation, travelDate]);\n\n  // Search for train schedules\n  const handleSearchSchedules = async () => {\n    if (!originStation || !destinationStation || !travelDate) {\n      setError(\"Please select all fields.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"/customer/train-schedules\", {\n        params: {\n          originStation,\n          destinationStation,\n          travelDate\n        }\n      });\n      setAvailableSchedules(response.data.trainSchedules);\n      setError(\"\");\n    } catch (err) {\n      console.error(\"Error fetching train schedules:\", err);\n      setError(\"Failed to fetch train schedules.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Book a reservation\n  const handleBookNow = async schedule => {\n    const customerId = localStorage.getItem(\"customerId\"); // Retrieve customer ID from localStorage\n    if (!customerId) {\n      setError(\"Customer ID not found. Please log in again.\");\n      return;\n    }\n    try {\n      setLoading(true);\n      const payload = {\n        customerId,\n        transitLineName: schedule.TransitLineName,\n        trainId: schedule.TrainID,\n        originStation,\n        destinationStation,\n        travelDate,\n        tripType: \"One-Way\",\n        isRoundTrip: roundTrip,\n        passengerType\n      };\n      const response = await axiosInstance.post(\"/customer/reservations\", payload);\n      setReservationDetails({\n        reservationId: response.data.reservationId,\n        fare: response.data.fare\n      });\n      setError(\"\");\n    } catch (err) {\n      console.error(\"Error creating reservation:\", err);\n      setError(\"Failed to create reservation. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search & Book Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: originStation,\n        onChange: e => setOriginStation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Origin Station\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: destinationStation,\n        onChange: e => setDestinationStation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Destination Station\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: travelDate,\n        onChange: e => setTravelDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchSchedules,\n        disabled: loading,\n        children: loading ? \"Searching...\" : \"Search Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 17\n    }, this), availableSchedules.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Available Train Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Schedule ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transit Line Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 807,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Train ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 810,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Passenger Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 811,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Round Trip\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: availableSchedules.map(schedule => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ScheduleID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 819,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TransitLineName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TrainID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(schedule.DepartureDateTime).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 822,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(schedule.ArrivalDateTime).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: passengerType,\n                onChange: e => setPassengerType(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"adult\",\n                  children: \"Adult\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 829,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"child\",\n                  children: \"Child\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 830,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"senior\",\n                  children: \"Senior\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 831,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"disabled\",\n                  children: \"Disabled\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                onChange: () => setRoundTrip(!roundTrip)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 836,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 835,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleBookNow(schedule),\n                disabled: loading,\n                children: loading ? \"Booking...\" : \"Book Now\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 842,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 13\n            }, this)]\n          }, schedule.ScheduleID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 818,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 9\n    }, this), reservationDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Reservation Successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Reservation ID: \", reservationDetails.reservationId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Fare: $\", reservationDetails.fare]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 855,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 762,\n    columnNumber: 5\n  }, this);\n};\n_s(TrainSchedulesTab, \"2AfVsJrcO5SP2N/2qeENqk9ewWc=\");\n_c = TrainSchedulesTab;\nexport default TrainSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"TrainSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","TrainSchedulesTab","stations","_s","originStation","setOriginStation","destinationStation","setDestinationStation","travelDate","setTravelDate","availableSchedules","setAvailableSchedules","error","setError","passengerType","setPassengerType","reservationDetails","setReservationDetails","selectedSchedule","setSelectedSchedule","roundTrip","setRoundTrip","loading","setLoading","handleSearchSchedules","response","get","params","data","trainSchedules","err","console","handleBookNow","schedule","customerId","localStorage","getItem","payload","transitLineName","TransitLineName","trainId","TrainID","tripType","isRoundTrip","post","reservationId","fare","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","station","StationName","StationID","type","onClick","disabled","className","length","ScheduleID","Date","DepartureDateTime","toLocaleString","ArrivalDateTime","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/TrainSchedulesTab.js"],"sourcesContent":["\n// // // // // TrainSchedulesTab.js\n// // // // import React, { useState } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const TrainSchedulesTab = ({ stations }) => {\n// // // //   const [originStation, setOriginStation] = useState('');\n// // // //   const [destinationStation, setDestinationStation] = useState('');\n// // // //   const [travelDate, setTravelDate] = useState('');\n// // // //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n\n// // // //   const handleSearchSchedules = async () => {\n// // // //     if (!originStation || !destinationStation || !travelDate) {\n// // // //       setError('Please select all fields.');\n// // // //       return;\n// // // //     }\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer/train-schedules', {\n// // // //         params: {\n// // // //           originStation,\n// // // //           destinationStation,\n// // // //           travelDate,\n// // // //         },\n// // // //       });\n// // // //       setAvailableSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching train schedules:', err);\n// // // //       setError('Failed to fetch train schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h3>Search & Book Train Schedules</h3>\n// // // //       <div>\n// // // //         <select\n// // // //           value={originStation}\n// // // //           onChange={(e) => setOriginStation(e.target.value)}\n// // // //         >\n// // // //           <option value=\"\">Select Origin Station</option>\n// // // //           {stations.map((station) => (\n// // // //             <option key={station.StationID} value={station.StationName}>\n// // // //               {station.StationName}\n// // // //             </option>\n// // // //           ))}\n// // // //         </select>\n// // // //         <select\n// // // //           value={destinationStation}\n// // // //           onChange={(e) => setDestinationStation(e.target.value)}\n// // // //         >\n// // // //           <option value=\"\">Select Destination Station</option>\n// // // //           {stations.map((station) => (\n// // // //             <option key={station.StationID} value={station.StationName}>\n// // // //               {station.StationName}\n// // // //             </option>\n// // // //           ))}\n// // // //         </select>\n// // // //         <input\n// // // //           type=\"date\"\n// // // //           value={travelDate}\n// // // //           onChange={(e) => setTravelDate(e.target.value)}\n// // // //         />\n// // // //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// // // //       </div>\n\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {availableSchedules.length > 0 && (\n// // // //         <table>\n// // // //           <thead>\n// // // //             <tr>\n// // // //               <th>Schedule ID</th>\n// // // //               <th>Transit Line Name</th>\n// // // //               <th>Departure Time</th>\n// // // //               <th>Arrival Time</th>\n// // // //               <th>Action</th>\n// // // //             </tr>\n// // // //           </thead>\n// // // //           <tbody>\n// // // //             {availableSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.DepartureDateTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime}</td>\n// // // //                 <td>\n// // // //                   <button>Book Now</button>\n// // // //                 </td>\n// // // //               </tr>\n// // // //             ))}\n// // // //           </tbody>\n// // // //         </table>\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default TrainSchedulesTab;\n\n// // // // import React, { useState } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const TrainSchedulesTab = ({ stations }) => {\n// // // //   const [originStation, setOriginStation] = useState('');\n// // // //   const [destinationStation, setDestinationStation] = useState('');\n// // // //   const [travelDate, setTravelDate] = useState('');\n// // // //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n// // // //   const [successMessage, setSuccessMessage] = useState('');\n\n// // // //   const handleSearchSchedules = async () => {\n// // // //     if (!originStation || !destinationStation || !travelDate) {\n// // // //       setError('Please select all fields.');\n// // // //       return;\n// // // //     }\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer/train-schedules', {\n// // // //         params: {\n// // // //           originStation,\n// // // //           destinationStation,\n// // // //           travelDate,\n// // // //         },\n// // // //       });\n// // // //       setAvailableSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching train schedules:', err);\n// // // //       setError('Failed to fetch train schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleBookNow = async (scheduleId) => {\n// // // //     try {\n// // // //       // Assuming the API takes `scheduleId` and creates a reservation\n// // // //       await axiosInstance.post('/customer/reservations', {\n// // // //         scheduleId,\n// // // //         tripType: 'one-way', // or 'round-trip' depending on your logic\n// // // //       });\n// // // //       setSuccessMessage('Reservation successfully booked!');\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error booking reservation:', err);\n// // // //       setError('Failed to book reservation.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h3>Search & Book Train Schedules</h3>\n// // // //       <div>\n// // // //         <select\n// // // //           value={originStation}\n// // // //           onChange={(e) => setOriginStation(e.target.value)}\n// // // //         >\n// // // //           <option value=\"\">Select Origin Station</option>\n// // // //           {stations.map((station) => (\n// // // //             <option key={station.StationID} value={station.StationName}>\n// // // //               {station.StationName}\n// // // //             </option>\n// // // //           ))}\n// // // //         </select>\n// // // //         <select\n// // // //           value={destinationStation}\n// // // //           onChange={(e) => setDestinationStation(e.target.value)}\n// // // //         >\n// // // //           <option value=\"\">Select Destination Station</option>\n// // // //           {stations.map((station) => (\n// // // //             <option key={station.StationID} value={station.StationName}>\n// // // //               {station.StationName}\n// // // //             </option>\n// // // //           ))}\n// // // //         </select>\n// // // //         <input\n// // // //           type=\"date\"\n// // // //           value={travelDate}\n// // // //           onChange={(e) => setTravelDate(e.target.value)}\n// // // //         />\n// // // //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// // // //       </div>\n\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       {successMessage && <p className=\"success\">{successMessage}</p>}\n\n// // // //       {availableSchedules.length > 0 && (\n// // // //         <table>\n// // // //           <thead>\n// // // //             <tr>\n// // // //               <th>Schedule ID</th>\n// // // //               <th>Transit Line Name</th>\n// // // //               <th>Departure Time</th>\n// // // //               <th>Arrival Time</th>\n// // // //               <th>Action</th>\n// // // //             </tr>\n// // // //           </thead>\n// // // //           <tbody>\n// // // //             {availableSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// // // //                 <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// // // //                 <td>\n// // // //                   <button onClick={() => handleBookNow(schedule.ScheduleID)}>\n// // // //                     Book Now\n// // // //                   </button>\n// // // //                 </td>\n// // // //               </tr>\n// // // //             ))}\n// // // //           </tbody>\n// // // //         </table>\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default TrainSchedulesTab;\n\n// // // // TrainSchedulesTab.js\n// // // import React, { useState } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const TrainSchedulesTab = ({ stations, customerId }) => {\n// // //   const [originStation, setOriginStation] = useState('');\n// // //   const [destinationStation, setDestinationStation] = useState('');\n// // //   const [travelDate, setTravelDate] = useState('');\n// // //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// // //   const [error, setError] = useState('');\n// // //   const [success, setSuccess] = useState('');\n\n// // //   const handleSearchSchedules = async () => {\n// // //     if (!originStation || !destinationStation || !travelDate) {\n// // //       setError('Please select all fields.');\n// // //       setSuccess('');\n// // //       return;\n// // //     }\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer/train-schedules', {\n// // //         params: {\n// // //           originStation,\n// // //           destinationStation,\n// // //           travelDate,\n// // //         },\n// // //       });\n// // //       setAvailableSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching train schedules:', err);\n// // //       setError('Failed to fetch train schedules.');\n// // //       setSuccess('');\n// // //     }\n// // //   };\n\n// // //   const handleBookNow = async (scheduleId) => {\n// // //     try {\n// // //       const payload = {\n// // //         customerId,\n// // //         scheduleId,\n// // //         originStation,\n// // //         destinationStation,\n// // //         tripType: 'one-way', // Adjust if you want to allow round-trip bookings\n// // //       };\n// // //       const response = await axiosInstance.post('/customer/reservations', payload);\n// // //       setSuccess('Reservation successfully booked!');\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error booking reservation:', err);\n// // //       setError('Failed to book reservation.');\n// // //       setSuccess('');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h3>Search & Book Train Schedules</h3>\n// // //       <div>\n// // //         <select\n// // //           value={originStation}\n// // //           onChange={(e) => setOriginStation(e.target.value)}\n// // //         >\n// // //           <option value=\"\">Select Origin Station</option>\n// // //           {stations.map((station) => (\n// // //             <option key={station.StationID} value={station.StationName}>\n// // //               {station.StationName}\n// // //             </option>\n// // //           ))}\n// // //         </select>\n// // //         <select\n// // //           value={destinationStation}\n// // //           onChange={(e) => setDestinationStation(e.target.value)}\n// // //         >\n// // //           <option value=\"\">Select Destination Station</option>\n// // //           {stations.map((station) => (\n// // //             <option key={station.StationID} value={station.StationName}>\n// // //               {station.StationName}\n// // //             </option>\n// // //           ))}\n// // //         </select>\n// // //         <input\n// // //           type=\"date\"\n// // //           value={travelDate}\n// // //           onChange={(e) => setTravelDate(e.target.value)}\n// // //         />\n// // //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// // //       </div>\n\n// // //       {error && <p className=\"error\">{error}</p>}\n// // //       {success && <p className=\"success\">{success}</p>}\n\n// // //       {availableSchedules.length > 0 && (\n// // //         <table>\n// // //           <thead>\n// // //             <tr>\n// // //               <th>Schedule ID</th>\n// // //               <th>Transit Line Name</th>\n// // //               <th>Departure Time</th>\n// // //               <th>Arrival Time</th>\n// // //               <th>Action</th>\n// // //             </tr>\n// // //           </thead>\n// // //           <tbody>\n// // //             {availableSchedules.map((schedule) => (\n// // //               <tr key={schedule.ScheduleID}>\n// // //                 <td>{schedule.ScheduleID}</td>\n// // //                 <td>{schedule.TransitLineName}</td>\n// // //                 <td>{schedule.DepartureDateTime}</td>\n// // //                 <td>{schedule.ArrivalDateTime}</td>\n// // //                 <td>\n// // //                   <button onClick={() => handleBookNow(schedule.ScheduleID)}>\n// // //                     Book Now\n// // //                   </button>\n// // //                 </td>\n// // //               </tr>\n// // //             ))}\n// // //           </tbody>\n// // //         </table>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default TrainSchedulesTab;\n\n// // // TrainSchedulesTab.js\n// // import React, { useState, useEffect } from \"react\";\n// // import axiosInstance from \"../utils/axiosInstance\";\n\n// // const TrainSchedulesTab = ({ stations }) => {\n// //   const [originStation, setOriginStation] = useState(\"\");\n// //   const [destinationStation, setDestinationStation] = useState(\"\");\n// //   const [travelDate, setTravelDate] = useState(\"\");\n// //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// //   const [error, setError] = useState(\"\");\n// //   const [selectedSchedule, setSelectedSchedule] = useState(null);\n// //   const [passengerType, setPassengerType] = useState(\"adult\");\n// //   const [reservationDetails, setReservationDetails] = useState(null);\n\n// //   useEffect(() => {\n// //     // Clear selected schedule when inputs change\n// //     setSelectedSchedule(null);\n// //   }, [originStation, destinationStation, travelDate]);\n\n// //   const handleSearchSchedules = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError(\"Please select all fields.\");\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(\"/customer/train-schedules\", {\n// //         params: {\n// //           originStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setAvailableSchedules(response.data.trainSchedules);\n// //       setError(\"\");\n// //     } catch (err) {\n// //       console.error(\"Error fetching train schedules:\", err);\n// //       setError(\"Failed to fetch train schedules.\");\n// //     }\n// //   };\n\n// //   const handleBookNow = async (schedule) => {\n// //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n  \n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n  \n// //     try {\n// //       const response = await axiosInstance.post('/customer/reservations', {\n// //         customerId,\n// //         transitLineName: schedule.TransitLineName,\n// //         originStation,\n// //         destinationStation,\n// //         travelDate,\n// //         tripType: \"One-Way\",\n// //         isRoundTrip: false,\n// //         passengerType,\n// //       });\n  \n// //       setReservationDetails({\n// //         reservationId: response.data.reservationId,\n// //         fare: response.data.fare,\n// //       });\n  \n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error creating reservation:', err);\n// //       setError('Failed to create reservation. Please try again.');\n// //     }\n// //   };\n  \n\n// //   return (\n// //     <div>\n// //       <h3>Search & Book Train Schedules</h3>\n// //       <div>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Origin Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Destination Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// //       </div>\n\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {availableSchedules.length > 0 && (\n// //         <div>\n// //           <h4>Available Train Schedules</h4>\n// //           <table>\n// //             <thead>\n// //               <tr>\n// //                 <th>Schedule ID</th>\n// //                 <th>Transit Line Name</th>\n// //                 <th>Departure Time</th>\n// //                 <th>Arrival Time</th>\n// //                 <th>Action</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {availableSchedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.DepartureDateTime}</td>\n// //                   <td>{schedule.ArrivalDateTime}</td>\n// //                   <td>\n// //                     <button onClick={() => handleBookNow(schedule)}>\n// //                       Book Now\n// //                     </button>\n// //                   </td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n\n// //       {selectedSchedule && (\n// //         <div>\n// //           <h4>Passenger Details</h4>\n// //           <select\n// //             value={passengerType}\n// //             onChange={(e) => setPassengerType(e.target.value)}\n// //           >\n// //             <option value=\"adult\">Adult</option>\n// //             <option value=\"child\">Child</option>\n// //             <option value=\"senior\">Senior</option>\n// //             <option value=\"disabled\">Disabled</option>\n// //           </select>\n// //           <button onClick={handleBookNow}>Confirm Reservation</button>\n// //         </div>\n// //       )}\n\n// //       {reservationDetails && (\n// //         <div>\n// //           <h4>Reservation Successful!</h4>\n// //           <p>Reservation ID: {reservationDetails.reservationId}</p>\n// //           <p>Total Fare: ${reservationDetails.fare}</p>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default TrainSchedulesTab;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import axiosInstance from \"../utils/axiosInstance\";\n\n// const TrainSchedulesTab = ({ stations }) => {\n//   const [originStation, setOriginStation] = useState(\"\");\n//   const [destinationStation, setDestinationStation] = useState(\"\");\n//   const [travelDate, setTravelDate] = useState(\"\");\n//   const [availableSchedules, setAvailableSchedules] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [passengerType, setPassengerType] = useState(\"adult\");\n//   const [reservationDetails, setReservationDetails] = useState(null);\n\n//   // Clear reservation details when inputs change\n//   useEffect(() => {\n//     setReservationDetails(null);\n//   }, [originStation, destinationStation, travelDate]);\n\n//   // Search for train schedules\n//   const handleSearchSchedules = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError(\"Please select all fields.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get(\"/customer/train-schedules\", {\n//         params: {\n//           originStation,\n//           destinationStation,\n//           travelDate,\n//         },\n//       });\n\n//       setAvailableSchedules(response.data.trainSchedules);\n//       setError(\"\");\n//     } catch (err) {\n//       console.error(\"Error fetching train schedules:\", err);\n//       setError(\"Failed to fetch train schedules.\");\n//     }\n//   };\n\n//   // Book a reservation\n//   const handleBookNow = async (schedule) => {\n//     const customerId = localStorage.getItem(\"customerId\"); // Retrieve customer ID from localStorage\n//     if (!customerId) {\n//       setError(\"Customer ID not found. Please log in again.\");\n//       return;\n//     }\n\n//     try {\n//       const payload = {\n//         customerId,\n//         transitLineName: schedule.TransitLineName,\n//         originStation,\n//         destinationStation,\n//         travelDate,\n//         tripType: \"One-Way\", // For now, it defaults to One-Way\n//         isRoundTrip: false,\n//         passengerType,\n//       };\n\n//       const response = await axiosInstance.post(\"/customer/reservations\", payload);\n//       setReservationDetails({\n//         reservationId: response.data.reservationId,\n//         fare: response.data.fare,\n//       });\n//       setError(\"\");\n//     } catch (err) {\n//       console.error(\"Error creating reservation:\", err);\n//       setError(\"Failed to create reservation. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Search & Book Train Schedules</h3>\n\n//       {/* Search Inputs */}\n//       <div>\n//         <select value={originStation} onChange={(e) => setOriginStation(e.target.value)}>\n//           <option value=\"\">Select Origin Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n//           <option value=\"\">Select Destination Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n\n//         <input\n//           type=\"date\"\n//           value={travelDate}\n//           onChange={(e) => setTravelDate(e.target.value)}\n//         />\n\n//         <button onClick={handleSearchSchedules}>Search Schedules</button>\n//       </div>\n\n//       {/* Error Messages */}\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Train Schedule Results */}\n//       {availableSchedules.length > 0 && (\n//         <div>\n//           <h4>Available Train Schedules</h4>\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Schedule ID</th>\n//                 <th>Transit Line Name</th>\n//                 <th>Departure Time</th>\n//                 <th>Arrival Time</th>\n//                 <th>Passenger Type</th>\n//                 <th>Action</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {availableSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n//                   <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n//                   <td>\n//                     <select\n//                       value={passengerType}\n//                       onChange={(e) => setPassengerType(e.target.value)}\n//                     >\n//                       <option value=\"adult\">Adult</option>\n//                       <option value=\"child\">Child</option>\n//                       <option value=\"senior\">Senior</option>\n//                       <option value=\"disabled\">Disabled</option>\n//                     </select>\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleBookNow(schedule)}>Book Now</button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {/* Success Message */}\n//       {reservationDetails && (\n//         <div>\n//           <h4>Reservation Successful!</h4>\n//           <p>Reservation ID: {reservationDetails.reservationId}</p>\n//           <p>Total Fare: ${reservationDetails.fare}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TrainSchedulesTab;\n\nimport React, { useState, useEffect } from \"react\";\nimport axiosInstance from \"../utils/axiosInstance\";\n\nconst TrainSchedulesTab = ({ stations }) => {\n  const [originStation, setOriginStation] = useState(\"\");\n  const [destinationStation, setDestinationStation] = useState(\"\");\n  const [travelDate, setTravelDate] = useState(\"\");\n  const [availableSchedules, setAvailableSchedules] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [passengerType, setPassengerType] = useState(\"adult\");\n  const [reservationDetails, setReservationDetails] = useState(null);\n  const [selectedSchedule, setSelectedSchedule] = useState(null);\n  const [roundTrip, setRoundTrip] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Clear reservation details when inputs change\n  useEffect(() => {\n    setReservationDetails(null);\n    setSelectedSchedule(null);\n  }, [originStation, destinationStation, travelDate]);\n\n  // Search for train schedules\n  const handleSearchSchedules = async () => {\n    if (!originStation || !destinationStation || !travelDate) {\n      setError(\"Please select all fields.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const response = await axiosInstance.get(\"/customer/train-schedules\", {\n        params: { originStation, destinationStation, travelDate },\n      });\n      setAvailableSchedules(response.data.trainSchedules);\n      setError(\"\");\n    } catch (err) {\n      console.error(\"Error fetching train schedules:\", err);\n      setError(\"Failed to fetch train schedules.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Book a reservation\n  const handleBookNow = async (schedule) => {\n    const customerId = localStorage.getItem(\"customerId\"); // Retrieve customer ID from localStorage\n    if (!customerId) {\n      setError(\"Customer ID not found. Please log in again.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const payload = {\n        customerId,\n        transitLineName: schedule.TransitLineName,\n        trainId: schedule.TrainID,\n        originStation,\n        destinationStation,\n        travelDate,\n        tripType: \"One-Way\",\n        isRoundTrip: roundTrip,\n        passengerType,\n      };\n\n      const response = await axiosInstance.post(\"/customer/reservations\", payload);\n      setReservationDetails({\n        reservationId: response.data.reservationId,\n        fare: response.data.fare,\n      });\n      setError(\"\");\n    } catch (err) {\n      console.error(\"Error creating reservation:\", err);\n      setError(\"Failed to create reservation. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h3>Search & Book Train Schedules</h3>\n\n      {/* Search Inputs */}\n      <div>\n        <select value={originStation} onChange={(e) => setOriginStation(e.target.value)}>\n          <option value=\"\">Select Origin Station</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n\n        <select value={destinationStation} onChange={(e) => setDestinationStation(e.target.value)}>\n          <option value=\"\">Select Destination Station</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n\n        <input\n          type=\"date\"\n          value={travelDate}\n          onChange={(e) => setTravelDate(e.target.value)}\n        />\n\n        <button onClick={handleSearchSchedules} disabled={loading}>\n          {loading ? \"Searching...\" : \"Search Schedules\"}\n        </button>\n      </div>\n\n      {/* Error Messages */}\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Train Schedule Results */}\n      {availableSchedules.length > 0 && (\n        <div>\n          <h4>Available Train Schedules</h4>\n          <table>\n      <thead>\n        <tr>\n          <th>Schedule ID</th>\n          <th>Transit Line Name</th>\n          <th>Train ID</th>\n          <th>Departure Time</th>\n          <th>Arrival Time</th>\n          <th>Passenger Type</th>\n          <th>Round Trip</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        {availableSchedules.map((schedule) => (\n          <tr key={schedule.ScheduleID}>\n            <td>{schedule.ScheduleID}</td>\n            <td>{schedule.TransitLineName}</td>\n            <td>{schedule.TrainID}</td>\n            <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n            <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n            <td>\n              <select\n                value={passengerType}\n                onChange={(e) => setPassengerType(e.target.value)}\n              >\n                <option value=\"adult\">Adult</option>\n                <option value=\"child\">Child</option>\n                <option value=\"senior\">Senior</option>\n                <option value=\"disabled\">Disabled</option>\n              </select>\n            </td>\n            <td>\n              <input\n                type=\"checkbox\"\n                onChange={() => setRoundTrip(!roundTrip)}\n              />\n            </td>\n            <td>\n              <button onClick={() => handleBookNow(schedule)} disabled={loading}>\n                {loading ? \"Booking...\" : \"Book Now\"}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n        </div>\n      )}\n\n      {/* Success Message */}\n      {reservationDetails && (\n        <div>\n          <h4>Reservation Successful!</h4>\n          <p>Reservation ID: {reservationDetails.reservationId}</p>\n          <p>Total Fare: ${reservationDetails.fare}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TrainSchedulesTab;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}