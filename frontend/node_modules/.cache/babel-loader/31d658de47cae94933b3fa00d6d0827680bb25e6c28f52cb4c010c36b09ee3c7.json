{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n//   const [editMode, setEditMode] = useState(null);\n//   const [formValues, setFormValues] = useState({});\n\n//   // Fetch schedules on component mount\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Function to fetch train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/representative/schedules');\n//       setSchedules(response.data.schedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle delete schedule\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   // Handle edit schedule\n//   const editSchedule = (schedule) => {\n//     setEditMode(schedule.ScheduleID);\n//     setFormValues({\n//       TransitLineName: schedule.TransitLineName,\n//       DepartureDateTime: schedule.DepartureDateTime,\n//       ArrivalDateTime: schedule.ArrivalDateTime,\n//       TravelTime: schedule.TravelTime,\n//     });\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormValues({ ...formValues, [name]: value });\n//   };\n\n//   // Handle save edited schedule\n//   const saveSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n//       setEditMode(null);\n//       fetchSchedules();\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update schedule.');\n//     }\n//   };\n\n//   // Render\n//   return (\n//     <div>\n//       <h2>Manage Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line</th>\n//             <th>Departure Time</th>\n//             <th>Arrival Time</th>\n//             <th>Travel Time</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"text\"\n//                     name=\"TransitLineName\"\n//                     value={formValues.TransitLineName}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TransitLineName\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"DepartureDateTime\"\n//                     value={formValues.DepartureDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.DepartureDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"ArrivalDateTime\"\n//                     value={formValues.ArrivalDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.ArrivalDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"time\"\n//                     name=\"TravelTime\"\n//                     value={formValues.TravelTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TravelTime\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <>\n//                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={() => setEditMode(null)}>Cancel</button>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n//                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//                   </>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime}</td>\n//               <td>{schedule.DepartureDateTime}</td>\n//               <td>{schedule.TrainID}</td>\n//               <td>\n//                 <button\n//                   onClick={() => console.log('Edit schedule')}\n//                   style={{ marginRight: '5px' }}\n//                 >\n//                   Edit\n//                 </button>\n//                 {schedule.ReservationCount === 0 ? (\n//                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                 ) : (\n//                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [transitLineName, setTransitLineName] = useState('');\n//   const [travelTime, setTravelTime] = useState('');\n//   const [arrivalDateTime, setArrivalDateTime] = useState('');\n//   const [departureDateTime, setDepartureDateTime] = useState('');\n//   const [trainID, setTrainID] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Handle adding a new schedule\n//   const handleAddSchedule = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n//         TransitLineName: transitLineName,\n//         TravelTime: travelTime,\n//         ArrivalDateTime: arrivalDateTime,\n//         DepartureDateTime: departureDateTime,\n//         TrainID: trainID,\n//       });\n\n//       setSuccess(response.data.message);\n//       setError('');\n//       fetchSchedules(); // Refresh the schedule list\n\n//       // Clear form fields\n//       setTransitLineName('');\n//       setTravelTime('');\n//       setArrivalDateTime('');\n//       setDepartureDateTime('');\n//       setTrainID('');\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Error adding train schedule.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n\n//       {/* Add Train Schedule Form */}\n//       <div>\n//         <h3>Add Train Schedule</h3>\n//         <form onSubmit={handleAddSchedule}>\n//           <div>\n//             <label>Transit Line Name:</label>\n//             <input\n//               type=\"text\"\n//               value={transitLineName}\n//               onChange={(e) => setTransitLineName(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Travel Time (hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={travelTime}\n//               onChange={(e) => setTravelTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={arrivalDateTime}\n//               onChange={(e) => setArrivalDateTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={departureDateTime}\n//               onChange={(e) => setDepartureDateTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Train ID:</label>\n//             <input\n//               type=\"text\"\n//               value={trainID}\n//               onChange={(e) => setTrainID(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Add Schedule</button>\n//         </form>\n//         {error && <p className=\"error\">{error}</p>}\n//         {success && <p className=\"success\">{success}</p>}\n//       </div>\n\n//       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [stationName, setStationName] = useState('');\n//   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setFilteredSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Fetch schedules by station name\n//   const fetchSchedulesByStation = async () => {\n//     if (!stationName) {\n//       setError(\"Please enter a station name.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n//         params: { stationName },\n//       });\n//       setFilteredSchedules(response.data.trainSchedules);\n//       if (response.data.trainSchedules.length === 0) {\n//         setError(\"No schedules found for this station.\");\n//       } else {\n//         setError(\"\");\n//       }\n//     } catch (err) {\n//       console.error('Error fetching schedules by station:', err);\n//       setError('Failed to fetch schedules for the specified station.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter schedules\"\n//           value={stationName}\n//           onChange={(e) => setStationName(e.target.value)}\n//           style={{ padding: '10px', marginRight: '10px' }}\n//         />\n//         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n//       </div>\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredSchedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [stationName, setStationName] = useState('');\n//   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setFilteredSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Fetch schedules by station name\n//   const fetchSchedulesByStation = async () => {\n//     if (!stationName) {\n//       setError(\"Please enter a station name.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n//         params: { stationName },\n//       });\n//       setFilteredSchedules(response.data.trainSchedules);\n//       if (response.data.trainSchedules.length === 0) {\n//         setError(\"No schedules found for this station.\");\n//       } else {\n//         setError(\"\");\n//       }\n//     } catch (err) {\n//       console.error('Error fetching schedules by station:', err);\n//       setError('Failed to fetch schedules for the specified station.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Manage Train Schedules Section */}\n//       <h3>Manage Train Schedules (Edit/Delete)</h3>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Search Train Schedules by Station Section */}\n//       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter schedules\"\n//           value={stationName}\n//           onChange={(e) => setStationName(e.target.value)}\n//           style={{ padding: '10px', marginRight: '10px' }}\n//         />\n//         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n//       </div>\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredSchedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//               <td>{schedule.TrainID}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [stationName, setStationName] = useState('');\n//   const [originSchedules, setOriginSchedules] = useState([]);\n//   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Fetch schedules by station name (origin and destination)\n//   const fetchSchedulesByStation = async () => {\n//     if (!stationName) {\n//       setError(\"Please enter a station name.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n//         params: { stationName },\n//       });\n//       setOriginSchedules(response.data.originSchedules);\n//       setDestinationSchedules(response.data.destinationSchedules);\n//       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n//         setError(\"No schedules found for this station.\");\n//       } else {\n//         setError(\"\");\n//       }\n//     } catch (err) {\n//       console.error('Error fetching schedules by station:', err);\n//       setError('Failed to fetch schedules for the specified station.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Manage Train Schedules Section */}\n//       <h3>Manage Train Schedules (Edit/Delete)</h3>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Search Train Schedules by Station Section */}\n//       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name\"\n//           value={stationName}\n//           onChange={(e) => setStationName(e.target.value)}\n//           style={{ padding: '10px', marginRight: '10px' }}\n//         />\n//         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n//       </div>\n\n//       <h4>Schedules with Station as Origin</h4>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {originSchedules.length > 0 ? (\n//             originSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.TravelTime}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.TrainID}</td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"8\">No schedules found with station as origin.</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n\n//       <h4>Schedules with Station as Destination</h4>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {destinationSchedules.length > 0 ? (\n//             destinationSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.TravelTime}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.TrainID}</td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"8\">No schedules found with station as destination.</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageSchedulesTab = () => {\n  _s();\n  const [schedules, setSchedules] = useState([]);\n  const [stations, setStations] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDateTime: '',\n    departureDateTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchSchedules();\n    fetchStations();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available stations for stops selection\n  const fetchStations = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setStations(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stations:', err);\n    }\n  };\n\n  // Handle input change for new schedule form\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewSchedule(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle stops selection\n  const handleStopSelection = e => {\n    const stationID = parseInt(e.target.value);\n    const isChecked = e.target.checked;\n    setNewSchedule(prev => {\n      const updatedStops = isChecked ? [...prev.stops, {\n        stationID,\n        arrivalDateTime: '',\n        departureDateTime: ''\n      }] : prev.stops.filter(stop => stop.stationID !== stationID);\n      return {\n        ...prev,\n        stops: updatedStops\n      };\n    });\n  };\n\n  // Handle arrival and departure date-time changes for each stop\n  const handleStopDateTimeChange = (stationID, field, value) => {\n    setNewSchedule(prev => {\n      const updatedStops = prev.stops.map(stop => {\n        if (stop.stationID === stationID) {\n          return {\n            ...stop,\n            [field]: value\n          };\n        }\n        return stop;\n      });\n      return {\n        ...prev,\n        stops: updatedStops\n      };\n    });\n  };\n\n  // Handle save button click for adding the new schedule\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDateTime: '',\n        departureDateTime: '',\n        trainID: '',\n        stops: []\n      });\n      fetchSchedules(); // Re-fetch schedules to reflect the new addition\n      setError('');\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2390,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2391,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Train Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"transitLineName\",\n        placeholder: \"Transit Line Name\",\n        value: newSchedule.transitLineName,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"travelTime\",\n        placeholder: \"Travel Time (HH:MM)\",\n        value: newSchedule.travelTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2403,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        name: \"arrivalDateTime\",\n        placeholder: \"Arrival DateTime\",\n        value: newSchedule.arrivalDateTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        name: \"departureDateTime\",\n        placeholder: \"Departure DateTime\",\n        value: newSchedule.departureDateTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"trainID\",\n        placeholder: \"Train ID\",\n        value: newSchedule.trainID,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Stops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2432,\n        columnNumber: 9\n      }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: station.StationID,\n            onChange: handleStopSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2436,\n            columnNumber: 15\n          }, this), station.StationName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2435,\n          columnNumber: 13\n        }, this), newSchedule.stops.some(stop => stop.stationID === station.StationID) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"Arrival DateTime\",\n            onChange: e => handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2445,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"Departure DateTime\",\n            onChange: e => handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2452,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2444,\n          columnNumber: 15\n        }, this)]\n      }, station.StationID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2434,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSchedule,\n        children: \"Add Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2464,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2394,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Schedule ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2471,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transit Line Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2472,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Travel Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2473,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Arrival DateTime\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2474,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Departure DateTime\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2475,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Train ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2476,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2477,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2470,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2469,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: schedules.map(schedule => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: schedule.ScheduleID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2483,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: schedule.TransitLineName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2484,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: schedule.TravelTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2485,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: schedule.ArrivalDateTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2486,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: schedule.DepartureDateTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2487,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: schedule.TrainID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2488,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2489,\n            columnNumber: 15\n          }, this)]\n        }, schedule.ScheduleID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2482,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2468,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2389,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageSchedulesTab, \"TQ7wtAWlkHSH99ekHPomE12MRAY=\");\n_c = ManageSchedulesTab;\nexport default ManageSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"ManageSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","ManageSchedulesTab","_s","schedules","setSchedules","stations","setStations","newSchedule","setNewSchedule","transitLineName","travelTime","arrivalDateTime","departureDateTime","trainID","stops","error","setError","fetchSchedules","fetchStations","response","get","data","trainSchedules","err","console","handleInputChange","e","name","value","target","prev","handleStopSelection","stationID","parseInt","isChecked","checked","updatedStops","filter","stop","handleStopDateTimeChange","field","map","handleAddSchedule","post","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","marginBottom","type","placeholder","onChange","station","StationID","StationName","some","onClick","schedule","ScheduleID","TransitLineName","TravelTime","ArrivalDateTime","DepartureDateTime","TrainID","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n//   const [editMode, setEditMode] = useState(null);\n//   const [formValues, setFormValues] = useState({});\n\n//   // Fetch schedules on component mount\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Function to fetch train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/representative/schedules');\n//       setSchedules(response.data.schedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle delete schedule\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   // Handle edit schedule\n//   const editSchedule = (schedule) => {\n//     setEditMode(schedule.ScheduleID);\n//     setFormValues({\n//       TransitLineName: schedule.TransitLineName,\n//       DepartureDateTime: schedule.DepartureDateTime,\n//       ArrivalDateTime: schedule.ArrivalDateTime,\n//       TravelTime: schedule.TravelTime,\n//     });\n//   };\n\n//   // Handle form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormValues({ ...formValues, [name]: value });\n//   };\n\n//   // Handle save edited schedule\n//   const saveSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n//       setEditMode(null);\n//       fetchSchedules();\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update schedule.');\n//     }\n//   };\n\n//   // Render\n//   return (\n//     <div>\n//       <h2>Manage Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line</th>\n//             <th>Departure Time</th>\n//             <th>Arrival Time</th>\n//             <th>Travel Time</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"text\"\n//                     name=\"TransitLineName\"\n//                     value={formValues.TransitLineName}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TransitLineName\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"DepartureDateTime\"\n//                     value={formValues.DepartureDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.DepartureDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"datetime-local\"\n//                     name=\"ArrivalDateTime\"\n//                     value={formValues.ArrivalDateTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   new Date(schedule.ArrivalDateTime).toLocaleString()\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <input\n//                     type=\"time\"\n//                     name=\"TravelTime\"\n//                     value={formValues.TravelTime}\n//                     onChange={handleInputChange}\n//                   />\n//                 ) : (\n//                   schedule.TravelTime\n//                 )}\n//               </td>\n//               <td>\n//                 {editMode === schedule.ScheduleID ? (\n//                   <>\n//                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={() => setEditMode(null)}>Cancel</button>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n//                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//                   </>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"datetime-local\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"datetime-local\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainId: '',\n//   });\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const addSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       fetchSchedules(); // Refresh the list after adding a new schedule\n//     } catch (err) {\n//       console.error('Error adding schedule:', err);\n//       setError('Failed to add new schedule.');\n//     }\n//   };\n\n//   const editSchedule = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       fetchSchedules(); // Refresh the list after editing\n//     } catch (err) {\n//       console.error('Error editing schedule:', err);\n//       setError('Failed to edit schedule.');\n//     }\n//   };\n\n//   const deleteSchedule = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       fetchSchedules(); // Refresh the list after deleting\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Form to Add New Schedule */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           name=\"transitLineName\"\n//           placeholder=\"Transit Line Name\"\n//           value={newSchedule.transitLineName}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"time\"\n//           name=\"travelTime\"\n//           placeholder=\"Travel Time\"\n//           value={newSchedule.travelTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"arrivalDateTime\"\n//           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.arrivalDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"departureDateTime\"\n//           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n//           value={newSchedule.departureDateTime}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <input\n//           type=\"text\"\n//           name=\"trainId\"\n//           placeholder=\"Train ID\"\n//           value={newSchedule.trainId}\n//           onChange={handleInputChange}\n//           style={{ marginRight: '10px' }}\n//         />\n//         <button onClick={addSchedule}>Add Schedule</button>\n//       </div>\n\n//       {/* Schedule Table */}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TransitLineName}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"time\"\n//                   value={schedule.TravelTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.ArrivalDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.DepartureDateTime}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={schedule.TrainID}\n//                   onChange={(e) =>\n//                     setSchedules((prev) =>\n//                       prev.map((s) =>\n//                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n//                       )\n//                     )\n//                   }\n//                 />\n//               </td>\n//               <td>\n//                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n//                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime}</td>\n//               <td>{schedule.DepartureDateTime}</td>\n//               <td>{schedule.TrainID}</td>\n//               <td>\n//                 <button\n//                   onClick={() => console.log('Edit schedule')}\n//                   style={{ marginRight: '5px' }}\n//                 >\n//                   Edit\n//                 </button>\n//                 {schedule.ReservationCount === 0 ? (\n//                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                 ) : (\n//                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                 )}\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [transitLineName, setTransitLineName] = useState('');\n//   const [travelTime, setTravelTime] = useState('');\n//   const [arrivalDateTime, setArrivalDateTime] = useState('');\n//   const [departureDateTime, setDepartureDateTime] = useState('');\n//   const [trainID, setTrainID] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule(schedule);\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Handle adding a new schedule\n//   const handleAddSchedule = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n//         TransitLineName: transitLineName,\n//         TravelTime: travelTime,\n//         ArrivalDateTime: arrivalDateTime,\n//         DepartureDateTime: departureDateTime,\n//         TrainID: trainID,\n//       });\n\n//       setSuccess(response.data.message);\n//       setError('');\n//       fetchSchedules(); // Refresh the schedule list\n\n//       // Clear form fields\n//       setTransitLineName('');\n//       setTravelTime('');\n//       setArrivalDateTime('');\n//       setDepartureDateTime('');\n//       setTrainID('');\n//     } catch (err) {\n//       setError(err.response?.data?.message || 'Error adding train schedule.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n\n//       {/* Add Train Schedule Form */}\n//       <div>\n//         <h3>Add Train Schedule</h3>\n//         <form onSubmit={handleAddSchedule}>\n//           <div>\n//             <label>Transit Line Name:</label>\n//             <input\n//               type=\"text\"\n//               value={transitLineName}\n//               onChange={(e) => setTransitLineName(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Travel Time (hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={travelTime}\n//               onChange={(e) => setTravelTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={arrivalDateTime}\n//               onChange={(e) => setArrivalDateTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n//             <input\n//               type=\"text\"\n//               value={departureDateTime}\n//               onChange={(e) => setDepartureDateTime(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div>\n//             <label>Train ID:</label>\n//             <input\n//               type=\"text\"\n//               value={trainID}\n//               onChange={(e) => setTrainID(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Add Schedule</button>\n//         </form>\n//         {error && <p className=\"error\">{error}</p>}\n//         {success && <p className=\"success\">{success}</p>}\n//       </div>\n\n//       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival DateTime</th>\n//             <th>Departure DateTime</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TravelTime\"\n//                       value={editingSchedule.TravelTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"ArrivalDateTime\"\n//                       value={editingSchedule.ArrivalDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"DepartureDateTime\"\n//                       value={editingSchedule.DepartureDateTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime}</td>\n//                   <td>{schedule.DepartureDateTime}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n      \n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n          \n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [stationName, setStationName] = useState('');\n//   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setFilteredSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Fetch schedules by station name\n//   const fetchSchedulesByStation = async () => {\n//     if (!stationName) {\n//       setError(\"Please enter a station name.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n//         params: { stationName },\n//       });\n//       setFilteredSchedules(response.data.trainSchedules);\n//       if (response.data.trainSchedules.length === 0) {\n//         setError(\"No schedules found for this station.\");\n//       } else {\n//         setError(\"\");\n//       }\n//     } catch (err) {\n//       console.error('Error fetching schedules by station:', err);\n//       setError('Failed to fetch schedules for the specified station.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter schedules\"\n//           value={stationName}\n//           onChange={(e) => setStationName(e.target.value)}\n//           style={{ padding: '10px', marginRight: '10px' }}\n//         />\n//         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n//       </div>\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredSchedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [stationName, setStationName] = useState('');\n//   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setFilteredSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Fetch schedules by station name\n//   const fetchSchedulesByStation = async () => {\n//     if (!stationName) {\n//       setError(\"Please enter a station name.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n//         params: { stationName },\n//       });\n//       setFilteredSchedules(response.data.trainSchedules);\n//       if (response.data.trainSchedules.length === 0) {\n//         setError(\"No schedules found for this station.\");\n//       } else {\n//         setError(\"\");\n//       }\n//     } catch (err) {\n//       console.error('Error fetching schedules by station:', err);\n//       setError('Failed to fetch schedules for the specified station.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Manage Train Schedules Section */}\n//       <h3>Manage Train Schedules (Edit/Delete)</h3>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Search Train Schedules by Station Section */}\n//       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name to filter schedules\"\n//           value={stationName}\n//           onChange={(e) => setStationName(e.target.value)}\n//           style={{ padding: '10px', marginRight: '10px' }}\n//         />\n//         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n//       </div>\n\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredSchedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               <td>{schedule.ScheduleID}</td>\n//               <td>{schedule.TransitLineName}</td>\n//               <td>{schedule.TravelTime}</td>\n//               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//               <td>{schedule.TrainID}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n//   const [stationName, setStationName] = useState('');\n//   const [originSchedules, setOriginSchedules] = useState([]);\n//   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n//   useEffect(() => {\n//     fetchSchedules();\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   // Fetch schedules by station name (origin and destination)\n//   const fetchSchedulesByStation = async () => {\n//     if (!stationName) {\n//       setError(\"Please enter a station name.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n//         params: { stationName },\n//       });\n//       setOriginSchedules(response.data.originSchedules);\n//       setDestinationSchedules(response.data.destinationSchedules);\n//       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n//         setError(\"No schedules found for this station.\");\n//       } else {\n//         setError(\"\");\n//       }\n//     } catch (err) {\n//       console.error('Error fetching schedules by station:', err);\n//       setError('Failed to fetch schedules for the specified station.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Manage Train Schedules Section */}\n//       <h3>Manage Train Schedules (Edit/Delete)</h3>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {schedules.map((schedule) => (\n//             <tr key={schedule.ScheduleID}>\n//               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TransitLineName\"\n//                       value={editingSchedule.TransitLineName}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>{editingSchedule.TravelTime}</td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"ArrivalDate\"\n//                       value={editingSchedule.ArrivalDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"ArrivalTime\"\n//                       value={editingSchedule.ArrivalTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"date\"\n//                       name=\"DepartureDate\"\n//                       value={editingSchedule.DepartureDate}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"time\"\n//                       name=\"DepartureTime\"\n//                       value={editingSchedule.DepartureTime}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <input\n//                       type=\"text\"\n//                       name=\"TrainID\"\n//                       value={editingSchedule.TrainID}\n//                       onChange={handleInputChange}\n//                     />\n//                   </td>\n//                   <td>\n//                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                   </td>\n//                 </>\n//               ) : (\n//                 <>\n//                   <td>{schedule.ScheduleID}</td>\n//                   <td>{schedule.TransitLineName}</td>\n//                   <td>{schedule.TravelTime}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                   <td>{schedule.TrainID}</td>\n//                   <td>\n//                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                       Edit\n//                     </button>\n//                     {schedule.ReservationCount === 0 ? (\n//                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                     ) : (\n//                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                     )}\n//                   </td>\n//                 </>\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Search Train Schedules by Station Section */}\n//       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//       <div style={{ marginBottom: '20px' }}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter station name\"\n//           value={stationName}\n//           onChange={(e) => setStationName(e.target.value)}\n//           style={{ padding: '10px', marginRight: '10px' }}\n//         />\n//         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n//       </div>\n\n//       <h4>Schedules with Station as Origin</h4>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {originSchedules.length > 0 ? (\n//             originSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.TravelTime}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.TrainID}</td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"8\">No schedules found with station as origin.</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n\n//       <h4>Schedules with Station as Destination</h4>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Schedule ID</th>\n//             <th>Transit Line Name</th>\n//             <th>Travel Time</th>\n//             <th>Arrival Date</th>\n//             <th>Arrival Time</th>\n//             <th>Departure Date</th>\n//             <th>Departure Time</th>\n//             <th>Train ID</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {destinationSchedules.length > 0 ? (\n//             destinationSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.TravelTime}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                 <td>{schedule.TrainID}</td>\n//               </tr>\n//             ))\n//           ) : (\n//             <tr>\n//               <td colSpan=\"8\">No schedules found with station as destination.</td>\n//             </tr>\n//           )}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ManageSchedulesTab = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [stations, setStations] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDateTime: '',\n    departureDateTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchSchedules();\n    fetchStations();\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available stations for stops selection\n  const fetchStations = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setStations(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stations:', err);\n    }\n  };\n\n  // Handle input change for new schedule form\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewSchedule((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle stops selection\n  const handleStopSelection = (e) => {\n    const stationID = parseInt(e.target.value);\n    const isChecked = e.target.checked;\n\n    setNewSchedule((prev) => {\n      const updatedStops = isChecked\n        ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n        : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n      return { ...prev, stops: updatedStops };\n    });\n  };\n\n  // Handle arrival and departure date-time changes for each stop\n  const handleStopDateTimeChange = (stationID, field, value) => {\n    setNewSchedule((prev) => {\n      const updatedStops = prev.stops.map((stop) => {\n        if (stop.stationID === stationID) {\n          return { ...stop, [field]: value };\n        }\n        return stop;\n      });\n      return { ...prev, stops: updatedStops };\n    });\n  };\n\n  // Handle save button click for adding the new schedule\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDateTime: '',\n        departureDateTime: '',\n        trainID: '',\n        stops: []\n      });\n      fetchSchedules(); // Re-fetch schedules to reflect the new addition\n      setError('');\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Manage Train Schedules</h2>\n      {error && <p className=\"error\">{error}</p>}\n      \n      {/* Add Train Schedule Form */}\n      <div style={{ marginBottom: '20px' }}>\n        <h3>Add Train Schedule</h3>\n        <input\n          type=\"text\"\n          name=\"transitLineName\"\n          placeholder=\"Transit Line Name\"\n          value={newSchedule.transitLineName}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"travelTime\"\n          placeholder=\"Travel Time (HH:MM)\"\n          value={newSchedule.travelTime}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"datetime-local\"\n          name=\"arrivalDateTime\"\n          placeholder=\"Arrival DateTime\"\n          value={newSchedule.arrivalDateTime}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"datetime-local\"\n          name=\"departureDateTime\"\n          placeholder=\"Departure DateTime\"\n          value={newSchedule.departureDateTime}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"trainID\"\n          placeholder=\"Train ID\"\n          value={newSchedule.trainID}\n          onChange={handleInputChange}\n        />\n\n        <h4>Select Stops</h4>\n        {stations.map((station) => (\n          <div key={station.StationID}>\n            <label>\n              <input\n                type=\"checkbox\"\n                value={station.StationID}\n                onChange={handleStopSelection}\n              />\n              {station.StationName}\n            </label>\n            {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n              <div>\n                <input\n                  type=\"datetime-local\"\n                  placeholder=\"Arrival DateTime\"\n                  onChange={(e) =>\n                    handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n                  }\n                />\n                <input\n                  type=\"datetime-local\"\n                  placeholder=\"Departure DateTime\"\n                  onChange={(e) =>\n                    handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n                  }\n                />\n              </div>\n            )}\n          </div>\n        ))}\n\n        <button onClick={handleAddSchedule}>Add Schedule</button>\n      </div>\n\n      {/* Train Schedules Table */}\n      <table>\n        <thead>\n          <tr>\n            <th>Schedule ID</th>\n            <th>Transit Line Name</th>\n            <th>Travel Time</th>\n            <th>Arrival DateTime</th>\n            <th>Departure DateTime</th>\n            <th>Train ID</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {schedules.map((schedule) => (\n            <tr key={schedule.ScheduleID}>\n              <td>{schedule.ScheduleID}</td>\n              <td>{schedule.TransitLineName}</td>\n              <td>{schedule.TravelTime}</td>\n              <td>{schedule.ArrivalDateTime}</td>\n              <td>{schedule.DepartureDateTime}</td>\n              <td>{schedule.TrainID}</td>\n              <td>\n                {/* You can implement edit and delete buttons here */}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ManageSchedulesTab;\n"],"mappingslD,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC;IAC7Ca,eAAe,EAAE,EAAE;IACnBC,UAAU,EAAE,EAAE;IACdC,eAAe,EAAE,EAAE;IACnBC,iBAAiB,EAAE,EAAE;IACrBC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdoB,cAAc,CAAC,CAAC;IAChBC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMD,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMrB,aAAa,CAACsB,GAAG,CAAC,+BAA+B,CAAC;MACzEhB,YAAY,CAACe,QAAQ,CAACE,IAAI,CAACC,cAAc,CAAC;MAC1CN,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,2BAA2B,EAAEQ,GAAG,CAAC;MAC/CP,QAAQ,CAAC,4BAA4B,CAAC;IACxC;EACF,CAAC;;EAED;EACA,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMrB,aAAa,CAACsB,GAAG,CAAC,WAAW,CAAC;MACrDd,WAAW,CAACa,QAAQ,CAACE,IAAI,CAAChB,QAAQ,CAAC;IACrC,CAAC,CAAC,OAAOkB,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,0BAA0B,EAAEQ,GAAG,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCrB,cAAc,CAAEsB,IAAI,KAAM;MACxB,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMG,mBAAmB,GAAIL,CAAC,IAAK;IACjC,MAAMM,SAAS,GAAGC,QAAQ,CAACP,CAAC,CAACG,MAAM,CAACD,KAAK,CAAC;IAC1C,MAAMM,SAAS,GAAGR,CAAC,CAACG,MAAM,CAACM,OAAO;IAElC3B,cAAc,CAAEsB,IAAI,IAAK;MACvB,MAAMM,YAAY,GAAGF,SAAS,GAC1B,CAAC,GAAGJ,IAAI,CAAChB,KAAK,EAAE;QAAEkB,SAAS;QAAErB,eAAe,EAAE,EAAE;QAAEC,iBAAiB,EAAE;MAAG,CAAC,CAAC,GAC1EkB,IAAI,CAAChB,KAAK,CAACuB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACN,SAAS,KAAKA,SAAS,CAAC;MAE7D,OAAO;QAAE,GAAGF,IAAI;QAAEhB,KAAK,EAAEsB;MAAa,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMG,wBAAwB,GAAGA,CAACP,SAAS,EAAEQ,KAAK,EAAEZ,KAAK,KAAK;IAC5DpB,cAAc,CAAEsB,IAAI,IAAK;MACvB,MAAMM,YAAY,GAAGN,IAAI,CAAChB,KAAK,CAAC2B,GAAG,CAAEH,IAAI,IAAK;QAC5C,IAAIA,IAAI,CAACN,SAAS,KAAKA,SAAS,EAAE;UAChC,OAAO;YAAE,GAAGM,IAAI;YAAE,CAACE,KAAK,GAAGZ;UAAM,CAAC;QACpC;QACA,OAAOU,IAAI;MACb,CAAC,CAAC;MACF,OAAO;QAAE,GAAGR,IAAI;QAAEhB,KAAK,EAAEsB;MAAa,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMM,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAM5C,aAAa,CAAC6C,IAAI,CAAC,+BAA+B,EAAEpC,WAAW,CAAC;MACtEC,cAAc,CAAC;QACbC,eAAe,EAAE,EAAE;QACnBC,UAAU,EAAE,EAAE;QACdC,eAAe,EAAE,EAAE;QACnBC,iBAAiB,EAAE,EAAE;QACrBC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE;MACT,CAAC,CAAC;MACFG,cAAc,CAAC,CAAC,CAAC,CAAC;MAClBD,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACT,KAAK,CAAC,8BAA8B,EAAEQ,GAAG,CAAC;MAClDP,QAAQ,CAAC,+BAA+B,CAAC;IAC3C;EACF,CAAC;EAED,oBACEhB,OAAA;IAAA4C,QAAA,gBACE5C,OAAA;MAAA4C,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9BjC,KAAK,iBAAIf,OAAA;MAAGiD,SAAS,EAAC,OAAO;MAAAL,QAAA,EAAE7B;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAG1ChD,OAAA;MAAKkD,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAP,QAAA,gBACnC5C,OAAA;QAAA4C,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BhD,OAAA;QACEoD,IAAI,EAAC,MAAM;QACXzB,IAAI,EAAC,iBAAiB;QACtB0B,WAAW,EAAC,mBAAmB;QAC/BzB,KAAK,EAAErB,WAAW,CAACE,eAAgB;QACnC6C,QAAQ,EAAE7B;MAAkB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFhD,OAAA;QACEoD,IAAI,EAAC,MAAM;QACXzB,IAAI,EAAC,YAAY;QACjB0B,WAAW,EAAC,qBAAqB;QACjCzB,KAAK,EAAErB,WAAW,CAACG,UAAW;QAC9B4C,QAAQ,EAAE7B;MAAkB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFhD,OAAA;QACEoD,IAAI,EAAC,gBAAgB;QACrBzB,IAAI,EAAC,iBAAiB;QACtB0B,WAAW,EAAC,kBAAkB;QAC9BzB,KAAK,EAAErB,WAAW,CAACI,eAAgB;QACnC2C,QAAQ,EAAE7B;MAAkB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFhD,OAAA;QACEoD,IAAI,EAAC,gBAAgB;QACrBzB,IAAI,EAAC,mBAAmB;QACxB0B,WAAW,EAAC,oBAAoB;QAChCzB,KAAK,EAAErB,WAAW,CAACK,iBAAkB;QACrC0C,QAAQ,EAAE7B;MAAkB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFhD,OAAA;QACEoD,IAAI,EAAC,MAAM;QACXzB,IAAI,EAAC,SAAS;QACd0B,WAAW,EAAC,UAAU;QACtBzB,KAAK,EAAErB,WAAW,CAACM,OAAQ;QAC3ByC,QAAQ,EAAE7B;MAAkB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eAEFhD,OAAA;QAAA4C,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACpB3C,QAAQ,CAACoC,GAAG,CAAEc,OAAO,iBACpBvD,OAAA;QAAA4C,QAAA,gBACE5C,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YACEoD,IAAI,EAAC,UAAU;YACfxB,KAAK,EAAE2B,OAAO,CAACC,SAAU;YACzBF,QAAQ,EAAEvB;UAAoB;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,EACDO,OAAO,CAACE,WAAW;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,EACPzC,WAAW,CAACO,KAAK,CAAC4C,IAAI,CAAEpB,IAAI,IAAKA,IAAI,CAACN,SAAS,KAAKuB,OAAO,CAACC,SAAS,CAAC,iBACrExD,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YACEoD,IAAI,EAAC,gBAAgB;YACrBC,WAAW,EAAC,kBAAkB;YAC9BC,QAAQ,EAAG5B,CAAC,IACVa,wBAAwB,CAACgB,OAAO,CAACC,SAAS,EAAE,iBAAiB,EAAE9B,CAAC,CAACG,MAAM,CAACD,KAAK;UAC9E;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACFhD,OAAA;YACEoD,IAAI,EAAC,gBAAgB;YACrBC,WAAW,EAAC,oBAAoB;YAChCC,QAAQ,EAAG5B,CAAC,IACVa,wBAAwB,CAACgB,OAAO,CAACC,SAAS,EAAE,mBAAmB,EAAE9B,CAAC,CAACG,MAAM,CAACD,KAAK;UAChF;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CACN;MAAA,GA1BOO,OAAO,CAACC,SAAS;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA2BtB,CACN,CAAC,eAEFhD,OAAA;QAAQ2D,OAAO,EAAEjB,iBAAkB;QAAAE,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,eAGNhD,OAAA;MAAA4C,QAAA,gBACE5C,OAAA;QAAA4C,QAAA,eACE5C,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YAAA4C,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBhD,OAAA;YAAA4C,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1BhD,OAAA;YAAA4C,QAAA,EAAI;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBhD,OAAA;YAAA4C,QAAA,EAAI;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzBhD,OAAA;YAAA4C,QAAA,EAAI;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3BhD,OAAA;YAAA4C,QAAA,EAAI;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjBhD,OAAA;YAAA4C,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRhD,OAAA;QAAA4C,QAAA,EACGzC,SAAS,CAACsC,GAAG,CAAEmB,QAAQ,iBACtB5D,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YAAA4C,QAAA,EAAKgB,QAAQ,CAACC;UAAU;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC9BhD,OAAA;YAAA4C,QAAA,EAAKgB,QAAQ,CAACE;UAAe;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACnChD,OAAA;YAAA4C,QAAA,EAAKgB,QAAQ,CAACG;UAAU;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC9BhD,OAAA;YAAA4C,QAAA,EAAKgB,QAAQ,CAACI;UAAe;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACnChD,OAAA;YAAA4C,QAAA,EAAKgB,QAAQ,CAACK;UAAiB;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACrChD,OAAA;YAAA4C,QAAA,EAAKgB,QAAQ,CAACM;UAAO;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC3BhD,OAAA;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEI,CAAC;QAAA,GATEY,QAAQ,CAACC,UAAU;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUxB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAC9C,EAAA,CA9MID,kBAAkB;AAAAkE,EAAA,GAAlBlE,kBAAkB;AAgNxB,eAAeA,kBAAkB;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}