{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js\",\n  _s = $RefreshSig$();\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n// // // //   const [editMode, setEditMode] = useState(null);\n// // // //   const [formValues, setFormValues] = useState({});\n\n// // // //   // Fetch schedules on component mount\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Function to fetch train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/representative/schedules');\n// // // //       setSchedules(response.data.schedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle delete schedule\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit schedule\n// // // //   const editSchedule = (schedule) => {\n// // // //     setEditMode(schedule.ScheduleID);\n// // // //     setFormValues({\n// // // //       TransitLineName: schedule.TransitLineName,\n// // // //       DepartureDateTime: schedule.DepartureDateTime,\n// // // //       ArrivalDateTime: schedule.ArrivalDateTime,\n// // // //       TravelTime: schedule.TravelTime,\n// // // //     });\n// // // //   };\n\n// // // //   // Handle form input changes\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setFormValues({ ...formValues, [name]: value });\n// // // //   };\n\n// // // //   // Handle save edited schedule\n// // // //   const saveSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// // // //       setEditMode(null);\n// // // //       fetchSchedules();\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Render\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"text\"\n// // // //                     name=\"TransitLineName\"\n// // // //                     value={formValues.TransitLineName}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   schedule.TransitLineName\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"datetime-local\"\n// // // //                     name=\"DepartureDateTime\"\n// // // //                     value={formValues.DepartureDateTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"datetime-local\"\n// // // //                     name=\"ArrivalDateTime\"\n// // // //                     value={formValues.ArrivalDateTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"time\"\n// // // //                     name=\"TravelTime\"\n// // // //                     value={formValues.TravelTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   schedule.TravelTime\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <>\n// // // //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// // // //                   </>\n// // // //                 ) : (\n// // // //                   <>\n// // // //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// // // //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //                   </>\n// // // //                 )}\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [newSchedule, setNewSchedule] = useState({\n// // // //     transitLineName: '',\n// // // //     travelTime: '',\n// // // //     arrivalDateTime: '',\n// // // //     departureDateTime: '',\n// // // //     trainId: '',\n// // // //   });\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // // //   };\n\n// // // //   const addSchedule = async () => {\n// // // //     try {\n// // // //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// // // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // // //     } catch (err) {\n// // // //       console.error('Error adding schedule:', err);\n// // // //       setError('Failed to add new schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const editSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       fetchSchedules(); // Refresh the list after editing\n// // // //     } catch (err) {\n// // // //       console.error('Error editing schedule:', err);\n// // // //       setError('Failed to edit schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       fetchSchedules(); // Refresh the list after deleting\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Form to Add New Schedule */}\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"transitLineName\"\n// // // //           placeholder=\"Transit Line Name\"\n// // // //           value={newSchedule.transitLineName}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"time\"\n// // // //           name=\"travelTime\"\n// // // //           placeholder=\"Travel Time\"\n// // // //           value={newSchedule.travelTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"datetime-local\"\n// // // //           name=\"arrivalDateTime\"\n// // // //           placeholder=\"Arrival DateTime\"\n// // // //           value={newSchedule.arrivalDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"datetime-local\"\n// // // //           name=\"departureDateTime\"\n// // // //           placeholder=\"Departure DateTime\"\n// // // //           value={newSchedule.departureDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"trainId\"\n// // // //           placeholder=\"Train ID\"\n// // // //           value={newSchedule.trainId}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={addSchedule}>Add Schedule</button>\n// // // //       </div>\n\n// // // //       {/* Schedule Table */}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TransitLineName}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"time\"\n// // // //                   value={schedule.TravelTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"datetime-local\"\n// // // //                   value={schedule.ArrivalDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"datetime-local\"\n// // // //                   value={schedule.DepartureDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TrainID}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [newSchedule, setNewSchedule] = useState({\n// // // //     transitLineName: '',\n// // // //     travelTime: '',\n// // // //     arrivalDateTime: '',\n// // // //     departureDateTime: '',\n// // // //     trainId: '',\n// // // //   });\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // // //   };\n\n// // // //   const addSchedule = async () => {\n// // // //     try {\n// // // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // // //     } catch (err) {\n// // // //       console.error('Error adding schedule:', err);\n// // // //       setError('Failed to add new schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const editSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       fetchSchedules(); // Refresh the list after editing\n// // // //     } catch (err) {\n// // // //       console.error('Error editing schedule:', err);\n// // // //       setError('Failed to edit schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       fetchSchedules(); // Refresh the list after deleting\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Form to Add New Schedule */}\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"transitLineName\"\n// // // //           placeholder=\"Transit Line Name\"\n// // // //           value={newSchedule.transitLineName}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"time\"\n// // // //           name=\"travelTime\"\n// // // //           placeholder=\"Travel Time\"\n// // // //           value={newSchedule.travelTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"arrivalDateTime\"\n// // // //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // // //           value={newSchedule.arrivalDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"departureDateTime\"\n// // // //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // // //           value={newSchedule.departureDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"trainId\"\n// // // //           placeholder=\"Train ID\"\n// // // //           value={newSchedule.trainId}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={addSchedule}>Add Schedule</button>\n// // // //       </div>\n\n// // // //       {/* Schedule Table */}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TransitLineName}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"time\"\n// // // //                   value={schedule.TravelTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.ArrivalDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.DepartureDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TrainID}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>{schedule.TransitLineName}</td>\n// // // //               <td>{schedule.TravelTime}</td>\n// // // //               <td>{schedule.ArrivalDateTime}</td>\n// // // //               <td>{schedule.DepartureDateTime}</td>\n// // // //               <td>{schedule.TrainID}</td>\n// // // //               <td>\n// // // //                 <button\n// // // //                   onClick={() => console.log('Edit schedule')}\n// // // //                   style={{ marginRight: '5px' }}\n// // // //                 >\n// // // //                   Edit\n// // // //                 </button>\n// // // //                 {schedule.ReservationCount === 0 ? (\n// // // //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                 ) : (\n// // // //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                 )}\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [transitLineName, setTransitLineName] = useState('');\n// // // //   const [travelTime, setTravelTime] = useState('');\n// // // //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// // // //   const [departureDateTime, setDepartureDateTime] = useState('');\n// // // //   const [trainID, setTrainID] = useState('');\n// // // //   const [success, setSuccess] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle adding a new schedule\n// // // //   const handleAddSchedule = async (e) => {\n// // // //     e.preventDefault();\n// // // //     try {\n// // // //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// // // //         TransitLineName: transitLineName,\n// // // //         TravelTime: travelTime,\n// // // //         ArrivalDateTime: arrivalDateTime,\n// // // //         DepartureDateTime: departureDateTime,\n// // // //         TrainID: trainID,\n// // // //       });\n\n// // // //       setSuccess(response.data.message);\n// // // //       setError('');\n// // // //       fetchSchedules(); // Refresh the schedule list\n\n// // // //       // Clear form fields\n// // // //       setTransitLineName('');\n// // // //       setTravelTime('');\n// // // //       setArrivalDateTime('');\n// // // //       setDepartureDateTime('');\n// // // //       setTrainID('');\n// // // //     } catch (err) {\n// // // //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// // // //       setSuccess('');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n\n// // // //       {/* Add Train Schedule Form */}\n// // // //       <div>\n// // // //         <h3>Add Train Schedule</h3>\n// // // //         <form onSubmit={handleAddSchedule}>\n// // // //           <div>\n// // // //             <label>Transit Line Name:</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={transitLineName}\n// // // //               onChange={(e) => setTransitLineName(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Travel Time (hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={travelTime}\n// // // //               onChange={(e) => setTravelTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={arrivalDateTime}\n// // // //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={departureDateTime}\n// // // //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Train ID:</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={trainID}\n// // // //               onChange={(e) => setTrainID(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <button type=\"submit\">Add Schedule</button>\n// // // //         </form>\n// // // //         {error && <p className=\"error\">{error}</p>}\n// // // //         {success && <p className=\"success\">{success}</p>}\n// // // //       </div>\n\n// // // //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       if (response.data.trainSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name to filter schedules\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {filteredSchedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       if (response.data.trainSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Manage Train Schedules Section */}\n// // // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       {/* Search Train Schedules by Station Section */}\n// // // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name to filter schedules\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {filteredSchedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>{schedule.TransitLineName}</td>\n// // // //               <td>{schedule.TravelTime}</td>\n// // // //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //               <td>{schedule.TrainID}</td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [originSchedules, setOriginSchedules] = useState([]);\n// // // //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name (origin and destination)\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setOriginSchedules(response.data.originSchedules);\n// // // //       setDestinationSchedules(response.data.destinationSchedules);\n// // // //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Manage Train Schedules Section */}\n// // // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       {/* Search Train Schedules by Station Section */}\n// // // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <h4>Schedules with Station as Origin</h4>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {originSchedules.length > 0 ? (\n// // // //             originSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.TravelTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.TrainID}</td>\n// // // //               </tr>\n// // // //             ))\n// // // //           ) : (\n// // // //             <tr>\n// // // //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// // // //             </tr>\n// // // //           )}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       <h4>Schedules with Station as Destination</h4>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {destinationSchedules.length > 0 ? (\n// // // //             destinationSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.TravelTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.TrainID}</td>\n// // // //               </tr>\n// // // //             ))\n// // // //           ) : (\n// // // //             <tr>\n// // // //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// // // //             </tr>\n// // // //           )}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [stations, setStations] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainID: '',\n// // //     stops: []\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //     fetchStations();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Fetch all available stations for stops selection\n// // //   const fetchStations = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/stations');\n// // //       setStations(response.data.stations);\n// // //     } catch (err) {\n// // //       console.error('Error fetching stations:', err);\n// // //     }\n// // //   };\n\n// // //   // Handle input change for new schedule form\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle stops selection\n// // //   const handleStopSelection = (e) => {\n// // //     const stationID = parseInt(e.target.value);\n// // //     const isChecked = e.target.checked;\n\n// // //     setNewSchedule((prev) => {\n// // //       const updatedStops = isChecked\n// // //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// // //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// // //       return { ...prev, stops: updatedStops };\n// // //     });\n// // //   };\n\n// // //   // Handle arrival and departure date-time changes for each stop\n// // //   const handleStopDateTimeChange = (stationID, field, value) => {\n// // //     setNewSchedule((prev) => {\n// // //       const updatedStops = prev.stops.map((stop) => {\n// // //         if (stop.stationID === stationID) {\n// // //           return { ...stop, [field]: value };\n// // //         }\n// // //         return stop;\n// // //       });\n// // //       return { ...prev, stops: updatedStops };\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for adding the new schedule\n// // //   const handleAddSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // //       setNewSchedule({\n// // //         transitLineName: '',\n// // //         travelTime: '',\n// // //         arrivalDateTime: '',\n// // //         departureDateTime: '',\n// // //         trainID: '',\n// // //         stops: []\n// // //       });\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error adding train schedule:', err);\n// // //       setError('Failed to add train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       {/* Add Train Schedule Form */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <h3>Add Train Schedule</h3>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time (HH:MM)\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainID\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainID}\n// // //           onChange={handleInputChange}\n// // //         />\n\n// // //         <h4>Select Stops</h4>\n// // //         {stations.map((station) => (\n// // //           <div key={station.StationID}>\n// // //             <label>\n// // //               <input\n// // //                 type=\"checkbox\"\n// // //                 value={station.StationID}\n// // //                 onChange={handleStopSelection}\n// // //               />\n// // //               {station.StationName}\n// // //             </label>\n// // //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// // //               <div>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   placeholder=\"Arrival DateTime\"\n// // //                   onChange={(e) =>\n// // //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// // //                   }\n// // //                 />\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   placeholder=\"Departure DateTime\"\n// // //                   onChange={(e) =>\n// // //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// // //                   }\n// // //                 />\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         ))}\n\n// // //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Train Schedules Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime}</td>\n// // //               <td>{schedule.DepartureDateTime}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //               <td>\n// // //                 {/* You can implement edit and delete buttons here */}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleEditInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Add Train Schedule</h3>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time (HH:MM)\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainID\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainID}\n// //           onChange={handleInputChange}\n// //         />\n\n// //         <h4>Select Stops</h4>\n// //         {stations.map((station) => (\n// //           <div key={station.StationID}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 value={station.StationID}\n// //                 onChange={handleStopSelection}\n// //               />\n// //               {station.StationName}\n// //             </label>\n// //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //               <div>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Arrival DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                   }\n// //                 />\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Departure DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                   }\n// //                 />\n// //               </div>\n// //             )}\n// //           </div>\n// //         ))}\n\n// //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Search Train Schedules by Station */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter\"\n// //           value={searchStationName}\n// //           onChange={(e) => setSearchStationName(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n// //       </div>\n\n// //       {/* Display Train Schedules */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {searchedSchedules.length > 0\n// //             ? searchedSchedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </tr>\n// //               ))\n// //             : schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                     <>\n// //                       <td>{schedule.ScheduleID}</td>\n// //                       <td>\n// //                         <input\n// //                           type=\"text\"\n// //                           name=\"TransitLineName\"\n// //                           value={editingSchedule.TransitLineName}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>{editingSchedule.TravelTime}</td>\n// //                       <td>\n// //                         <input\n// //                           type=\"date\"\n// //                           name=\"ArrivalDate\"\n// //                           value={editingSchedule.ArrivalDate}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"time\"\n// //                           name=\"ArrivalTime\"\n// //                           value={editingSchedule.ArrivalTime}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"date\"\n// //                           name=\"DepartureDate\"\n// //                           value={editingSchedule.DepartureDate}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"time\"\n// //                           name=\"DepartureTime\"\n// //                           value={editingSchedule.DepartureTime}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"text\"\n// //                           name=\"TrainID\"\n// //                           value={editingSchedule.TrainID}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                         <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                       </td>\n// //                     </>\n// //                   ) : (\n// //                     <>\n// //                       <td>{schedule.ScheduleID}</td>\n// //                       <td>{schedule.TransitLineName}</td>\n// //                       <td>{schedule.TravelTime}</td>\n// //                       <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                       <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                       <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                       <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                       <td>{schedule.TrainID}</td>\n// //                       <td>\n// //                         <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                           Edit\n// //                         </button>\n// //                         {schedule.ReservationCount === 0 ? (\n// //                           <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                         ) : (\n// //                           <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                         )}\n// //                       </td>\n// //                     </>\n// //                   )}\n// //                 </tr>\n// //               ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // // export default ManageSchedulesTab;\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       setShowAddScheduleForm(false);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleEditInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n\n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n\n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Button to toggle Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n// //           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n// //         </button>\n// //       </div>\n\n// //       {/* Add Train Schedule Form */}\n// //       {showAddScheduleForm && (\n// //         <div style={{ marginBottom: '20px' }}>\n// //           <h3>Add Train Schedule</h3>\n// //           <input\n// //             type=\"text\"\n// //             name=\"transitLineName\"\n// //             placeholder=\"Transit Line Name\"\n// //             value={newSchedule.transitLineName}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             name=\"travelTime\"\n// //             placeholder=\"Travel Time (HH:MM)\"\n// //             value={newSchedule.travelTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"datetime-local\"\n// //             name=\"arrivalDateTime\"\n// //             placeholder=\"Arrival DateTime\"\n// //             value={newSchedule.arrivalDateTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"datetime-local\"\n// //             name=\"departureDateTime\"\n// //             placeholder=\"Departure DateTime\"\n// //             value={newSchedule.departureDateTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             name=\"trainID\"\n// //             placeholder=\"Train ID\"\n// //             value={newSchedule.trainID}\n// //             onChange={handleInputChange}\n// //           />\n\n// //           <h4>Select Stops</h4>\n// //           {stations.map((station) => (\n// //             <div key={station.StationID}>\n// //               <label>\n// //                 <input\n// //                   type=\"checkbox\"\n// //                   value={station.StationID}\n// //                   onChange={handleStopSelection}\n// //                 />\n// //                 {station.StationName}\n// //               </label>\n// //               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //                 <div>\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     placeholder=\"Arrival DateTime\"\n// //                     onChange={(e) =>\n// //                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                     }\n// //                   />\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     placeholder=\"Departure DateTime\"\n// //                     onChange={(e) =>\n// //                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                     }\n// //                   />\n// //                 </div>\n// //               )}\n// //             </div>\n// //           ))}\n\n// //           <button onClick={handleAddSchedule}>Add Schedule</button>\n// //         </div>\n// //       )}\n\n// //       {/* Display All Train Schedules */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Current Train Schedules</h3>\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Travel Time</th>\n// //               <th>Arrival Date</th>\n// //               <th>Arrival Time</th>\n// //               <th>Departure Date</th>\n// //               <th>Departure Time</th>\n// //               <th>Train ID</th>\n// //               <th>Actions</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {schedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                   <>\n// //                     <td>{schedule.ScheduleID}</td>\n// //                     <td>\n// //                       <input\n// //                         type=\"text\"\n// //                         name=\"TransitLineName\"\n// //                         value={editingSchedule.TransitLineName}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>{editingSchedule.TravelTime}</td>\n// //                     <td>\n// //                       <input\n// //                         type=\"date\"\n// //                         name=\"ArrivalDate\"\n// //                         value={editingSchedule.ArrivalDate}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"time\"\n// //                         name=\"ArrivalTime\"\n// //                         value={editingSchedule.ArrivalTime}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"date\"\n// //                         name=\"DepartureDate\"\n// //                         value={editingSchedule.DepartureDate}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"time\"\n// //                         name=\"DepartureTime\"\n// //                         value={editingSchedule.DepartureTime}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"text\"\n// //                         name=\"TrainID\"\n// //                         value={editingSchedule.TrainID}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                     </td>\n// //                   </>\n// //                 ) : (\n// //                   <>\n// //                     <td>{schedule.ScheduleID}</td>\n// //                     <td>{schedule.TransitLineName}</td>\n// //                     <td>{schedule.TravelTime}</td>\n// //                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                     <td>{schedule.TrainID}</td>\n// //                     <td>\n// //                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                         Edit\n// //                       </button>\n// //                       {schedule.ReservationCount === 0 ? (\n// //                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                       ) : (\n// //                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                       )}\n// //                     </td>\n// //                   </>\n// //                 )}\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n\n// //       {/* Search Train Schedules by Station */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter\"\n// //           value={searchStationName}\n// //           onChange={(e) => setSearchStationName(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Travel Time</th>\n// //               <th>Arrival Date</th>\n// //               <th>Arrival Time</th>\n// //               <th>Departure Date</th>\n// //               <th>Departure Time</th>\n// //               <th>Train ID</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {searchedSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.TravelTime}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.TrainID}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [trains, setTrains] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //     fetchTrains();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Fetch all available trains for TrainID dropdown\n// //   const fetchTrains = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/trains');\n// //       setTrains(response.data.trains);\n// //     } catch (err) {\n// //       console.error('Error fetching trains:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       setShowAddScheduleForm(false);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [transitLines, setTransitLines] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//     fetchTransitLines(); // Fetch available transit lines for dropdown\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Fetch all available transit lines for selection\n//   const fetchTransitLines = async () => {\n//     try {\n//       const response = await axiosInstance.get('/transit-lines');\n//       setTransitLines(response.data.transitLines);\n//     } catch (err) {\n//       console.error('Error fetching transit lines:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     // <div>\n//     //   <h2>Manage Train Schedules</h2>\n//     //   {error && <p className=\"error\">{error}</p>}\n\n//     //   {/* Button to toggle Add Train Schedule Form */}\n//     //   <div style={{ marginBottom: '20px' }}>\n//     //     <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//     //       {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//     //     </button>\n//     //   </div>\n\n//     //   {/* Add Train Schedule Form */}\n//     //   {showAddScheduleForm && (\n//     //     <div style={{ marginBottom: '20px' }}>\n//     //       <h3>Add Train Schedule</h3>\n//     //       <input\n//     //         type=\"text\"\n//     //         name=\"transitLineName\"\n//     //         placeholder=\"Transit Line Name\"\n//     //         value={newSchedule.transitLineName}\n//     //         onChange={handleInputChange}\n//     //       />\n//     //       <input\n//     //         type=\"text\"\n//     //         name=\"travelTime\"\n//     //         placeholder=\"Travel Time (HH:MM)\"\n//     //         value={newSchedule.travelTime}\n//     //         onChange={handleInputChange}\n//     //       />\n//     //       <input\n//     //         type=\"datetime-local\"\n//     //         name=\"arrivalDateTime\"\n//     //         placeholder=\"Arrival DateTime\"\n//     //         value={newSchedule.arrivalDateTime}\n//     //         onChange={handleInputChange}\n//     //       />\n//     //       <input\n//     //         type=\"datetime-local\"\n//     //         name=\"departureDateTime\"\n//     //         placeholder=\"Departure DateTime\"\n//     //         value={newSchedule.departureDateTime}\n//     //         onChange={handleInputChange}\n//     //       />\n//     //       <select\n//     //         name=\"trainID\"\n//     //         value={newSchedule.trainID}\n//     //         onChange={handleInputChange}\n//     //       >\n//     //         <option value=\"\">Select Train ID</option>\n//     //         {trains.map((train) => (\n//     //           <option key={train.TrainID} value={train.TrainID}>\n//     //             {train.TrainID}\n//     //           </option>\n//     //         ))}\n//     //       </select>\n\n//     //       <h4>Select Stops</h4>\n//     //       {stations.map((station) => (\n//     //         <div key={station.StationID}>\n//     //           <label>\n//     //             <input\n//     //               type=\"checkbox\"\n//     //               value={station.StationID}\n//     //               onChange={handleStopSelection}\n//     //             />\n//     //             {station.StationName}\n//     //           </label>\n//     //           {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//     //             <div>\n//     //               <input\n//     //                 type=\"datetime-local\"\n//     //                 placeholder=\"Arrival DateTime\"\n//     //                 onChange={(e) =>\n//     //                   handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//     //                 }\n//     //               />\n//     //               <input\n//     //                 type=\"datetime-local\"\n//     //                 placeholder=\"Departure DateTime\"\n//     //                 onChange={(e) =>\n//     //                   handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//     //                 }\n//     //               />\n//     //             </div>\n//     //           )}\n//     //         </div>\n//     //       ))}\n\n//     //       <button onClick={handleAddSchedule}>Add Schedule</button>\n//     //     </div>\n//     //   )}\n// <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Button to toggle Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//         </button>\n//       </div>\n\n//       {/* Add Train Schedule Form */}\n//       {showAddScheduleForm && (\n//         <div style={{ marginBottom: '20px' }}>\n//           <h3>Add Train Schedule</h3>\n//           <select\n//             name=\"transitLineName\"\n//             value={newSchedule.transitLineName}\n//             onChange={handleInputChange}\n//           >\n//             <option value=\"\">Select Transit Line</option>\n//             {transitLines.map((line) => (\n//               <option key={line.TransitLineName} value={line.TransitLineName}>\n//                 {line.TransitLineName}\n//               </option>\n//             ))}\n//           </select>\n//           <input\n//             type=\"text\"\n//             name=\"travelTime\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"arrivalDateTime\"\n//             placeholder=\"Arrival DateTime\"\n//             value={newSchedule.arrivalDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"departureDateTime\"\n//             placeholder=\"Departure DateTime\"\n//             value={newSchedule.departureDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <select\n//             name=\"trainID\"\n//             value={newSchedule.trainID}\n//             onChange={handleInputChange}\n//           >\n//             <option value=\"\">Select Train ID</option>\n//             {stations.map((train) => (\n//               <option key={train.TrainID} value={train.TrainID}>\n//                 {train.TrainID}\n//               </option>\n//             ))}\n//           </select>\n\n//           <h4>Select Stops</h4>\n//           {stations.map((station) => (\n//             <div key={station.StationID}>\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   value={station.StationID}\n//                   onChange={handleStopSelection}\n//                 />\n//                 {station.StationName}\n//               </label>\n//               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//                 <div>\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Arrival DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                     }\n//                   />\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Departure DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                     }\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       {/* Display All Train Schedules */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Current Train Schedules</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {schedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TransitLineName\"\n//                         value={editingSchedule.TransitLineName}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>{editingSchedule.TravelTime}</td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"ArrivalDate\"\n//                         value={editingSchedule.ArrivalDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"ArrivalTime\"\n//                         value={editingSchedule.ArrivalTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"DepartureDate\"\n//                         value={editingSchedule.DepartureDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"DepartureTime\"\n//                         value={editingSchedule.DepartureTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <select\n//                         name=\"TrainID\"\n//                         value={editingSchedule.TrainID}\n//                         onChange={handleEditInputChange}\n//                       >\n//                         <option value=\"\">Select Train ID</option>\n//                         {trains.map((train) => (\n//                           <option key={train.TrainID} value={train.TrainID}>\n//                             {train.TrainID}\n//                           </option>\n//                         ))}\n//                       </select>\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                     <td>\n//                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                         Edit\n//                       </button>\n//                       {schedule.ReservationCount === 0 ? (\n//                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                       ) : (\n//                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                       )}\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//   <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//   <select\n//     value={searchStationName}\n//     onChange={(e) => setSearchStationName(e.target.value)}\n//   >\n//     <option value=\"\">Select Station</option>\n//     {stations.map((station) => (\n//       <option key={station.StationID} value={station.StationName}>\n//         {station.StationName}\n//       </option>\n//     ))}\n//   </select>\n//   <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//   {/* Render search results */}\n//   <table>\n//     <thead>\n//       <tr>\n//         <th>Schedule ID</th>\n//         <th>Transit Line Name</th>\n//         <th>Travel Time</th>\n//         <th>Arrival Date</th>\n//         <th>Arrival Time</th>\n//         <th>Departure Date</th>\n//         <th>Departure Time</th>\n//         <th>Train ID</th>\n//       </tr>\n//     </thead>\n//     <tbody>\n//       {searchedSchedules.map((schedule) => (\n//         <tr key={schedule.ScheduleID}>\n//           <td>{schedule.ScheduleID}</td>\n//           <td>{schedule.TransitLineName}</td>\n//           <td>{schedule.TravelTime}</td>\n//           <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//           <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//           <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//           <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//           <td>{schedule.TrainID}</td>\n//         </tr>\n//       ))}\n//     </tbody>\n//   </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [trains, setTrains] = useState([]);\n//   const [transitLines, setTransitLines] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//     fetchTrains(); // Fetch available trains for dropdown\n//     fetchTransitLines(); // Fetch available transit lines for dropdown\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Fetch all available trains for TrainID dropdown\n//   const fetchTrains = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/trains');\n//       setTrains(response.data.trains);\n//     } catch (err) {\n//       console.error('Error fetching trains:', err);\n//     }\n//   };\n\n//   // Fetch all available transit lines for selection\n//   const fetchTransitLines = async () => {\n//     try {\n//       const response = await axiosInstance.get('/transit-lines');\n//       setTransitLines(response.data.transitLines);\n//     } catch (err) {\n//       console.error('Error fetching transit lines:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n\n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n\n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Button to toggle Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//         </button>\n//       </div>\n\n//       {/* Add Train Schedule Form */}\n//       {showAddScheduleForm && (\n//         <div style={{ marginBottom: '20px' }}>\n//           <h3>Add Train Schedule</h3>\n//           <select\n//             name=\"transitLineName\"\n//             value={newSchedule.transitLineName}\n//             onChange={handleInputChange}\n//           >\n//             <option value=\"\">Select Transit Line</option>\n//             {transitLines.map((line) => (\n//               <option key={line.TransitLineName} value={line.TransitLineName}>\n//                 {line.TransitLineName}\n//               </option>\n//             ))}\n//           </select>\n//           <input\n//             type=\"text\"\n//             name=\"travelTime\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"arrivalDateTime\"\n//             placeholder=\"Arrival DateTime\"\n//             value={newSchedule.arrivalDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"departureDateTime\"\n//             placeholder=\"Departure DateTime\"\n//             value={newSchedule.departureDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <select\n//             name=\"trainID\"\n//             value={newSchedule.trainID}\n//             onChange={handleInputChange}\n//           >\n//             <option value=\"\">Select Train ID</option>\n//             {trains.map((train) => (\n//               <option key={train.TrainID} value={train.TrainID}>\n//                 {train.TrainID}\n//               </option>\n//             ))}\n//           </select>\n\n//           <h4>Select Stops</h4>\n//           {stations.map((station) => (\n//             <div key={station.StationID}>\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   value={station.StationID}\n//                   onChange={handleStopSelection}\n//                 />\n//                 {station.StationName}\n//               </label>\n//               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//                 <div>\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Arrival DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                     }\n//                   />\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Departure DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                     }\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       {/* Display All Train Schedules */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Current Train Schedules</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {schedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TransitLineName\"\n//                         value={editingSchedule.TransitLineName}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>{editingSchedule.TravelTime}</td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"ArrivalDate\"\n//                         value={editingSchedule.ArrivalDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"ArrivalTime\"\n//                         value={editingSchedule.ArrivalTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"DepartureDate\"\n//                         value={editingSchedule.DepartureDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"DepartureTime\"\n//                         value={editingSchedule.DepartureTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <select\n//                         name=\"TrainID\"\n//                         value={editingSchedule.TrainID}\n//                         onChange={handleEditInputChange}\n//                       >\n//                         <option value=\"\">Select Train ID</option>\n//                         {trains.map((train) => (\n//                           <option key={train.TrainID} value={train.TrainID}>\n//                             {train.TrainID}\n//                           </option>\n//                         ))}\n//                       </select>\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                     <td>\n//                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                         Edit\n//                       </button>\n//                       {schedule.ReservationCount === 0 ? (\n//                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                       ) : (\n//                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                       )}\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <select\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         >\n//           <option value=\"\">Select Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//         {/* Render search results */}\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {searchedSchedules.length === 0 ? (\n//                 <tr>\n//                 <td colSpan=\"8\">No train schedules found for the selected station.</td>\n//                 </tr>\n//             ) : (\n//                 searchedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                 </tr>\n//                 ))\n//             )}\n//             </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageSchedulesTab = () => {\n  _s();\n  const [schedules, setSchedules] = useState([]);\n  const [stations, setStations] = useState([]);\n  const [trains, setTrains] = useState([]);\n  const [transitLines, setTransitLines] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDateTime: '',\n    departureDateTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n  const [searchStationName, setSearchStationName] = useState('');\n  const [searchedSchedules, setSearchedSchedules] = useState([]);\n  const [searchTriggered, setSearchTriggered] = useState(false); // New flag to track if a search has been conducted\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    fetchSchedules();\n    fetchStations();\n    fetchTrains(); // Fetch available trains for dropdown\n    fetchTransitLines(); // Fetch available transit lines for dropdown\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available stations for stops selection\n  const fetchStations = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setStations(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stations:', err);\n    }\n  };\n\n  // Fetch all available trains for TrainID dropdown\n  const fetchTrains = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/trains');\n      setTrains(response.data.trains);\n    } catch (err) {\n      console.error('Error fetching trains:', err);\n    }\n  };\n\n  // Fetch all available transit lines for selection\n  const fetchTransitLines = async () => {\n    try {\n      const response = await axiosInstance.get('/transit-lines');\n      setTransitLines(response.data.transitLines);\n    } catch (err) {\n      console.error('Error fetching transit lines:', err);\n    }\n  };\n\n  // Handle input change for new schedule form\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewSchedule(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle stops selection\n  const handleStopSelection = e => {\n    const stationID = parseInt(e.target.value);\n    const isChecked = e.target.checked;\n    setNewSchedule(prev => {\n      const updatedStops = isChecked ? [...prev.stops, {\n        stationID,\n        arrivalDateTime: '',\n        departureDateTime: ''\n      }] : prev.stops.filter(stop => stop.stationID !== stationID);\n      return {\n        ...prev,\n        stops: updatedStops\n      };\n    });\n  };\n\n  // Handle arrival and departure date-time changes for each stop\n  const handleStopDateTimeChange = (stationID, field, value) => {\n    setNewSchedule(prev => {\n      const updatedStops = prev.stops.map(stop => {\n        if (stop.stationID === stationID) {\n          return {\n            ...stop,\n            [field]: value\n          };\n        }\n        return stop;\n      });\n      return {\n        ...prev,\n        stops: updatedStops\n      };\n    });\n  };\n\n  // Handle save button click for adding the new schedule\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDateTime: '',\n        departureDateTime: '',\n        trainID: '',\n        stops: []\n      });\n      setShowAddScheduleForm(false);\n      fetchSchedules(); // Re-fetch schedules to reflect the new addition\n      setError('');\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle search for schedules by station name\n  const handleSearchSchedules = async () => {\n    if (!searchStationName) {\n      setError('Please select a station to search.');\n      setSearchTriggered(false);\n      return;\n    }\n    setSearchTriggered(true);\n    try {\n      const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n      setSearchedSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error searching schedules:', err);\n      setError('Failed to search schedules.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4670,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4671,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAddScheduleForm(!showAddScheduleForm),\n        children: showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4675,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4674,\n      columnNumber: 7\n    }, this), showAddScheduleForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add Train Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4683,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"transitLineName\",\n        value: newSchedule.transitLineName,\n        onChange: handleInputChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Transit Line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4689,\n          columnNumber: 13\n        }, this), transitLines.map(line => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: line.TransitLineName,\n          children: line.TransitLineName\n        }, line.TransitLineName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4691,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4684,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"travelTime\",\n        placeholder: \"Travel Time (HH:MM)\",\n        value: newSchedule.travelTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4696,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        name: \"arrivalDateTime\",\n        placeholder: \"Arrival DateTime\",\n        value: newSchedule.arrivalDateTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4703,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        name: \"departureDateTime\",\n        placeholder: \"Departure DateTime\",\n        value: newSchedule.departureDateTime,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4710,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"trainID\",\n        value: newSchedule.trainID,\n        onChange: handleInputChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Train ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4722,\n          columnNumber: 13\n        }, this), trains.map(train => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: train.TrainID,\n          children: train.TrainID\n        }, train.TrainID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4724,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4717,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Stops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4730,\n        columnNumber: 11\n      }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: station.StationID,\n            onChange: handleStopSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4734,\n            columnNumber: 17\n          }, this), station.StationName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 4733,\n          columnNumber: 15\n        }, this), newSchedule.stops.some(stop => stop.stationID === station.StationID) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"Arrival DateTime\",\n            onChange: e => handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4743,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"Departure DateTime\",\n            onChange: e => handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4750,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 4742,\n          columnNumber: 17\n        }, this)]\n      }, station.StationID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4732,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSchedule,\n        children: \"Add Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4762,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 4682,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Current Train Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4768,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Schedule ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4772,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transit Line Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4773,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Travel Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4774,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4775,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4776,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4777,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4778,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Train ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4779,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4780,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 4771,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4770,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: schedules.length > 0 ? schedules.map(schedule => /*#__PURE__*/_jsxDEV(\"tr\", {}, schedule.ScheduleID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4786,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"9\",\n              children: \"No train schedules available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4792,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4791,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4783,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4769,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 4767,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Search Train Schedules by Station (Origin or Destination)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4801,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: searchStationName,\n        onChange: e => setSearchStationName(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Station\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4806,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4808,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4802,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchSchedules,\n        children: \"Search Schedules by Station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4813,\n        columnNumber: 9\n      }, this), searchTriggered && /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Schedule ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4820,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transit Line Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4821,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Travel Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4822,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4823,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4824,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4825,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4826,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Train ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4827,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 4819,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4818,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: searchedSchedules.length > 0 ? searchedSchedules.map(schedule => {\n            var _schedule$ArrivalDate, _schedule$DepartureDa;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ScheduleID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4834,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TransitLineName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4835,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TravelTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4836,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.ArrivalDateTime.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4837,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_schedule$ArrivalDate = schedule.ArrivalDateTime.split('T')[1]) === null || _schedule$ArrivalDate === void 0 ? void 0 : _schedule$ArrivalDate.substring(0, 5)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4838,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.DepartureDateTime.split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4839,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (_schedule$DepartureDa = schedule.DepartureDateTime.split('T')[1]) === null || _schedule$DepartureDa === void 0 ? void 0 : _schedule$DepartureDa.substring(0, 5)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4840,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: schedule.TrainID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4841,\n                columnNumber: 21\n              }, this)]\n            }, schedule.ScheduleID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 4833,\n              columnNumber: 19\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"8\",\n              style: {\n                color: 'red'\n              },\n              children: \"No train schedules found for the selected station.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4846,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4845,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4830,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4817,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 4800,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 4669,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageSchedulesTab, \"ryHZ4d/wDhMxtshAF/Jyzr18GfM=\");\n_c = ManageSchedulesTab;\nexport default ManageSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"ManageSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","ManageSchedulesTab","_s","schedules","setSchedules","stations","setStations","trains","setTrains","transitLines","setTransitLines","newSchedule","setNewSchedule","transitLineName","travelTime","arrivalDateTime","departureDateTime","trainID","stops","showAddScheduleForm","setShowAddScheduleForm","searchStationName","setSearchStationName","searchedSchedules","setSearchedSchedules","searchTriggered","setSearchTriggered","editingSchedule","setEditingSchedule","error","setError","fetchSchedules","fetchStations","fetchTrains","fetchTransitLines","response","get","data","trainSchedules","err","console","handleInputChange","e","name","value","target","prev","handleStopSelection","stationID","parseInt","isChecked","checked","updatedStops","filter","stop","handleStopDateTimeChange","field","map","handleAddSchedule","post","handleSearchSchedules","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","marginBottom","onClick","onChange","line","TransitLineName","type","placeholder","train","TrainID","station","StationID","StationName","some","length","schedule","ScheduleID","colSpan","marginTop","_schedule$ArrivalDate","_schedule$DepartureDa","TravelTime","ArrivalDateTime","split","substring","DepartureDateTime","color","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/ManageSchedulesTab.js"],"sourcesContent":["// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n// // // //   const [editMode, setEditMode] = useState(null);\n// // // //   const [formValues, setFormValues] = useState({});\n\n// // // //   // Fetch schedules on component mount\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Function to fetch train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/representative/schedules');\n// // // //       setSchedules(response.data.schedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle delete schedule\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/representative/schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((s) => s.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit schedule\n// // // //   const editSchedule = (schedule) => {\n// // // //     setEditMode(schedule.ScheduleID);\n// // // //     setFormValues({\n// // // //       TransitLineName: schedule.TransitLineName,\n// // // //       DepartureDateTime: schedule.DepartureDateTime,\n// // // //       ArrivalDateTime: schedule.ArrivalDateTime,\n// // // //       TravelTime: schedule.TravelTime,\n// // // //     });\n// // // //   };\n\n// // // //   // Handle form input changes\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setFormValues({ ...formValues, [name]: value });\n// // // //   };\n\n// // // //   // Handle save edited schedule\n// // // //   const saveSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/representative/schedules/${scheduleId}`, formValues);\n// // // //       setEditMode(null);\n// // // //       fetchSchedules();\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Render\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"text\"\n// // // //                     name=\"TransitLineName\"\n// // // //                     value={formValues.TransitLineName}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   schedule.TransitLineName\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"datetime-local\"\n// // // //                     name=\"DepartureDateTime\"\n// // // //                     value={formValues.DepartureDateTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   new Date(schedule.DepartureDateTime).toLocaleString()\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"datetime-local\"\n// // // //                     name=\"ArrivalDateTime\"\n// // // //                     value={formValues.ArrivalDateTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   new Date(schedule.ArrivalDateTime).toLocaleString()\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <input\n// // // //                     type=\"time\"\n// // // //                     name=\"TravelTime\"\n// // // //                     value={formValues.TravelTime}\n// // // //                     onChange={handleInputChange}\n// // // //                   />\n// // // //                 ) : (\n// // // //                   schedule.TravelTime\n// // // //                 )}\n// // // //               </td>\n// // // //               <td>\n// // // //                 {editMode === schedule.ScheduleID ? (\n// // // //                   <>\n// // // //                     <button onClick={() => saveSchedule(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={() => setEditMode(null)}>Cancel</button>\n// // // //                   </>\n// // // //                 ) : (\n// // // //                   <>\n// // // //                     <button onClick={() => editSchedule(schedule)}>Edit</button>\n// // // //                     <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //                   </>\n// // // //                 )}\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [newSchedule, setNewSchedule] = useState({\n// // // //     transitLineName: '',\n// // // //     travelTime: '',\n// // // //     arrivalDateTime: '',\n// // // //     departureDateTime: '',\n// // // //     trainId: '',\n// // // //   });\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // // //   };\n\n// // // //   const addSchedule = async () => {\n// // // //     try {\n// // // //       await axiosInstance.post('customer-rep/train-schedules', newSchedule);\n// // // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // // //     } catch (err) {\n// // // //       console.error('Error adding schedule:', err);\n// // // //       setError('Failed to add new schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const editSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       fetchSchedules(); // Refresh the list after editing\n// // // //     } catch (err) {\n// // // //       console.error('Error editing schedule:', err);\n// // // //       setError('Failed to edit schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       fetchSchedules(); // Refresh the list after deleting\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Form to Add New Schedule */}\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"transitLineName\"\n// // // //           placeholder=\"Transit Line Name\"\n// // // //           value={newSchedule.transitLineName}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"time\"\n// // // //           name=\"travelTime\"\n// // // //           placeholder=\"Travel Time\"\n// // // //           value={newSchedule.travelTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"datetime-local\"\n// // // //           name=\"arrivalDateTime\"\n// // // //           placeholder=\"Arrival DateTime\"\n// // // //           value={newSchedule.arrivalDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"datetime-local\"\n// // // //           name=\"departureDateTime\"\n// // // //           placeholder=\"Departure DateTime\"\n// // // //           value={newSchedule.departureDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"trainId\"\n// // // //           placeholder=\"Train ID\"\n// // // //           value={newSchedule.trainId}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={addSchedule}>Add Schedule</button>\n// // // //       </div>\n\n// // // //       {/* Schedule Table */}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TransitLineName}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"time\"\n// // // //                   value={schedule.TravelTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"datetime-local\"\n// // // //                   value={schedule.ArrivalDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"datetime-local\"\n// // // //                   value={schedule.DepartureDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TrainID}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [newSchedule, setNewSchedule] = useState({\n// // // //     transitLineName: '',\n// // // //     travelTime: '',\n// // // //     arrivalDateTime: '',\n// // // //     departureDateTime: '',\n// // // //     trainId: '',\n// // // //   });\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setNewSchedule((prev) => ({ ...prev, [name]: value }));\n// // // //   };\n\n// // // //   const addSchedule = async () => {\n// // // //     try {\n// // // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // // //       fetchSchedules(); // Refresh the list after adding a new schedule\n// // // //     } catch (err) {\n// // // //       console.error('Error adding schedule:', err);\n// // // //       setError('Failed to add new schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const editSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = schedules.find((s) => s.ScheduleID === scheduleId);\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       fetchSchedules(); // Refresh the list after editing\n// // // //     } catch (err) {\n// // // //       console.error('Error editing schedule:', err);\n// // // //       setError('Failed to edit schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const deleteSchedule = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       fetchSchedules(); // Refresh the list after deleting\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Form to Add New Schedule */}\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"transitLineName\"\n// // // //           placeholder=\"Transit Line Name\"\n// // // //           value={newSchedule.transitLineName}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"time\"\n// // // //           name=\"travelTime\"\n// // // //           placeholder=\"Travel Time\"\n// // // //           value={newSchedule.travelTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"arrivalDateTime\"\n// // // //           placeholder=\"Arrival DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // // //           value={newSchedule.arrivalDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"departureDateTime\"\n// // // //           placeholder=\"Departure DateTime (YYYY-MM-DD HH:MM:SS)\"\n// // // //           value={newSchedule.departureDateTime}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           name=\"trainId\"\n// // // //           placeholder=\"Train ID\"\n// // // //           value={newSchedule.trainId}\n// // // //           onChange={handleInputChange}\n// // // //           style={{ marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={addSchedule}>Add Schedule</button>\n// // // //       </div>\n\n// // // //       {/* Schedule Table */}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TransitLineName}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TransitLineName: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"time\"\n// // // //                   value={schedule.TravelTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TravelTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.ArrivalDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, ArrivalDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.DepartureDateTime}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, DepartureDateTime: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <input\n// // // //                   type=\"text\"\n// // // //                   value={schedule.TrainID}\n// // // //                   onChange={(e) =>\n// // // //                     setSchedules((prev) =>\n// // // //                       prev.map((s) =>\n// // // //                         s.ScheduleID === schedule.ScheduleID ? { ...s, TrainID: e.target.value } : s\n// // // //                       )\n// // // //                     )\n// // // //                   }\n// // // //                 />\n// // // //               </td>\n// // // //               <td>\n// // // //                 <button onClick={() => editSchedule(schedule.ScheduleID)}>Edit</button>\n// // // //                 <button onClick={() => deleteSchedule(schedule.ScheduleID)}>Delete</button>\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>{schedule.TransitLineName}</td>\n// // // //               <td>{schedule.TravelTime}</td>\n// // // //               <td>{schedule.ArrivalDateTime}</td>\n// // // //               <td>{schedule.DepartureDateTime}</td>\n// // // //               <td>{schedule.TrainID}</td>\n// // // //               <td>\n// // // //                 <button\n// // // //                   onClick={() => console.log('Edit schedule')}\n// // // //                   style={{ marginRight: '5px' }}\n// // // //                 >\n// // // //                   Edit\n// // // //                 </button>\n// // // //                 {schedule.ReservationCount === 0 ? (\n// // // //                   <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                 ) : (\n// // // //                   <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                 )}\n// // // //               </td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [transitLineName, setTransitLineName] = useState('');\n// // // //   const [travelTime, setTravelTime] = useState('');\n// // // //   const [arrivalDateTime, setArrivalDateTime] = useState('');\n// // // //   const [departureDateTime, setDepartureDateTime] = useState('');\n// // // //   const [trainID, setTrainID] = useState('');\n// // // //   const [success, setSuccess] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule(schedule);\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => ({\n// // // //       ...prev,\n// // // //       [name]: value,\n// // // //     }));\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, editingSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle adding a new schedule\n// // // //   const handleAddSchedule = async (e) => {\n// // // //     e.preventDefault();\n// // // //     try {\n// // // //       const response = await axiosInstance.post('/customer-rep/train-schedules', {\n// // // //         TransitLineName: transitLineName,\n// // // //         TravelTime: travelTime,\n// // // //         ArrivalDateTime: arrivalDateTime,\n// // // //         DepartureDateTime: departureDateTime,\n// // // //         TrainID: trainID,\n// // // //       });\n\n// // // //       setSuccess(response.data.message);\n// // // //       setError('');\n// // // //       fetchSchedules(); // Refresh the schedule list\n\n// // // //       // Clear form fields\n// // // //       setTransitLineName('');\n// // // //       setTravelTime('');\n// // // //       setArrivalDateTime('');\n// // // //       setDepartureDateTime('');\n// // // //       setTrainID('');\n// // // //     } catch (err) {\n// // // //       setError(err.response?.data?.message || 'Error adding train schedule.');\n// // // //       setSuccess('');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n\n// // // //       {/* Add Train Schedule Form */}\n// // // //       <div>\n// // // //         <h3>Add Train Schedule</h3>\n// // // //         <form onSubmit={handleAddSchedule}>\n// // // //           <div>\n// // // //             <label>Transit Line Name:</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={transitLineName}\n// // // //               onChange={(e) => setTransitLineName(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Travel Time (hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={travelTime}\n// // // //               onChange={(e) => setTravelTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Arrival DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={arrivalDateTime}\n// // // //               onChange={(e) => setArrivalDateTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Departure DateTime (yyyy-mm-dd hh:mm:ss):</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={departureDateTime}\n// // // //               onChange={(e) => setDepartureDateTime(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <div>\n// // // //             <label>Train ID:</label>\n// // // //             <input\n// // // //               type=\"text\"\n// // // //               value={trainID}\n// // // //               onChange={(e) => setTrainID(e.target.value)}\n// // // //               required\n// // // //             />\n// // // //           </div>\n// // // //           <button type=\"submit\">Add Schedule</button>\n// // // //         </form>\n// // // //         {error && <p className=\"error\">{error}</p>}\n// // // //         {success && <p className=\"success\">{success}</p>}\n// // // //       </div>\n\n// // // //       {/* Existing Table for Viewing, Editing, and Deleting Schedules */}\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival DateTime</th>\n// // // //             <th>Departure DateTime</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TravelTime\"\n// // // //                       value={editingSchedule.TravelTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"ArrivalDateTime\"\n// // // //                       value={editingSchedule.ArrivalDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"DepartureDateTime\"\n// // // //                       value={editingSchedule.DepartureDateTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime}</td>\n// // // //                   <td>{schedule.DepartureDateTime}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n      \n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n          \n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       if (response.data.trainSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name to filter schedules\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {filteredSchedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [filteredSchedules, setFilteredSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setFilteredSchedules(response.data.trainSchedules);\n// // // //       if (response.data.trainSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Manage Train Schedules Section */}\n// // // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       {/* Search Train Schedules by Station Section */}\n// // // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name to filter schedules\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {filteredSchedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               <td>{schedule.ScheduleID}</td>\n// // // //               <td>{schedule.TransitLineName}</td>\n// // // //               <td>{schedule.TravelTime}</td>\n// // // //               <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //               <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //               <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //               <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //               <td>{schedule.TrainID}</td>\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // // import React, { useState, useEffect } from 'react';\n// // // // import axiosInstance from '../utils/axiosInstance';\n\n// // // // const ManageSchedulesTab = () => {\n// // // //   const [schedules, setSchedules] = useState([]);\n// // // //   const [editingSchedule, setEditingSchedule] = useState(null);\n// // // //   const [error, setError] = useState('');\n// // // //   const [stationName, setStationName] = useState('');\n// // // //   const [originSchedules, setOriginSchedules] = useState([]);\n// // // //   const [destinationSchedules, setDestinationSchedules] = useState([]);\n\n// // // //   useEffect(() => {\n// // // //     fetchSchedules();\n// // // //   }, []);\n\n// // // //   // Fetch all train schedules\n// // // //   const fetchSchedules = async () => {\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // // //       setSchedules(response.data.trainSchedules);\n// // // //       setError('');\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules:', err);\n// // // //       setError('Failed to fetch schedules.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle edit button click\n// // // //   const handleEditClick = (schedule) => {\n// // // //     setEditingSchedule({\n// // // //       ...schedule,\n// // // //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// // // //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// // // //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// // // //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// // // //     });\n// // // //   };\n\n// // // //   // Handle input change for editable fields\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setEditingSchedule((prev) => {\n// // // //       const updatedSchedule = {\n// // // //         ...prev,\n// // // //         [name]: value,\n// // // //       };\n\n// // // //       // Automatically calculate travel time if arrival or departure changes\n// // // //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// // // //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// // // //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// // // //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// // // //           const arrival = new Date(arrivalDateTime);\n// // // //           const departure = new Date(departureDateTime);\n\n// // // //           // Calculate the travel time in hours and minutes\n// // // //           const diffMs = Math.abs(arrival - departure);\n// // // //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// // // //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// // // //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// // // //         }\n// // // //       }\n\n// // // //       return updatedSchedule;\n// // // //     });\n// // // //   };\n\n// // // //   // Handle save button click for updating the schedule\n// // // //   const handleSave = async (scheduleId) => {\n// // // //     try {\n// // // //       const updatedSchedule = {\n// // // //         ...editingSchedule,\n// // // //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// // // //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// // // //       };\n// // // //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// // // //       setEditingSchedule(null);\n// // // //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// // // //     } catch (err) {\n// // // //       console.error('Error updating schedule:', err);\n// // // //       setError('Failed to update train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Handle cancel button click to cancel editing\n// // // //   const handleCancel = () => {\n// // // //     setEditingSchedule(null);\n// // // //   };\n\n// // // //   // Handle delete button click for removing a schedule\n// // // //   const handleDelete = async (scheduleId) => {\n// // // //     try {\n// // // //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// // // //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// // // //     } catch (err) {\n// // // //       console.error('Error deleting schedule:', err);\n// // // //       setError('Failed to delete train schedule.');\n// // // //     }\n// // // //   };\n\n// // // //   // Fetch schedules by station name (origin and destination)\n// // // //   const fetchSchedulesByStation = async () => {\n// // // //     if (!stationName) {\n// // // //       setError(\"Please enter a station name.\");\n// // // //       return;\n// // // //     }\n\n// // // //     try {\n// // // //       const response = await axiosInstance.get('/customer-rep/schedules-by-station', {\n// // // //         params: { stationName },\n// // // //       });\n// // // //       setOriginSchedules(response.data.originSchedules);\n// // // //       setDestinationSchedules(response.data.destinationSchedules);\n// // // //       if (response.data.originSchedules.length === 0 && response.data.destinationSchedules.length === 0) {\n// // // //         setError(\"No schedules found for this station.\");\n// // // //       } else {\n// // // //         setError(\"\");\n// // // //       }\n// // // //     } catch (err) {\n// // // //       console.error('Error fetching schedules by station:', err);\n// // // //       setError('Failed to fetch schedules for the specified station.');\n// // // //     }\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Manage Train Schedules</h2>\n// // // //       {error && <p className=\"error\">{error}</p>}\n\n// // // //       {/* Manage Train Schedules Section */}\n// // // //       <h3>Manage Train Schedules (Edit/Delete)</h3>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //             <th>Actions</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {schedules.map((schedule) => (\n// // // //             <tr key={schedule.ScheduleID}>\n// // // //               {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TransitLineName\"\n// // // //                       value={editingSchedule.TransitLineName}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>{editingSchedule.TravelTime}</td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"ArrivalDate\"\n// // // //                       value={editingSchedule.ArrivalDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"ArrivalTime\"\n// // // //                       value={editingSchedule.ArrivalTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"date\"\n// // // //                       name=\"DepartureDate\"\n// // // //                       value={editingSchedule.DepartureDate}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"time\"\n// // // //                       name=\"DepartureTime\"\n// // // //                       value={editingSchedule.DepartureTime}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <input\n// // // //                       type=\"text\"\n// // // //                       name=\"TrainID\"\n// // // //                       value={editingSchedule.TrainID}\n// // // //                       onChange={handleInputChange}\n// // // //                     />\n// // // //                   </td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// // // //                     <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// // // //                   </td>\n// // // //                 </>\n// // // //               ) : (\n// // // //                 <>\n// // // //                   <td>{schedule.ScheduleID}</td>\n// // // //                   <td>{schedule.TransitLineName}</td>\n// // // //                   <td>{schedule.TravelTime}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                   <td>{schedule.TrainID}</td>\n// // // //                   <td>\n// // // //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     {schedule.ReservationCount === 0 ? (\n// // // //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// // // //                     ) : (\n// // // //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// // // //                     )}\n// // // //                   </td>\n// // // //                 </>\n// // // //               )}\n// // // //             </tr>\n// // // //           ))}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       {/* Search Train Schedules by Station Section */}\n// // // //       <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// // // //       <div style={{ marginBottom: '20px' }}>\n// // // //         <input\n// // // //           type=\"text\"\n// // // //           placeholder=\"Enter station name\"\n// // // //           value={stationName}\n// // // //           onChange={(e) => setStationName(e.target.value)}\n// // // //           style={{ padding: '10px', marginRight: '10px' }}\n// // // //         />\n// // // //         <button onClick={fetchSchedulesByStation}>Search Schedules by Station</button>\n// // // //       </div>\n\n// // // //       <h4>Schedules with Station as Origin</h4>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {originSchedules.length > 0 ? (\n// // // //             originSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.TravelTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.TrainID}</td>\n// // // //               </tr>\n// // // //             ))\n// // // //           ) : (\n// // // //             <tr>\n// // // //               <td colSpan=\"8\">No schedules found with station as origin.</td>\n// // // //             </tr>\n// // // //           )}\n// // // //         </tbody>\n// // // //       </table>\n\n// // // //       <h4>Schedules with Station as Destination</h4>\n// // // //       <table>\n// // // //         <thead>\n// // // //           <tr>\n// // // //             <th>Schedule ID</th>\n// // // //             <th>Transit Line Name</th>\n// // // //             <th>Travel Time</th>\n// // // //             <th>Arrival Date</th>\n// // // //             <th>Arrival Time</th>\n// // // //             <th>Departure Date</th>\n// // // //             <th>Departure Time</th>\n// // // //             <th>Train ID</th>\n// // // //           </tr>\n// // // //         </thead>\n// // // //         <tbody>\n// // // //           {destinationSchedules.length > 0 ? (\n// // // //             destinationSchedules.map((schedule) => (\n// // // //               <tr key={schedule.ScheduleID}>\n// // // //                 <td>{schedule.ScheduleID}</td>\n// // // //                 <td>{schedule.TransitLineName}</td>\n// // // //                 <td>{schedule.TravelTime}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// // // //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// // // //                 <td>{schedule.TrainID}</td>\n// // // //               </tr>\n// // // //             ))\n// // // //           ) : (\n// // // //             <tr>\n// // // //               <td colSpan=\"8\">No schedules found with station as destination.</td>\n// // // //             </tr>\n// // // //           )}\n// // // //         </tbody>\n// // // //       </table>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default ManageSchedulesTab;\n\n\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const ManageSchedulesTab = () => {\n// // //   const [schedules, setSchedules] = useState([]);\n// // //   const [stations, setStations] = useState([]);\n// // //   const [newSchedule, setNewSchedule] = useState({\n// // //     transitLineName: '',\n// // //     travelTime: '',\n// // //     arrivalDateTime: '',\n// // //     departureDateTime: '',\n// // //     trainID: '',\n// // //     stops: []\n// // //   });\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchSchedules();\n// // //     fetchStations();\n// // //   }, []);\n\n// // //   // Fetch all train schedules\n// // //   const fetchSchedules = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// // //       setSchedules(response.data.trainSchedules);\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error fetching schedules:', err);\n// // //       setError('Failed to fetch schedules.');\n// // //     }\n// // //   };\n\n// // //   // Fetch all available stations for stops selection\n// // //   const fetchStations = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/stations');\n// // //       setStations(response.data.stations);\n// // //     } catch (err) {\n// // //       console.error('Error fetching stations:', err);\n// // //     }\n// // //   };\n\n// // //   // Handle input change for new schedule form\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setNewSchedule((prev) => ({\n// // //       ...prev,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   // Handle stops selection\n// // //   const handleStopSelection = (e) => {\n// // //     const stationID = parseInt(e.target.value);\n// // //     const isChecked = e.target.checked;\n\n// // //     setNewSchedule((prev) => {\n// // //       const updatedStops = isChecked\n// // //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// // //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// // //       return { ...prev, stops: updatedStops };\n// // //     });\n// // //   };\n\n// // //   // Handle arrival and departure date-time changes for each stop\n// // //   const handleStopDateTimeChange = (stationID, field, value) => {\n// // //     setNewSchedule((prev) => {\n// // //       const updatedStops = prev.stops.map((stop) => {\n// // //         if (stop.stationID === stationID) {\n// // //           return { ...stop, [field]: value };\n// // //         }\n// // //         return stop;\n// // //       });\n// // //       return { ...prev, stops: updatedStops };\n// // //     });\n// // //   };\n\n// // //   // Handle save button click for adding the new schedule\n// // //   const handleAddSchedule = async () => {\n// // //     try {\n// // //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// // //       setNewSchedule({\n// // //         transitLineName: '',\n// // //         travelTime: '',\n// // //         arrivalDateTime: '',\n// // //         departureDateTime: '',\n// // //         trainID: '',\n// // //         stops: []\n// // //       });\n// // //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error adding train schedule:', err);\n// // //       setError('Failed to add train schedule.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Manage Train Schedules</h2>\n// // //       {error && <p className=\"error\">{error}</p>}\n      \n// // //       {/* Add Train Schedule Form */}\n// // //       <div style={{ marginBottom: '20px' }}>\n// // //         <h3>Add Train Schedule</h3>\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"transitLineName\"\n// // //           placeholder=\"Transit Line Name\"\n// // //           value={newSchedule.transitLineName}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"travelTime\"\n// // //           placeholder=\"Travel Time (HH:MM)\"\n// // //           value={newSchedule.travelTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"arrivalDateTime\"\n// // //           placeholder=\"Arrival DateTime\"\n// // //           value={newSchedule.arrivalDateTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"datetime-local\"\n// // //           name=\"departureDateTime\"\n// // //           placeholder=\"Departure DateTime\"\n// // //           value={newSchedule.departureDateTime}\n// // //           onChange={handleInputChange}\n// // //         />\n// // //         <input\n// // //           type=\"text\"\n// // //           name=\"trainID\"\n// // //           placeholder=\"Train ID\"\n// // //           value={newSchedule.trainID}\n// // //           onChange={handleInputChange}\n// // //         />\n\n// // //         <h4>Select Stops</h4>\n// // //         {stations.map((station) => (\n// // //           <div key={station.StationID}>\n// // //             <label>\n// // //               <input\n// // //                 type=\"checkbox\"\n// // //                 value={station.StationID}\n// // //                 onChange={handleStopSelection}\n// // //               />\n// // //               {station.StationName}\n// // //             </label>\n// // //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// // //               <div>\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   placeholder=\"Arrival DateTime\"\n// // //                   onChange={(e) =>\n// // //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// // //                   }\n// // //                 />\n// // //                 <input\n// // //                   type=\"datetime-local\"\n// // //                   placeholder=\"Departure DateTime\"\n// // //                   onChange={(e) =>\n// // //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// // //                   }\n// // //                 />\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         ))}\n\n// // //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// // //       </div>\n\n// // //       {/* Train Schedules Table */}\n// // //       <table>\n// // //         <thead>\n// // //           <tr>\n// // //             <th>Schedule ID</th>\n// // //             <th>Transit Line Name</th>\n// // //             <th>Travel Time</th>\n// // //             <th>Arrival DateTime</th>\n// // //             <th>Departure DateTime</th>\n// // //             <th>Train ID</th>\n// // //             <th>Actions</th>\n// // //           </tr>\n// // //         </thead>\n// // //         <tbody>\n// // //           {schedules.map((schedule) => (\n// // //             <tr key={schedule.ScheduleID}>\n// // //               <td>{schedule.ScheduleID}</td>\n// // //               <td>{schedule.TransitLineName}</td>\n// // //               <td>{schedule.TravelTime}</td>\n// // //               <td>{schedule.ArrivalDateTime}</td>\n// // //               <td>{schedule.DepartureDateTime}</td>\n// // //               <td>{schedule.TrainID}</td>\n// // //               <td>\n// // //                 {/* You can implement edit and delete buttons here */}\n// // //               </td>\n// // //             </tr>\n// // //           ))}\n// // //         </tbody>\n// // //       </table>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default ManageSchedulesTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleEditInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n      \n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n          \n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Add Train Schedule</h3>\n// //         <input\n// //           type=\"text\"\n// //           name=\"transitLineName\"\n// //           placeholder=\"Transit Line Name\"\n// //           value={newSchedule.transitLineName}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"travelTime\"\n// //           placeholder=\"Travel Time (HH:MM)\"\n// //           value={newSchedule.travelTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"arrivalDateTime\"\n// //           placeholder=\"Arrival DateTime\"\n// //           value={newSchedule.arrivalDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"datetime-local\"\n// //           name=\"departureDateTime\"\n// //           placeholder=\"Departure DateTime\"\n// //           value={newSchedule.departureDateTime}\n// //           onChange={handleInputChange}\n// //         />\n// //         <input\n// //           type=\"text\"\n// //           name=\"trainID\"\n// //           placeholder=\"Train ID\"\n// //           value={newSchedule.trainID}\n// //           onChange={handleInputChange}\n// //         />\n\n// //         <h4>Select Stops</h4>\n// //         {stations.map((station) => (\n// //           <div key={station.StationID}>\n// //             <label>\n// //               <input\n// //                 type=\"checkbox\"\n// //                 value={station.StationID}\n// //                 onChange={handleStopSelection}\n// //               />\n// //               {station.StationName}\n// //             </label>\n// //             {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //               <div>\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Arrival DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                   }\n// //                 />\n// //                 <input\n// //                   type=\"datetime-local\"\n// //                   placeholder=\"Departure DateTime\"\n// //                   onChange={(e) =>\n// //                     handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                   }\n// //                 />\n// //               </div>\n// //             )}\n// //           </div>\n// //         ))}\n\n// //         <button onClick={handleAddSchedule}>Add Schedule</button>\n// //       </div>\n\n// //       {/* Search Train Schedules by Station */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter\"\n// //           value={searchStationName}\n// //           onChange={(e) => setSearchStationName(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n// //       </div>\n\n// //       {/* Display Train Schedules */}\n// //       <table>\n// //         <thead>\n// //           <tr>\n// //             <th>Schedule ID</th>\n// //             <th>Transit Line Name</th>\n// //             <th>Travel Time</th>\n// //             <th>Arrival Date</th>\n// //             <th>Arrival Time</th>\n// //             <th>Departure Date</th>\n// //             <th>Departure Time</th>\n// //             <th>Train ID</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {searchedSchedules.length > 0\n// //             ? searchedSchedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   <td>{schedule.ScheduleID}</td>\n// //                   <td>{schedule.TransitLineName}</td>\n// //                   <td>{schedule.TravelTime}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                   <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                   <td>{schedule.TrainID}</td>\n// //                   <td>\n// //                     <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                       Edit\n// //                     </button>\n// //                     {schedule.ReservationCount === 0 ? (\n// //                       <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                     ) : (\n// //                       <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                     )}\n// //                   </td>\n// //                 </tr>\n// //               ))\n// //             : schedules.map((schedule) => (\n// //                 <tr key={schedule.ScheduleID}>\n// //                   {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                     <>\n// //                       <td>{schedule.ScheduleID}</td>\n// //                       <td>\n// //                         <input\n// //                           type=\"text\"\n// //                           name=\"TransitLineName\"\n// //                           value={editingSchedule.TransitLineName}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>{editingSchedule.TravelTime}</td>\n// //                       <td>\n// //                         <input\n// //                           type=\"date\"\n// //                           name=\"ArrivalDate\"\n// //                           value={editingSchedule.ArrivalDate}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"time\"\n// //                           name=\"ArrivalTime\"\n// //                           value={editingSchedule.ArrivalTime}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"date\"\n// //                           name=\"DepartureDate\"\n// //                           value={editingSchedule.DepartureDate}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"time\"\n// //                           name=\"DepartureTime\"\n// //                           value={editingSchedule.DepartureTime}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <input\n// //                           type=\"text\"\n// //                           name=\"TrainID\"\n// //                           value={editingSchedule.TrainID}\n// //                           onChange={handleEditInputChange}\n// //                         />\n// //                       </td>\n// //                       <td>\n// //                         <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                         <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                       </td>\n// //                     </>\n// //                   ) : (\n// //                     <>\n// //                       <td>{schedule.ScheduleID}</td>\n// //                       <td>{schedule.TransitLineName}</td>\n// //                       <td>{schedule.TravelTime}</td>\n// //                       <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                       <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                       <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                       <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                       <td>{schedule.TrainID}</td>\n// //                       <td>\n// //                         <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                           Edit\n// //                         </button>\n// //                         {schedule.ReservationCount === 0 ? (\n// //                           <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                         ) : (\n// //                           <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                         )}\n// //                       </td>\n// //                     </>\n// //                   )}\n// //                 </tr>\n// //               ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // // export default ManageSchedulesTab;\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       setShowAddScheduleForm(false);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// //   // Handle edit button click\n// //   const handleEditClick = (schedule) => {\n// //     setEditingSchedule({\n// //       ...schedule,\n// //       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n// //       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n// //       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n// //       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n// //     });\n// //   };\n\n// //   // Handle input change for editable fields\n// //   const handleEditInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setEditingSchedule((prev) => {\n// //       const updatedSchedule = {\n// //         ...prev,\n// //         [name]: value,\n// //       };\n      \n// //       // Automatically calculate travel time if arrival or departure changes\n// //       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n// //         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n// //         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n// //         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n// //           const arrival = new Date(arrivalDateTime);\n// //           const departure = new Date(departureDateTime);\n          \n// //           // Calculate the travel time in hours and minutes\n// //           const diffMs = Math.abs(arrival - departure);\n// //           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n// //           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n// //           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n// //         }\n// //       }\n\n// //       return updatedSchedule;\n// //     });\n// //   };\n\n// //   // Handle save button click for updating the schedule\n// //   const handleSave = async (scheduleId) => {\n// //     try {\n// //       const updatedSchedule = {\n// //         ...editingSchedule,\n// //         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n// //         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n// //       };\n// //       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n// //       setEditingSchedule(null);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the updates\n// //     } catch (err) {\n// //       console.error('Error updating schedule:', err);\n// //       setError('Failed to update train schedule.');\n// //     }\n// //   };\n\n// //   // Handle cancel button click to cancel editing\n// //   const handleCancel = () => {\n// //     setEditingSchedule(null);\n// //   };\n\n// //   // Handle delete button click for removing a schedule\n// //   const handleDelete = async (scheduleId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n// //       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n// //     } catch (err) {\n// //       console.error('Error deleting schedule:', err);\n// //       setError('Failed to delete train schedule.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Manage Train Schedules</h2>\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {/* Button to toggle Add Train Schedule Form */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n// //           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n// //         </button>\n// //       </div>\n\n// //       {/* Add Train Schedule Form */}\n// //       {showAddScheduleForm && (\n// //         <div style={{ marginBottom: '20px' }}>\n// //           <h3>Add Train Schedule</h3>\n// //           <input\n// //             type=\"text\"\n// //             name=\"transitLineName\"\n// //             placeholder=\"Transit Line Name\"\n// //             value={newSchedule.transitLineName}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             name=\"travelTime\"\n// //             placeholder=\"Travel Time (HH:MM)\"\n// //             value={newSchedule.travelTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"datetime-local\"\n// //             name=\"arrivalDateTime\"\n// //             placeholder=\"Arrival DateTime\"\n// //             value={newSchedule.arrivalDateTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"datetime-local\"\n// //             name=\"departureDateTime\"\n// //             placeholder=\"Departure DateTime\"\n// //             value={newSchedule.departureDateTime}\n// //             onChange={handleInputChange}\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             name=\"trainID\"\n// //             placeholder=\"Train ID\"\n// //             value={newSchedule.trainID}\n// //             onChange={handleInputChange}\n// //           />\n\n// //           <h4>Select Stops</h4>\n// //           {stations.map((station) => (\n// //             <div key={station.StationID}>\n// //               <label>\n// //                 <input\n// //                   type=\"checkbox\"\n// //                   value={station.StationID}\n// //                   onChange={handleStopSelection}\n// //                 />\n// //                 {station.StationName}\n// //               </label>\n// //               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n// //                 <div>\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     placeholder=\"Arrival DateTime\"\n// //                     onChange={(e) =>\n// //                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n// //                     }\n// //                   />\n// //                   <input\n// //                     type=\"datetime-local\"\n// //                     placeholder=\"Departure DateTime\"\n// //                     onChange={(e) =>\n// //                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n// //                     }\n// //                   />\n// //                 </div>\n// //               )}\n// //             </div>\n// //           ))}\n\n// //           <button onClick={handleAddSchedule}>Add Schedule</button>\n// //         </div>\n// //       )}\n\n// //       {/* Display All Train Schedules */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Current Train Schedules</h3>\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Travel Time</th>\n// //               <th>Arrival Date</th>\n// //               <th>Arrival Time</th>\n// //               <th>Departure Date</th>\n// //               <th>Departure Time</th>\n// //               <th>Train ID</th>\n// //               <th>Actions</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {schedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n// //                   <>\n// //                     <td>{schedule.ScheduleID}</td>\n// //                     <td>\n// //                       <input\n// //                         type=\"text\"\n// //                         name=\"TransitLineName\"\n// //                         value={editingSchedule.TransitLineName}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>{editingSchedule.TravelTime}</td>\n// //                     <td>\n// //                       <input\n// //                         type=\"date\"\n// //                         name=\"ArrivalDate\"\n// //                         value={editingSchedule.ArrivalDate}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"time\"\n// //                         name=\"ArrivalTime\"\n// //                         value={editingSchedule.ArrivalTime}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"date\"\n// //                         name=\"DepartureDate\"\n// //                         value={editingSchedule.DepartureDate}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"time\"\n// //                         name=\"DepartureTime\"\n// //                         value={editingSchedule.DepartureTime}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <input\n// //                         type=\"text\"\n// //                         name=\"TrainID\"\n// //                         value={editingSchedule.TrainID}\n// //                         onChange={handleEditInputChange}\n// //                       />\n// //                     </td>\n// //                     <td>\n// //                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n// //                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n// //                     </td>\n// //                   </>\n// //                 ) : (\n// //                   <>\n// //                     <td>{schedule.ScheduleID}</td>\n// //                     <td>{schedule.TransitLineName}</td>\n// //                     <td>{schedule.TravelTime}</td>\n// //                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                     <td>{schedule.TrainID}</td>\n// //                     <td>\n// //                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n// //                         Edit\n// //                       </button>\n// //                       {schedule.ReservationCount === 0 ? (\n// //                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n// //                       ) : (\n// //                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n// //                       )}\n// //                     </td>\n// //                   </>\n// //                 )}\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n\n// //       {/* Search Train Schedules by Station */}\n// //       <div style={{ marginBottom: '20px' }}>\n// //         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter station name to filter\"\n// //           value={searchStationName}\n// //           onChange={(e) => setSearchStationName(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Travel Time</th>\n// //               <th>Arrival Date</th>\n// //               <th>Arrival Time</th>\n// //               <th>Departure Date</th>\n// //               <th>Departure Time</th>\n// //               <th>Train ID</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {searchedSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.TravelTime}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n// //                 <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n// //                 <td>{schedule.TrainID}</td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default ManageSchedulesTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n// //   const [schedules, setSchedules] = useState([]);\n// //   const [stations, setStations] = useState([]);\n// //   const [trains, setTrains] = useState([]);\n// //   const [newSchedule, setNewSchedule] = useState({\n// //     transitLineName: '',\n// //     travelTime: '',\n// //     arrivalDateTime: '',\n// //     departureDateTime: '',\n// //     trainID: '',\n// //     stops: []\n// //   });\n// //   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n// //   const [searchStationName, setSearchStationName] = useState('');\n// //   const [searchedSchedules, setSearchedSchedules] = useState([]);\n// //   const [editingSchedule, setEditingSchedule] = useState(null);\n// //   const [error, setError] = useState('');\n\n// //   useEffect(() => {\n// //     fetchSchedules();\n// //     fetchStations();\n// //     fetchTrains();\n// //   }, []);\n\n// //   // Fetch all train schedules\n// //   const fetchSchedules = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/train-schedules');\n// //       setSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching schedules:', err);\n// //       setError('Failed to fetch schedules.');\n// //     }\n// //   };\n\n// //   // Fetch all available stations for stops selection\n// //   const fetchStations = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/stations');\n// //       setStations(response.data.stations);\n// //     } catch (err) {\n// //       console.error('Error fetching stations:', err);\n// //     }\n// //   };\n\n// //   // Fetch all available trains for TrainID dropdown\n// //   const fetchTrains = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer-rep/trains');\n// //       setTrains(response.data.trains);\n// //     } catch (err) {\n// //       console.error('Error fetching trains:', err);\n// //     }\n// //   };\n\n// //   // Handle input change for new schedule form\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setNewSchedule((prev) => ({\n// //       ...prev,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //   // Handle stops selection\n// //   const handleStopSelection = (e) => {\n// //     const stationID = parseInt(e.target.value);\n// //     const isChecked = e.target.checked;\n\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = isChecked\n// //         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n// //         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle arrival and departure date-time changes for each stop\n// //   const handleStopDateTimeChange = (stationID, field, value) => {\n// //     setNewSchedule((prev) => {\n// //       const updatedStops = prev.stops.map((stop) => {\n// //         if (stop.stationID === stationID) {\n// //           return { ...stop, [field]: value };\n// //         }\n// //         return stop;\n// //       });\n// //       return { ...prev, stops: updatedStops };\n// //     });\n// //   };\n\n// //   // Handle save button click for adding the new schedule\n// //   const handleAddSchedule = async () => {\n// //     try {\n// //       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n// //       setNewSchedule({\n// //         transitLineName: '',\n// //         travelTime: '',\n// //         arrivalDateTime: '',\n// //         departureDateTime: '',\n// //         trainID: '',\n// //         stops: []\n// //       });\n// //       setShowAddScheduleForm(false);\n// //       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error adding train schedule:', err);\n// //       setError('Failed to add train schedule.');\n// //     }\n// //   };\n\n// //   // Handle search for schedules by station name\n// //   const handleSearchSchedules = async () => {\n// //     if (!searchStationName) {\n// //       setError('Please enter a station name to search.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n// //       setSearchedSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error searching schedules:', err);\n// //       setError('Failed to search schedules.');\n// //     }\n// //   };\n\n// const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [transitLines, setTransitLines] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//     fetchTransitLines(); // Fetch available transit lines for dropdown\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Fetch all available transit lines for selection\n//   const fetchTransitLines = async () => {\n//     try {\n//       const response = await axiosInstance.get('/transit-lines');\n//       setTransitLines(response.data.transitLines);\n//     } catch (err) {\n//       console.error('Error fetching transit lines:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n      \n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n          \n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     // <div>\n//     //   <h2>Manage Train Schedules</h2>\n//     //   {error && <p className=\"error\">{error}</p>}\n\n//     //   {/* Button to toggle Add Train Schedule Form */}\n//     //   <div style={{ marginBottom: '20px' }}>\n//     //     <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//     //       {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//     //     </button>\n//     //   </div>\n\n//     //   {/* Add Train Schedule Form */}\n//     //   {showAddScheduleForm && (\n//     //     <div style={{ marginBottom: '20px' }}>\n//     //       <h3>Add Train Schedule</h3>\n//     //       <input\n//     //         type=\"text\"\n//     //         name=\"transitLineName\"\n//     //         placeholder=\"Transit Line Name\"\n//     //         value={newSchedule.transitLineName}\n//     //         onChange={handleInputChange}\n//     //       />\n//     //       <input\n//     //         type=\"text\"\n//     //         name=\"travelTime\"\n//     //         placeholder=\"Travel Time (HH:MM)\"\n//     //         value={newSchedule.travelTime}\n//     //         onChange={handleInputChange}\n//     //       />\n//     //       <input\n//     //         type=\"datetime-local\"\n//     //         name=\"arrivalDateTime\"\n//     //         placeholder=\"Arrival DateTime\"\n//     //         value={newSchedule.arrivalDateTime}\n//     //         onChange={handleInputChange}\n//     //       />\n//     //       <input\n//     //         type=\"datetime-local\"\n//     //         name=\"departureDateTime\"\n//     //         placeholder=\"Departure DateTime\"\n//     //         value={newSchedule.departureDateTime}\n//     //         onChange={handleInputChange}\n//     //       />\n//     //       <select\n//     //         name=\"trainID\"\n//     //         value={newSchedule.trainID}\n//     //         onChange={handleInputChange}\n//     //       >\n//     //         <option value=\"\">Select Train ID</option>\n//     //         {trains.map((train) => (\n//     //           <option key={train.TrainID} value={train.TrainID}>\n//     //             {train.TrainID}\n//     //           </option>\n//     //         ))}\n//     //       </select>\n\n//     //       <h4>Select Stops</h4>\n//     //       {stations.map((station) => (\n//     //         <div key={station.StationID}>\n//     //           <label>\n//     //             <input\n//     //               type=\"checkbox\"\n//     //               value={station.StationID}\n//     //               onChange={handleStopSelection}\n//     //             />\n//     //             {station.StationName}\n//     //           </label>\n//     //           {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//     //             <div>\n//     //               <input\n//     //                 type=\"datetime-local\"\n//     //                 placeholder=\"Arrival DateTime\"\n//     //                 onChange={(e) =>\n//     //                   handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//     //                 }\n//     //               />\n//     //               <input\n//     //                 type=\"datetime-local\"\n//     //                 placeholder=\"Departure DateTime\"\n//     //                 onChange={(e) =>\n//     //                   handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//     //                 }\n//     //               />\n//     //             </div>\n//     //           )}\n//     //         </div>\n//     //       ))}\n\n//     //       <button onClick={handleAddSchedule}>Add Schedule</button>\n//     //     </div>\n//     //   )}\n// <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Button to toggle Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//         </button>\n//       </div>\n\n//       {/* Add Train Schedule Form */}\n//       {showAddScheduleForm && (\n//         <div style={{ marginBottom: '20px' }}>\n//           <h3>Add Train Schedule</h3>\n//           <select\n//             name=\"transitLineName\"\n//             value={newSchedule.transitLineName}\n//             onChange={handleInputChange}\n//           >\n//             <option value=\"\">Select Transit Line</option>\n//             {transitLines.map((line) => (\n//               <option key={line.TransitLineName} value={line.TransitLineName}>\n//                 {line.TransitLineName}\n//               </option>\n//             ))}\n//           </select>\n//           <input\n//             type=\"text\"\n//             name=\"travelTime\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"arrivalDateTime\"\n//             placeholder=\"Arrival DateTime\"\n//             value={newSchedule.arrivalDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"departureDateTime\"\n//             placeholder=\"Departure DateTime\"\n//             value={newSchedule.departureDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <select\n//             name=\"trainID\"\n//             value={newSchedule.trainID}\n//             onChange={handleInputChange}\n//           >\n//             <option value=\"\">Select Train ID</option>\n//             {stations.map((train) => (\n//               <option key={train.TrainID} value={train.TrainID}>\n//                 {train.TrainID}\n//               </option>\n//             ))}\n//           </select>\n\n//           <h4>Select Stops</h4>\n//           {stations.map((station) => (\n//             <div key={station.StationID}>\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   value={station.StationID}\n//                   onChange={handleStopSelection}\n//                 />\n//                 {station.StationName}\n//               </label>\n//               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//                 <div>\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Arrival DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                     }\n//                   />\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Departure DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                     }\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       {/* Display All Train Schedules */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Current Train Schedules</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {schedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TransitLineName\"\n//                         value={editingSchedule.TransitLineName}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>{editingSchedule.TravelTime}</td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"ArrivalDate\"\n//                         value={editingSchedule.ArrivalDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"ArrivalTime\"\n//                         value={editingSchedule.ArrivalTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"DepartureDate\"\n//                         value={editingSchedule.DepartureDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"DepartureTime\"\n//                         value={editingSchedule.DepartureTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <select\n//                         name=\"TrainID\"\n//                         value={editingSchedule.TrainID}\n//                         onChange={handleEditInputChange}\n//                       >\n//                         <option value=\"\">Select Train ID</option>\n//                         {trains.map((train) => (\n//                           <option key={train.TrainID} value={train.TrainID}>\n//                             {train.TrainID}\n//                           </option>\n//                         ))}\n//                       </select>\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                     <td>\n//                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                         Edit\n//                       </button>\n//                       {schedule.ReservationCount === 0 ? (\n//                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                       ) : (\n//                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                       )}\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//   <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//   <select\n//     value={searchStationName}\n//     onChange={(e) => setSearchStationName(e.target.value)}\n//   >\n//     <option value=\"\">Select Station</option>\n//     {stations.map((station) => (\n//       <option key={station.StationID} value={station.StationName}>\n//         {station.StationName}\n//       </option>\n//     ))}\n//   </select>\n//   <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//   {/* Render search results */}\n//   <table>\n//     <thead>\n//       <tr>\n//         <th>Schedule ID</th>\n//         <th>Transit Line Name</th>\n//         <th>Travel Time</th>\n//         <th>Arrival Date</th>\n//         <th>Arrival Time</th>\n//         <th>Departure Date</th>\n//         <th>Departure Time</th>\n//         <th>Train ID</th>\n//       </tr>\n//     </thead>\n//     <tbody>\n//       {searchedSchedules.map((schedule) => (\n//         <tr key={schedule.ScheduleID}>\n//           <td>{schedule.ScheduleID}</td>\n//           <td>{schedule.TransitLineName}</td>\n//           <td>{schedule.TravelTime}</td>\n//           <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//           <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//           <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//           <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//           <td>{schedule.TrainID}</td>\n//         </tr>\n//       ))}\n//     </tbody>\n//   </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const ManageSchedulesTab = () => {\n//   const [schedules, setSchedules] = useState([]);\n//   const [stations, setStations] = useState([]);\n//   const [trains, setTrains] = useState([]);\n//   const [transitLines, setTransitLines] = useState([]);\n//   const [newSchedule, setNewSchedule] = useState({\n//     transitLineName: '',\n//     travelTime: '',\n//     arrivalDateTime: '',\n//     departureDateTime: '',\n//     trainID: '',\n//     stops: []\n//   });\n//   const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n//   const [searchStationName, setSearchStationName] = useState('');\n//   const [searchedSchedules, setSearchedSchedules] = useState([]);\n//   const [editingSchedule, setEditingSchedule] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     fetchSchedules();\n//     fetchStations();\n//     fetchTrains(); // Fetch available trains for dropdown\n//     fetchTransitLines(); // Fetch available transit lines for dropdown\n//   }, []);\n\n//   // Fetch all train schedules\n//   const fetchSchedules = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/train-schedules');\n//       setSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching schedules:', err);\n//       setError('Failed to fetch schedules.');\n//     }\n//   };\n\n//   // Fetch all available stations for stops selection\n//   const fetchStations = async () => {\n//     try {\n//       const response = await axiosInstance.get('/stations');\n//       setStations(response.data.stations);\n//     } catch (err) {\n//       console.error('Error fetching stations:', err);\n//     }\n//   };\n\n//   // Fetch all available trains for TrainID dropdown\n//   const fetchTrains = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer-rep/trains');\n//       setTrains(response.data.trains);\n//     } catch (err) {\n//       console.error('Error fetching trains:', err);\n//     }\n//   };\n\n//   // Fetch all available transit lines for selection\n//   const fetchTransitLines = async () => {\n//     try {\n//       const response = await axiosInstance.get('/transit-lines');\n//       setTransitLines(response.data.transitLines);\n//     } catch (err) {\n//       console.error('Error fetching transit lines:', err);\n//     }\n//   };\n\n//   // Handle input change for new schedule form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewSchedule((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handle stops selection\n//   const handleStopSelection = (e) => {\n//     const stationID = parseInt(e.target.value);\n//     const isChecked = e.target.checked;\n\n//     setNewSchedule((prev) => {\n//       const updatedStops = isChecked\n//         ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n//         : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle arrival and departure date-time changes for each stop\n//   const handleStopDateTimeChange = (stationID, field, value) => {\n//     setNewSchedule((prev) => {\n//       const updatedStops = prev.stops.map((stop) => {\n//         if (stop.stationID === stationID) {\n//           return { ...stop, [field]: value };\n//         }\n//         return stop;\n//       });\n//       return { ...prev, stops: updatedStops };\n//     });\n//   };\n\n//   // Handle save button click for adding the new schedule\n//   const handleAddSchedule = async () => {\n//     try {\n//       await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n//       setNewSchedule({\n//         transitLineName: '',\n//         travelTime: '',\n//         arrivalDateTime: '',\n//         departureDateTime: '',\n//         trainID: '',\n//         stops: []\n//       });\n//       setShowAddScheduleForm(false);\n//       fetchSchedules(); // Re-fetch schedules to reflect the new addition\n//       setError('');\n//     } catch (err) {\n//       console.error('Error adding train schedule:', err);\n//       setError('Failed to add train schedule.');\n//     }\n//   };\n\n//   // Handle search for schedules by station name\n//   const handleSearchSchedules = async () => {\n//     if (!searchStationName) {\n//       setError('Please enter a station name to search.');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n//       setSearchedSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error searching schedules:', err);\n//       setError('Failed to search schedules.');\n//     }\n//   };\n\n//   // Handle edit button click\n//   const handleEditClick = (schedule) => {\n//     setEditingSchedule({\n//       ...schedule,\n//       ArrivalDate: schedule.ArrivalDateTime.split('T')[0],\n//       ArrivalTime: schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5),\n//       DepartureDate: schedule.DepartureDateTime.split('T')[0],\n//       DepartureTime: schedule.DepartureDateTime.split('T')[1]?.substring(0, 5),\n//     });\n//   };\n\n//   // Handle input change for editable fields\n//   const handleEditInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditingSchedule((prev) => {\n//       const updatedSchedule = {\n//         ...prev,\n//         [name]: value,\n//       };\n      \n//       // Automatically calculate travel time if arrival or departure changes\n//       if (name === 'ArrivalDate' || name === 'ArrivalTime' || name === 'DepartureDate' || name === 'DepartureTime') {\n//         const arrivalDateTime = `${updatedSchedule.ArrivalDate}T${updatedSchedule.ArrivalTime}:00`;\n//         const departureDateTime = `${updatedSchedule.DepartureDate}T${updatedSchedule.DepartureTime}:00`;\n\n//         if (updatedSchedule.ArrivalDate && updatedSchedule.ArrivalTime && updatedSchedule.DepartureDate && updatedSchedule.DepartureTime) {\n//           const arrival = new Date(arrivalDateTime);\n//           const departure = new Date(departureDateTime);\n          \n//           // Calculate the travel time in hours and minutes\n//           const diffMs = Math.abs(arrival - departure);\n//           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n//           const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\n//           updatedSchedule.TravelTime = `${diffHours}:${diffMinutes < 10 ? '0' : ''}${diffMinutes}`;\n//         }\n//       }\n\n//       return updatedSchedule;\n//     });\n//   };\n\n//   // Handle save button click for updating the schedule\n//   const handleSave = async (scheduleId) => {\n//     try {\n//       const updatedSchedule = {\n//         ...editingSchedule,\n//         ArrivalDateTime: `${editingSchedule.ArrivalDate}T${editingSchedule.ArrivalTime}:00`,\n//         DepartureDateTime: `${editingSchedule.DepartureDate}T${editingSchedule.DepartureTime}:00`,\n//       };\n//       await axiosInstance.put(`/customer-rep/train-schedules/${scheduleId}`, updatedSchedule);\n//       setEditingSchedule(null);\n//       fetchSchedules(); // Re-fetch schedules to reflect the updates\n//     } catch (err) {\n//       console.error('Error updating schedule:', err);\n//       setError('Failed to update train schedule.');\n//     }\n//   };\n\n//   // Handle cancel button click to cancel editing\n//   const handleCancel = () => {\n//     setEditingSchedule(null);\n//   };\n\n//   // Handle delete button click for removing a schedule\n//   const handleDelete = async (scheduleId) => {\n//     try {\n//       await axiosInstance.delete(`/customer-rep/train-schedules/${scheduleId}`);\n//       setSchedules(schedules.filter((schedule) => schedule.ScheduleID !== scheduleId));\n//     } catch (err) {\n//       console.error('Error deleting schedule:', err);\n//       setError('Failed to delete train schedule.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Manage Train Schedules</h2>\n//       {error && <p className=\"error\">{error}</p>}\n\n//       {/* Button to toggle Add Train Schedule Form */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n//           {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n//         </button>\n//       </div>\n\n//       {/* Add Train Schedule Form */}\n//       {showAddScheduleForm && (\n//         <div style={{ marginBottom: '20px' }}>\n//           <h3>Add Train Schedule</h3>\n//           <select\n//             name=\"transitLineName\"\n//             value={newSchedule.transitLineName}\n//             onChange={handleInputChange}\n//           >\n//             <option value=\"\">Select Transit Line</option>\n//             {transitLines.map((line) => (\n//               <option key={line.TransitLineName} value={line.TransitLineName}>\n//                 {line.TransitLineName}\n//               </option>\n//             ))}\n//           </select>\n//           <input\n//             type=\"text\"\n//             name=\"travelTime\"\n//             placeholder=\"Travel Time (HH:MM)\"\n//             value={newSchedule.travelTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"arrivalDateTime\"\n//             placeholder=\"Arrival DateTime\"\n//             value={newSchedule.arrivalDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <input\n//             type=\"datetime-local\"\n//             name=\"departureDateTime\"\n//             placeholder=\"Departure DateTime\"\n//             value={newSchedule.departureDateTime}\n//             onChange={handleInputChange}\n//           />\n//           <select\n//             name=\"trainID\"\n//             value={newSchedule.trainID}\n//             onChange={handleInputChange}\n//           >\n//             <option value=\"\">Select Train ID</option>\n//             {trains.map((train) => (\n//               <option key={train.TrainID} value={train.TrainID}>\n//                 {train.TrainID}\n//               </option>\n//             ))}\n//           </select>\n\n//           <h4>Select Stops</h4>\n//           {stations.map((station) => (\n//             <div key={station.StationID}>\n//               <label>\n//                 <input\n//                   type=\"checkbox\"\n//                   value={station.StationID}\n//                   onChange={handleStopSelection}\n//                 />\n//                 {station.StationName}\n//               </label>\n//               {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n//                 <div>\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Arrival DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n//                     }\n//                   />\n//                   <input\n//                     type=\"datetime-local\"\n//                     placeholder=\"Departure DateTime\"\n//                     onChange={(e) =>\n//                       handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n//                     }\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           <button onClick={handleAddSchedule}>Add Schedule</button>\n//         </div>\n//       )}\n\n//       {/* Display All Train Schedules */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Current Train Schedules</h3>\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {schedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 {editingSchedule && editingSchedule.ScheduleID === schedule.ScheduleID ? (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>\n//                       <input\n//                         type=\"text\"\n//                         name=\"TransitLineName\"\n//                         value={editingSchedule.TransitLineName}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>{editingSchedule.TravelTime}</td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"ArrivalDate\"\n//                         value={editingSchedule.ArrivalDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"ArrivalTime\"\n//                         value={editingSchedule.ArrivalTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"date\"\n//                         name=\"DepartureDate\"\n//                         value={editingSchedule.DepartureDate}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <input\n//                         type=\"time\"\n//                         name=\"DepartureTime\"\n//                         value={editingSchedule.DepartureTime}\n//                         onChange={handleEditInputChange}\n//                       />\n//                     </td>\n//                     <td>\n//                       <select\n//                         name=\"TrainID\"\n//                         value={editingSchedule.TrainID}\n//                         onChange={handleEditInputChange}\n//                       >\n//                         <option value=\"\">Select Train ID</option>\n//                         {trains.map((train) => (\n//                           <option key={train.TrainID} value={train.TrainID}>\n//                             {train.TrainID}\n//                           </option>\n//                         ))}\n//                       </select>\n//                     </td>\n//                     <td>\n//                       <button onClick={() => handleSave(schedule.ScheduleID)}>Save</button>\n//                       <button onClick={handleCancel} style={{ marginLeft: '5px' }}>Cancel</button>\n//                     </td>\n//                   </>\n//                 ) : (\n//                   <>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                     <td>\n//                       <button onClick={() => handleEditClick(schedule)} style={{ marginRight: '5px' }}>\n//                         Edit\n//                       </button>\n//                       {schedule.ReservationCount === 0 ? (\n//                         <button onClick={() => handleDelete(schedule.ScheduleID)}>Delete</button>\n//                       ) : (\n//                         <button disabled title=\"Cannot delete. Reservations exist.\">Delete</button>\n//                       )}\n//                     </td>\n//                   </>\n//                 )}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       {/* Search Train Schedules by Station */}\n//       <div style={{ marginBottom: '20px' }}>\n//         <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n//         <select\n//           value={searchStationName}\n//           onChange={(e) => setSearchStationName(e.target.value)}\n//         >\n//           <option value=\"\">Select Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n//         <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n//         {/* Render search results */}\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Travel Time</th>\n//               <th>Arrival Date</th>\n//               <th>Arrival Time</th>\n//               <th>Departure Date</th>\n//               <th>Departure Time</th>\n//               <th>Train ID</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {searchedSchedules.length === 0 ? (\n//                 <tr>\n//                 <td colSpan=\"8\">No train schedules found for the selected station.</td>\n//                 </tr>\n//             ) : (\n//                 searchedSchedules.map((schedule) => (\n//                 <tr key={schedule.ScheduleID}>\n//                     <td>{schedule.ScheduleID}</td>\n//                     <td>{schedule.TransitLineName}</td>\n//                     <td>{schedule.TravelTime}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n//                     <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n//                     <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n//                     <td>{schedule.TrainID}</td>\n//                 </tr>\n//                 ))\n//             )}\n//             </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageSchedulesTab;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst ManageSchedulesTab = () => {\n  const [schedules, setSchedules] = useState([]);\n  const [stations, setStations] = useState([]);\n  const [trains, setTrains] = useState([]);\n  const [transitLines, setTransitLines] = useState([]);\n  const [newSchedule, setNewSchedule] = useState({\n    transitLineName: '',\n    travelTime: '',\n    arrivalDateTime: '',\n    departureDateTime: '',\n    trainID: '',\n    stops: []\n  });\n  const [showAddScheduleForm, setShowAddScheduleForm] = useState(false);\n  const [searchStationName, setSearchStationName] = useState('');\n  const [searchedSchedules, setSearchedSchedules] = useState([]);\n  const [searchTriggered, setSearchTriggered] = useState(false); // New flag to track if a search has been conducted\n  const [editingSchedule, setEditingSchedule] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchSchedules();\n    fetchStations();\n    fetchTrains(); // Fetch available trains for dropdown\n    fetchTransitLines(); // Fetch available transit lines for dropdown\n  }, []);\n\n  // Fetch all train schedules\n  const fetchSchedules = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/train-schedules');\n      setSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching schedules:', err);\n      setError('Failed to fetch schedules.');\n    }\n  };\n\n  // Fetch all available stations for stops selection\n  const fetchStations = async () => {\n    try {\n      const response = await axiosInstance.get('/stations');\n      setStations(response.data.stations);\n    } catch (err) {\n      console.error('Error fetching stations:', err);\n    }\n  };\n\n  // Fetch all available trains for TrainID dropdown\n  const fetchTrains = async () => {\n    try {\n      const response = await axiosInstance.get('/customer-rep/trains');\n      setTrains(response.data.trains);\n    } catch (err) {\n      console.error('Error fetching trains:', err);\n    }\n  };\n\n  // Fetch all available transit lines for selection\n  const fetchTransitLines = async () => {\n    try {\n      const response = await axiosInstance.get('/transit-lines');\n      setTransitLines(response.data.transitLines);\n    } catch (err) {\n      console.error('Error fetching transit lines:', err);\n    }\n  };\n\n  // Handle input change for new schedule form\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewSchedule((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle stops selection\n  const handleStopSelection = (e) => {\n    const stationID = parseInt(e.target.value);\n    const isChecked = e.target.checked;\n\n    setNewSchedule((prev) => {\n      const updatedStops = isChecked\n        ? [...prev.stops, { stationID, arrivalDateTime: '', departureDateTime: '' }]\n        : prev.stops.filter((stop) => stop.stationID !== stationID);\n\n      return { ...prev, stops: updatedStops };\n    });\n  };\n\n  // Handle arrival and departure date-time changes for each stop\n  const handleStopDateTimeChange = (stationID, field, value) => {\n    setNewSchedule((prev) => {\n      const updatedStops = prev.stops.map((stop) => {\n        if (stop.stationID === stationID) {\n          return { ...stop, [field]: value };\n        }\n        return stop;\n      });\n      return { ...prev, stops: updatedStops };\n    });\n  };\n\n  // Handle save button click for adding the new schedule\n  const handleAddSchedule = async () => {\n    try {\n      await axiosInstance.post('/customer-rep/train-schedules', newSchedule);\n      setNewSchedule({\n        transitLineName: '',\n        travelTime: '',\n        arrivalDateTime: '',\n        departureDateTime: '',\n        trainID: '',\n        stops: []\n      });\n      setShowAddScheduleForm(false);\n      fetchSchedules(); // Re-fetch schedules to reflect the new addition\n      setError('');\n    } catch (err) {\n      console.error('Error adding train schedule:', err);\n      setError('Failed to add train schedule.');\n    }\n  };\n\n  // Handle search for schedules by station name\n  const handleSearchSchedules = async () => {\n    if (!searchStationName) {\n      setError('Please select a station to search.');\n      setSearchTriggered(false);\n      return;\n    }\n    setSearchTriggered(true);\n    try {\n      const response = await axiosInstance.get(`/customer-rep/train-schedules/station?stationName=${searchStationName}`);\n      setSearchedSchedules(response.data.trainSchedules);\n      setError('');\n    } catch (err) {\n      console.error('Error searching schedules:', err);\n      setError('Failed to search schedules.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Manage Train Schedules</h2>\n      {error && <p className=\"error\">{error}</p>}\n\n      {/* Button to toggle Add Train Schedule Form */}\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={() => setShowAddScheduleForm(!showAddScheduleForm)}>\n          {showAddScheduleForm ? 'Hide Add Train Schedule' : 'Add Train Schedule'}\n        </button>\n      </div>\n\n      {/* Add Train Schedule Form */}\n      {showAddScheduleForm && (\n        <div style={{ marginBottom: '20px' }}>\n          <h3>Add Train Schedule</h3>\n          <select\n            name=\"transitLineName\"\n            value={newSchedule.transitLineName}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">Select Transit Line</option>\n            {transitLines.map((line) => (\n              <option key={line.TransitLineName} value={line.TransitLineName}>\n                {line.TransitLineName}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"text\"\n            name=\"travelTime\"\n            placeholder=\"Travel Time (HH:MM)\"\n            value={newSchedule.travelTime}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"datetime-local\"\n            name=\"arrivalDateTime\"\n            placeholder=\"Arrival DateTime\"\n            value={newSchedule.arrivalDateTime}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"datetime-local\"\n            name=\"departureDateTime\"\n            placeholder=\"Departure DateTime\"\n            value={newSchedule.departureDateTime}\n            onChange={handleInputChange}\n          />\n          <select\n            name=\"trainID\"\n            value={newSchedule.trainID}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">Select Train ID</option>\n            {trains.map((train) => (\n              <option key={train.TrainID} value={train.TrainID}>\n                {train.TrainID}\n              </option>\n            ))}\n          </select>\n\n          <h4>Select Stops</h4>\n          {stations.map((station) => (\n            <div key={station.StationID}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  value={station.StationID}\n                  onChange={handleStopSelection}\n                />\n                {station.StationName}\n              </label>\n              {newSchedule.stops.some((stop) => stop.stationID === station.StationID) && (\n                <div>\n                  <input\n                    type=\"datetime-local\"\n                    placeholder=\"Arrival DateTime\"\n                    onChange={(e) =>\n                      handleStopDateTimeChange(station.StationID, 'arrivalDateTime', e.target.value)\n                    }\n                  />\n                  <input\n                    type=\"datetime-local\"\n                    placeholder=\"Departure DateTime\"\n                    onChange={(e) =>\n                      handleStopDateTimeChange(station.StationID, 'departureDateTime', e.target.value)\n                    }\n                  />\n                </div>\n              )}\n            </div>\n          ))}\n\n          <button onClick={handleAddSchedule}>Add Schedule</button>\n        </div>\n      )}\n\n      {/* Display All Train Schedules */}\n      <div style={{ marginBottom: '20px' }}>\n        <h3>Current Train Schedules</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>Schedule ID</th>\n              <th>Transit Line Name</th>\n              <th>Travel Time</th>\n              <th>Arrival Date</th>\n              <th>Arrival Time</th>\n              <th>Departure Date</th>\n              <th>Departure Time</th>\n              <th>Train ID</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {schedules.length > 0 ? (\n              schedules.map((schedule) => (\n                <tr key={schedule.ScheduleID}>\n                  {/* Your existing edit/save logic here */}\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan=\"9\">No train schedules available.</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Search Train Schedules by Station */}\n      <div style={{ marginBottom: '20px' }}>\n        <h3>Search Train Schedules by Station (Origin or Destination)</h3>\n        <select\n          value={searchStationName}\n          onChange={(e) => setSearchStationName(e.target.value)}\n        >\n          <option value=\"\">Select Station</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n        <button onClick={handleSearchSchedules}>Search Schedules by Station</button>\n        \n        {/* Render search results */}\n        {searchTriggered && (\n          <table style={{ marginTop: '20px' }}>\n            <thead>\n              <tr>\n                <th>Schedule ID</th>\n                <th>Transit Line Name</th>\n                <th>Travel Time</th>\n                <th>Arrival Date</th>\n                <th>Arrival Time</th>\n                <th>Departure Date</th>\n                <th>Departure Time</th>\n                <th>Train ID</th>\n              </tr>\n            </thead>\n            <tbody>\n              {searchedSchedules.length > 0 ? (\n                searchedSchedules.map((schedule) => (\n                  <tr key={schedule.ScheduleID}>\n                    <td>{schedule.ScheduleID}</td>\n                    <td>{schedule.TransitLineName}</td>\n                    <td>{schedule.TravelTime}</td>\n                    <td>{schedule.ArrivalDateTime.split('T')[0]}</td>\n                    <td>{schedule.ArrivalDateTime.split('T')[1]?.substring(0, 5)}</td>\n                    <td>{schedule.DepartureDateTime.split('T')[0]}</td>\n                    <td>{schedule.DepartureDateTime.split('T')[1]?.substring(0, 5)}</td>\n                    <td>{schedule.TrainID}</td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td colSpan=\"8\" style={{ color: 'red' }}>\n                    No train schedules found for the selected station.\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ManageSchedulesTab;\n"],"mappingslD,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC;IAC7CiB,eAAe,EAAE,EAAE;IACnBC,UAAU,EAAE,EAAE;IACdC,eAAe,EAAE,EAAE;IACnBC,iBAAiB,EAAE,EAAE;IACrBC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACyB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAAC2B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAAC6B,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/D,MAAM,CAAC+B,eAAe,EAAEC,kBAAkB,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACiC,KAAK,EAAEC,QAAQ,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdkC,cAAc,CAAC,CAAC;IAChBC,aAAa,CAAC,CAAC;IACfC,WAAW,CAAC,CAAC,CAAC,CAAC;IACfC,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMH,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMrC,aAAa,CAACsC,GAAG,CAAC,+BAA+B,CAAC;MACzEhC,YAAY,CAAC+B,QAAQ,CAACE,IAAI,CAACC,cAAc,CAAC;MAC1CR,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZC,OAAO,CAACX,KAAK,CAAC,2BAA2B,EAAEU,GAAG,CAAC;MAC/CT,QAAQ,CAAC,4BAA4B,CAAC;IACxC;EACF,CAAC;;EAED;EACA,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMrC,aAAa,CAACsC,GAAG,CAAC,WAAW,CAAC;MACrD9B,WAAW,CAAC6B,QAAQ,CAACE,IAAI,CAAChC,QAAQ,CAAC;IACrC,CAAC,CAAC,OAAOkC,GAAG,EAAE;MACZC,OAAO,CAACX,KAAK,CAAC,0BAA0B,EAAEU,GAAG,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMN,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMrC,aAAa,CAACsC,GAAG,CAAC,sBAAsB,CAAC;MAChE5B,SAAS,CAAC2B,QAAQ,CAACE,IAAI,CAAC9B,MAAM,CAAC;IACjC,CAAC,CAAC,OAAOgC,GAAG,EAAE;MACZC,OAAO,CAACX,KAAK,CAAC,wBAAwB,EAAEU,GAAG,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAML,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMrC,aAAa,CAACsC,GAAG,CAAC,gBAAgB,CAAC;MAC1D1B,eAAe,CAACyB,QAAQ,CAACE,IAAI,CAAC5B,YAAY,CAAC;IAC7C,CAAC,CAAC,OAAO8B,GAAG,EAAE;MACZC,OAAO,CAACX,KAAK,CAAC,+BAA+B,EAAEU,GAAG,CAAC;IACrD;EACF,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCjC,cAAc,CAAEkC,IAAI,KAAM;MACxB,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMG,mBAAmB,GAAIL,CAAC,IAAK;IACjC,MAAMM,SAAS,GAAGC,QAAQ,CAACP,CAAC,CAACG,MAAM,CAACD,KAAK,CAAC;IAC1C,MAAMM,SAAS,GAAGR,CAAC,CAACG,MAAM,CAACM,OAAO;IAElCvC,cAAc,CAAEkC,IAAI,IAAK;MACvB,MAAMM,YAAY,GAAGF,SAAS,GAC1B,CAAC,GAAGJ,IAAI,CAAC5B,KAAK,EAAE;QAAE8B,SAAS;QAAEjC,eAAe,EAAE,EAAE;QAAEC,iBAAiB,EAAE;MAAG,CAAC,CAAC,GAC1E8B,IAAI,CAAC5B,KAAK,CAACmC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACN,SAAS,KAAKA,SAAS,CAAC;MAE7D,OAAO;QAAE,GAAGF,IAAI;QAAE5B,KAAK,EAAEkC;MAAa,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMG,wBAAwB,GAAGA,CAACP,SAAS,EAAEQ,KAAK,EAAEZ,KAAK,KAAK;IAC5DhC,cAAc,CAAEkC,IAAI,IAAK;MACvB,MAAMM,YAAY,GAAGN,IAAI,CAAC5B,KAAK,CAACuC,GAAG,CAAEH,IAAI,IAAK;QAC5C,IAAIA,IAAI,CAACN,SAAS,KAAKA,SAAS,EAAE;UAChC,OAAO;YAAE,GAAGM,IAAI;YAAE,CAACE,KAAK,GAAGZ;UAAM,CAAC;QACpC;QACA,OAAOU,IAAI;MACb,CAAC,CAAC;MACF,OAAO;QAAE,GAAGR,IAAI;QAAE5B,KAAK,EAAEkC;MAAa,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMM,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAM5D,aAAa,CAAC6D,IAAI,CAAC,+BAA+B,EAAEhD,WAAW,CAAC;MACtEC,cAAc,CAAC;QACbC,eAAe,EAAE,EAAE;QACnBC,UAAU,EAAE,EAAE;QACdC,eAAe,EAAE,EAAE;QACnBC,iBAAiB,EAAE,EAAE;QACrBC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE;MACT,CAAC,CAAC;MACFE,sBAAsB,CAAC,KAAK,CAAC;MAC7BW,cAAc,CAAC,CAAC,CAAC,CAAC;MAClBD,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZC,OAAO,CAACX,KAAK,CAAC,8BAA8B,EAAEU,GAAG,CAAC;MAClDT,QAAQ,CAAC,+BAA+B,CAAC;IAC3C;EACF,CAAC;;EAED;EACA,MAAM8B,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,CAACvC,iBAAiB,EAAE;MACtBS,QAAQ,CAAC,oCAAoC,CAAC;MAC9CJ,kBAAkB,CAAC,KAAK,CAAC;MACzB;IACF;IACAA,kBAAkB,CAAC,IAAI,CAAC;IACxB,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMrC,aAAa,CAACsC,GAAG,CAAC,qDAAqDf,iBAAiB,EAAE,CAAC;MAClHG,oBAAoB,CAACW,QAAQ,CAACE,IAAI,CAACC,cAAc,CAAC;MAClDR,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZC,OAAO,CAACX,KAAK,CAAC,4BAA4B,EAAEU,GAAG,CAAC;MAChDT,QAAQ,CAAC,6BAA6B,CAAC;IACzC;EACF,CAAC;EAED,oBACE9B,OAAA;IAAA6D,QAAA,gBACE7D,OAAA;MAAA6D,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9BpC,KAAK,iBAAI7B,OAAA;MAAGkE,SAAS,EAAC,OAAO;MAAAL,QAAA,EAAEhC;IAAK;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAG1CjE,OAAA;MAAKmE,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAP,QAAA,eACnC7D,OAAA;QAAQqE,OAAO,EAAEA,CAAA,KAAMjD,sBAAsB,CAAC,CAACD,mBAAmB,CAAE;QAAA0C,QAAA,EACjE1C,mBAAmB,GAAG,yBAAyB,GAAG;MAAoB;QAAA2C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAGL9C,mBAAmB,iBAClBnB,OAAA;MAAKmE,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAP,QAAA,gBACnC7D,OAAA;QAAA6D,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BjE,OAAA;QACE2C,IAAI,EAAC,iBAAiB;QACtBC,KAAK,EAAEjC,WAAW,CAACE,eAAgB;QACnCyD,QAAQ,EAAE7B,iBAAkB;QAAAoB,QAAA,gBAE5B7D,OAAA;UAAQ4C,KAAK,EAAC,EAAE;UAAAiB,QAAA,EAAC;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC5CxD,YAAY,CAACgD,GAAG,CAAEc,IAAI,iBACrBvE,OAAA;UAAmC4C,KAAK,EAAE2B,IAAI,CAACC,eAAgB;UAAAX,QAAA,EAC5DU,IAAI,CAACC;QAAe,GADVD,IAAI,CAACC,eAAe;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEzB,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACTjE,OAAA;QACEyE,IAAI,EAAC,MAAM;QACX9B,IAAI,EAAC,YAAY;QACjB+B,WAAW,EAAC,qBAAqB;QACjC9B,KAAK,EAAEjC,WAAW,CAACG,UAAW;QAC9BwD,QAAQ,EAAE7B;MAAkB;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFjE,OAAA;QACEyE,IAAI,EAAC,gBAAgB;QACrB9B,IAAI,EAAC,iBAAiB;QACtB+B,WAAW,EAAC,kBAAkB;QAC9B9B,KAAK,EAAEjC,WAAW,CAACI,eAAgB;QACnCuD,QAAQ,EAAE7B;MAAkB;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFjE,OAAA;QACEyE,IAAI,EAAC,gBAAgB;QACrB9B,IAAI,EAAC,mBAAmB;QACxB+B,WAAW,EAAC,oBAAoB;QAChC9B,KAAK,EAAEjC,WAAW,CAACK,iBAAkB;QACrCsD,QAAQ,EAAE7B;MAAkB;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFjE,OAAA;QACE2C,IAAI,EAAC,SAAS;QACdC,KAAK,EAAEjC,WAAW,CAACM,OAAQ;QAC3BqD,QAAQ,EAAE7B,iBAAkB;QAAAoB,QAAA,gBAE5B7D,OAAA;UAAQ4C,KAAK,EAAC,EAAE;UAAAiB,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACxC1D,MAAM,CAACkD,GAAG,CAAEkB,KAAK,iBAChB3E,OAAA;UAA4B4C,KAAK,EAAE+B,KAAK,CAACC,OAAQ;UAAAf,QAAA,EAC9Cc,KAAK,CAACC;QAAO,GADHD,KAAK,CAACC,OAAO;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAElB,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eAETjE,OAAA;QAAA6D,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACpB5D,QAAQ,CAACoD,GAAG,CAAEoB,OAAO,iBACpB7E,OAAA;QAAA6D,QAAA,gBACE7D,OAAA;UAAA6D,QAAA,gBACE7D,OAAA;YACEyE,IAAI,EAAC,UAAU;YACf7B,KAAK,EAAEiC,OAAO,CAACC,SAAU;YACzBR,QAAQ,EAAEvB;UAAoB;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,EACDY,OAAO,CAACE,WAAW;QAAA;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,EACPtD,WAAW,CAACO,KAAK,CAAC8D,IAAI,CAAE1B,IAAI,IAAKA,IAAI,CAACN,SAAS,KAAK6B,OAAO,CAACC,SAAS,CAAC,iBACrE9E,OAAA;UAAA6D,QAAA,gBACE7D,OAAA;YACEyE,IAAI,EAAC,gBAAgB;YACrBC,WAAW,EAAC,kBAAkB;YAC9BJ,QAAQ,EAAG5B,CAAC,IACVa,wBAAwB,CAACsB,OAAO,CAACC,SAAS,EAAE,iBAAiB,EAAEpC,CAAC,CAACG,MAAM,CAACD,KAAK;UAC9E;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACFjE,OAAA;YACEyE,IAAI,EAAC,gBAAgB;YACrBC,WAAW,EAAC,oBAAoB;YAChCJ,QAAQ,EAAG5B,CAAC,IACVa,wBAAwB,CAACsB,OAAO,CAACC,SAAS,EAAE,mBAAmB,EAAEpC,CAAC,CAACG,MAAM,CAACD,KAAK;UAChF;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CACN;MAAA,GA1BOY,OAAO,CAACC,SAAS;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA2BtB,CACN,CAAC,eAEFjE,OAAA;QAAQqE,OAAO,EAAEX,iBAAkB;QAAAG,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CACN,eAGDjE,OAAA;MAAKmE,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAP,QAAA,gBACnC7D,OAAA;QAAA6D,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCjE,OAAA;QAAA6D,QAAA,gBACE7D,OAAA;UAAA6D,QAAA,eACE7D,OAAA;YAAA6D,QAAA,gBACE7D,OAAA;cAAA6D,QAAA,EAAI;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpBjE,OAAA;cAAA6D,QAAA,EAAI;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC1BjE,OAAA;cAAA6D,QAAA,EAAI;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpBjE,OAAA;cAAA6D,QAAA,EAAI;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACrBjE,OAAA;cAAA6D,QAAA,EAAI;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACrBjE,OAAA;cAAA6D,QAAA,EAAI;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACvBjE,OAAA;cAAA6D,QAAA,EAAI;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACvBjE,OAAA;cAAA6D,QAAA,EAAI;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjBjE,OAAA;cAAA6D,QAAA,EAAI;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRjE,OAAA;UAAA6D,QAAA,EACG1D,SAAS,CAAC8E,MAAM,GAAG,CAAC,GACnB9E,SAAS,CAACsD,GAAG,CAAEyB,QAAQ,iBACrBlF,OAAA,WAASkF,QAAQ,CAACC,UAAU;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAExB,CACL,CAAC,gBAEFjE,OAAA;YAAA6D,QAAA,eACE7D,OAAA;cAAIoF,OAAO,EAAC,GAAG;cAAAvB,QAAA,EAAC;YAA6B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChD;QACL;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAGNjE,OAAA;MAAKmE,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAP,QAAA,gBACnC7D,OAAA;QAAA6D,QAAA,EAAI;MAAyD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClEjE,OAAA;QACE4C,KAAK,EAAEvB,iBAAkB;QACzBiD,QAAQ,EAAG5B,CAAC,IAAKpB,oBAAoB,CAACoB,CAAC,CAACG,MAAM,CAACD,KAAK,CAAE;QAAAiB,QAAA,gBAEtD7D,OAAA;UAAQ4C,KAAK,EAAC,EAAE;UAAAiB,QAAA,EAAC;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACvC5D,QAAQ,CAACoD,GAAG,CAAEoB,OAAO,iBACpB7E,OAAA;UAAgC4C,KAAK,EAAEiC,OAAO,CAACE,WAAY;UAAAlB,QAAA,EACxDgB,OAAO,CAACE;QAAW,GADTF,OAAO,CAACC,SAAS;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEtB,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACTjE,OAAA;QAAQqE,OAAO,EAAET,qBAAsB;QAAAC,QAAA,EAAC;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAG3ExC,eAAe,iBACdzB,OAAA;QAAOmE,KAAK,EAAE;UAAEkB,SAAS,EAAE;QAAO,CAAE;QAAAxB,QAAA,gBAClC7D,OAAA;UAAA6D,QAAA,eACE7D,OAAA;YAAA6D,QAAA,gBACE7D,OAAA;cAAA6D,QAAA,EAAI;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpBjE,OAAA;cAAA6D,QAAA,EAAI;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC1BjE,OAAA;cAAA6D,QAAA,EAAI;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpBjE,OAAA;cAAA6D,QAAA,EAAI;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACrBjE,OAAA;cAAA6D,QAAA,EAAI;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACrBjE,OAAA;cAAA6D,QAAA,EAAI;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACvBjE,OAAA;cAAA6D,QAAA,EAAI;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACvBjE,OAAA;cAAA6D,QAAA,EAAI;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRjE,OAAA;UAAA6D,QAAA,EACGtC,iBAAiB,CAAC0D,MAAM,GAAG,CAAC,GAC3B1D,iBAAiB,CAACkC,GAAG,CAAEyB,QAAQ;YAAA,IAAAI,qBAAA,EAAAC,qBAAA;YAAA,oBAC7BvF,OAAA;cAAA6D,QAAA,gBACE7D,OAAA;gBAAA6D,QAAA,EAAKqB,QAAQ,CAACC;cAAU;gBAAArB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9BjE,OAAA;gBAAA6D,QAAA,EAAKqB,QAAQ,CAACV;cAAe;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnCjE,OAAA;gBAAA6D,QAAA,EAAKqB,QAAQ,CAACM;cAAU;gBAAA1B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9BjE,OAAA;gBAAA6D,QAAA,EAAKqB,QAAQ,CAACO,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;cAAC;gBAAA5B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjDjE,OAAA;gBAAA6D,QAAA,GAAAyB,qBAAA,GAAKJ,QAAQ,CAACO,eAAe,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAAJ,qBAAA,uBAAtCA,qBAAA,CAAwCK,SAAS,CAAC,CAAC,EAAE,CAAC;cAAC;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAClEjE,OAAA;gBAAA6D,QAAA,EAAKqB,QAAQ,CAACU,iBAAiB,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;cAAC;gBAAA5B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnDjE,OAAA;gBAAA6D,QAAA,GAAA0B,qBAAA,GAAKL,QAAQ,CAACU,iBAAiB,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAAH,qBAAA,uBAAxCA,qBAAA,CAA0CI,SAAS,CAAC,CAAC,EAAE,CAAC;cAAC;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpEjE,OAAA;gBAAA6D,QAAA,EAAKqB,QAAQ,CAACN;cAAO;gBAAAd,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GARpBiB,QAAQ,CAACC,UAAU;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OASxB,CAAC;UAAA,CACN,CAAC,gBAEFjE,OAAA;YAAA6D,QAAA,eACE7D,OAAA;cAAIoF,OAAO,EAAC,GAAG;cAACjB,KAAK,EAAE;gBAAE0B,KAAK,EAAE;cAAM,CAAE;cAAAhC,QAAA,EAAC;YAEzC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QACL;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/D,EAAA,CA7UID,kBAAkB;AAAA6F,EAAA,GAAlB7F,kBAAkB;AA+UxB,eAAeA,kBAAkB;AAAC,IAAA6F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}