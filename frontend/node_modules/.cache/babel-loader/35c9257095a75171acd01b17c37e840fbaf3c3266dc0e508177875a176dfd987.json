{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/AskQuestionTab.js\",\n  _s = $RefreshSig$();\n// // // // AskQuestionTab.js\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const AskQuestionTab = () => {\n// // //   const [question, setQuestion] = useState('');\n// // //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchQuestions();\n// // //   }, []);\n\n// // //   // Fetch all previously asked questions by the customer\n// // //   const fetchQuestions = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer/questions');\n// // //       setSubmittedQuestions(response.data.questions);\n// // //     } catch (err) {\n// // //       console.error('Error fetching questions:', err);\n// // //     }\n// // //   };\n\n// // //   // Handle question submission\n// // //   const handleSubmitQuestion = async () => {\n// // //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n// // //     if (!customerId) {\n// // //       setError('Customer ID not found. Please log in again.');\n// // //       return;\n// // //     }\n\n// // //     if (!questionText.trim()) {\n// // //       setError('Question cannot be empty.');\n// // //       return;\n// // //     }\n\n// // //     try {\n// // //       const response = await axiosInstance.post('/customer/questions', {\n// // //         customerId, // Include customerId\n// // //         questionText,\n// // //       });\n\n// // //       setSuccess('Your question has been submitted successfully!');\n// // //       setQuestionText('');\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error submitting question:', err);\n// // //       setError('Failed to submit the question. Please try again.');\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h3>Ask a Question</h3>\n// // //       <div>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter your question\"\n// // //           value={question}\n// // //           onChange={(e) => setQuestion(e.target.value)}\n// // //         />\n// // //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// // //       </div>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       <div>\n// // //         <h4>Your Submitted Questions</h4>\n// // //         {submittedQuestions.length > 0 ? (\n// // //           <ul>\n// // //             {submittedQuestions.map((q) => (\n// // //               <li key={q.QuestionID}>\n// // //                 <p><strong>Question:</strong> {q.Question}</p>\n// // //                 <p><strong>Answer:</strong> {q.Answer ? q.Answer : 'Not answered yet'}</p>\n// // //               </li>\n// // //             ))}\n// // //           </ul>\n// // //         ) : (\n// // //           <p>No questions submitted yet.</p>\n// // //         )}\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default AskQuestionTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const AskQuestionTab = () => {\n// //   const [question, setQuestion] = useState('');\n// //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// //   const [error, setError] = useState('');\n// //   const [success, setSuccess] = useState('');\n\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //   }, []);\n\n// //   // Fetch all previously asked questions by the customer\n// //   const fetchQuestions = async () => {\n// //     const customerId = localStorage.getItem('customerId'); // Ensure customer ID exists\n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.get('/customer/questions', {\n// //         params: { customerId }, // Pass customerId as query param\n// //       });\n// //       setSubmittedQuestions(response.data.questions);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching questions:', err);\n// //       setError('Failed to fetch questions.');\n// //     }\n// //   };\n\n// //   // Handle question submission\n// //   const handleSubmitQuestion = async () => {\n// //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n\n// //     if (!question.trim()) {\n// //       setError('Question cannot be empty.');\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.post('/customer/questions', {\n// //         customerId, // Include customerId\n// //         questionText: question, // Use the correct state variable\n// //       });\n\n// //       setSuccess('Your question has been submitted successfully!');\n// //       setQuestion(''); // Clear the input field\n// //       fetchQuestions(); // Re-fetch questions to update the list\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error submitting question:', err);\n// //       setError('Failed to submit the question. Please try again.');\n// //       setSuccess('');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Ask a Question</h3>\n// //       <div>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter your question\"\n// //           value={question}\n// //           onChange={(e) => setQuestion(e.target.value)}\n// //         />\n// //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// //       </div>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       {success && <p className=\"success\">{success}</p>}\n\n// //       <div>\n// //         <h4>Your Submitted Questions</h4>\n// //         {submittedQuestions.length > 0 ? (\n// //           <ul>\n// //             {submittedQuestions.map((q) => (\n// //               <li key={q.QuestionID}>\n// //                 <p>\n// //                   <strong>Question:</strong> {q.Question}\n// //                 </p>\n// //                 <p>\n// //                   <strong>Answer:</strong>{' '}\n// //                   {q.Answer ? q.Answer : 'Not answered yet'}\n// //                 </p>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         ) : (\n// //           <p>No questions submitted yet.</p>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default AskQuestionTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const AskQuestionTab = () => {\n// //   const [question, setQuestion] = useState('');\n// //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// //   const [error, setError] = useState('');\n// //   const [success, setSuccess] = useState('');\n// //   const [editQuestionId, setEditQuestionId] = useState(null);\n// //   const [editText, setEditText] = useState('');\n// //   const customerId = localStorage.getItem('customerId');\n\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //   }, []);\n\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer/questions');\n// //       setSubmittedQuestions(response.data.questions);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching questions:', err);\n// //       setError('Failed to fetch questions.');\n// //     }\n// //   };\n\n// //   const handleSubmitQuestion = async () => {\n// //     const customerId = localStorage.getItem('customerId');\n// //     if (!customerId) {\n// //       setError('Customer ID not found.');\n// //       return;\n// //     }\n// //     if (!question.trim()) {\n// //       setError('Question cannot be empty.');\n// //       return;\n// //     }\n// //     try {\n// //       await axiosInstance.post('/customer/questions', {\n// //         customerId,\n// //         questionText: question,\n// //       });\n// //       setSuccess('Question submitted successfully!');\n// //       setQuestion('');\n// //       fetchQuestions();\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error submitting question:', err);\n// //       setError('Failed to submit question.');\n// //     }\n// //   };\n\n// //   const handleDeleteQuestion = async (questionId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer/questions/${questionId}`);\n// //       setSuccess('Question deleted successfully!');\n// //       fetchQuestions();\n// //     } catch (err) {\n// //       console.error('Error deleting question:', err);\n// //       setError('Failed to delete question.');\n// //     }\n// //   };\n\n// //   const handleEditQuestion = async () => {\n// //     try {\n// //       await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n// //         updatedQuestion: editText,\n// //       });\n// //       setSuccess('Question updated successfully!');\n// //       setEditQuestionId(null);\n// //       setEditText('');\n// //       fetchQuestions();\n// //     } catch (err) {\n// //       console.error('Error updating question:', err);\n// //       setError('Failed to update question.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Ask a Question</h3>\n// //       <div>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter your question\"\n// //           value={question}\n// //           onChange={(e) => setQuestion(e.target.value)}\n// //         />\n// //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// //       </div>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       {success && <p className=\"success\">{success}</p>}\n\n// //       <h4>All Questions</h4>\n// //       {submittedQuestions.length > 0 ? (\n// //         <ul>\n// //           {submittedQuestions.map((q) => (\n// //             <li key={q.QuestionID}>\n// //               {editQuestionId === q.QuestionID ? (\n// //                 <div>\n// //                   <input\n// //                     type=\"text\"\n// //                     value={editText}\n// //                     onChange={(e) => setEditText(e.target.value)}\n// //                   />\n// //                   <button onClick={handleEditQuestion}>Save</button>\n// //                   <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n// //                 </div>\n// //               ) : (\n// //                 <div>\n// //                   <p><strong>Question:</strong> {q.Question}</p>\n// //                   <p><strong>Answer:</strong> {q.Answer || 'Not answered yet'}</p>\n// //                   {customerId == q.CustomerID && (<div>\n// //                     <button onClick={() => handleDeleteQuestion(q.QuestionID)}>Delete</button>\n// //                   <button onClick={() => {\n// //                     setEditQuestionId(q.QuestionID);\n// //                     setEditText(q.Question);\n// //                   }}>\n// //                     Edit\n// //                   </button>\n// //                 </div>)}\n// //                 </div>\n// //               )}\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       ) : (\n// //         <p>No questions submitted yet.</p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default AskQuestionTab;\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [filteredQuestions, setFilteredQuestions] = useState([]);\n//   const [filterMode, setFilterMode] = useState('all'); // all | mine\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [editQuestionId, setEditQuestionId] = useState(null);\n//   const [editText, setEditText] = useState('');\n//   const customerId = localStorage.getItem('customerId');\n\n//   // Fetch all questions on component mount\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer/questions');\n//       setSubmittedQuestions(response.data.questions);\n//       applyFilter(response.data.questions, filterMode);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   // Apply filter based on the selected mode\n//   const applyFilter = (questions, mode) => {\n//     if (mode === 'mine') {\n//       const filtered = questions.filter((q) => q.CustomerID == customerId);\n//       setFilteredQuestions(filtered);\n//     } else {\n//       setFilteredQuestions(questions);\n//     }\n//   };\n\n//   // Handle question submission\n//   const handleSubmitQuestion = async () => {\n//     if (!customerId) {\n//       setError('Customer ID not found.');\n//       return;\n//     }\n//     if (!question.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n//     try {\n//       await axiosInstance.post('/customer/questions', {\n//         customerId,\n//         questionText: question,\n//       });\n//       setSuccess('Question submitted successfully!');\n//       setQuestion('');\n//       fetchQuestions();\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit question.');\n//     }\n//   };\n\n//   // Handle question deletion\n//   const handleDeleteQuestion = async (questionId) => {\n//     try {\n//       await axiosInstance.delete(`/customer/questions/${questionId}`);\n//       setSuccess('Question deleted successfully!');\n//       fetchQuestions();\n//     } catch (err) {\n//       console.error('Error deleting question:', err);\n//       setError('Failed to delete question.');\n//     }\n//   };\n\n//   // Handle question editing\n//   const handleEditQuestion = async () => {\n//     try {\n//       await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n//         updatedQuestion: editText,\n//       });\n//       setSuccess('Question updated successfully!');\n//       setEditQuestionId(null);\n//       setEditText('');\n//       fetchQuestions();\n//     } catch (err) {\n//       console.error('Error updating question:', err);\n//       setError('Failed to update question.');\n//     }\n//   };\n\n//   // Switch between All Questions and My Questions\n//   const handleFilterChange = (mode) => {\n//     setFilterMode(mode);\n//     applyFilter(submittedQuestions, mode);\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       {/* Buttons to switch between All Questions and My Questions */}\n//       <div>\n//         <button\n//           onClick={() => handleFilterChange('all')}\n//           style={{\n//             backgroundColor: filterMode === 'all' ? '#4CAF50' : '#f0f0f0',\n//             color: filterMode === 'all' ? 'white' : 'black',\n//             marginRight: '10px',\n//           }}\n//         >\n//           All Questions\n//         </button>\n//         <button\n//           onClick={() => handleFilterChange('mine')}\n//           style={{\n//             backgroundColor: filterMode === 'mine' ? '#4CAF50' : '#f0f0f0',\n//             color: filterMode === 'mine' ? 'white' : 'black',\n//           }}\n//         >\n//           My Questions\n//         </button>\n//       </div>\n\n//       <h4>{filterMode === 'mine' ? 'My Submitted Questions' : 'All Questions'}</h4>\n//       {filteredQuestions.length > 0 ? (\n//         <ul>\n//           {filteredQuestions.map((q) => (\n//             <li key={q.QuestionID}>\n//               {editQuestionId === q.QuestionID ? (\n//                 <div>\n//                   <input\n//                     type=\"text\"\n//                     value={editText}\n//                     onChange={(e) => setEditText(e.target.value)}\n//                   />\n//                   <button onClick={handleEditQuestion}>Save</button>\n//                   <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n//                 </div>\n//               ) : (\n//                 <div>\n//                   <p>\n//                     <strong>Question:</strong> {q.Question}\n//                   </p>\n//                   <p>\n//                     <strong>Answer:</strong> {q.Answer || 'Not answered yet'}\n//                   </p>\n//                   {customerId == q.CustomerID && (\n//                     <div>\n//                       <button onClick={() => handleDeleteQuestion(q.QuestionID)}>\n//                         Delete\n//                       </button>\n//                       <button\n//                         onClick={() => {\n//                           setEditQuestionId(q.QuestionID);\n//                           setEditText(q.Question);\n//                         }}\n//                       >\n//                         Edit\n//                       </button>\n//                     </div>\n//                   )}\n//                 </div>\n//               )}\n//             </li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No questions available.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AskQuestionTab = () => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [submittedQuestions, setSubmittedQuestions] = useState([]);\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\n  const [filterMode, setFilterMode] = useState('all'); // all | mine\n  const [searchKeyword, setSearchKeyword] = useState(''); // For keyword filtering\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [editQuestionId, setEditQuestionId] = useState(null);\n  const [editText, setEditText] = useState('');\n  const customerId = localStorage.getItem('customerId');\n\n  // Fetch all questions on component mount\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  const fetchQuestions = async () => {\n    try {\n      const response = await axiosInstance.get('/customer/questions');\n      setSubmittedQuestions(response.data.questions);\n      applyFilter(response.data.questions, filterMode, searchKeyword);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching questions:', err);\n      setError('Failed to fetch questions.');\n    }\n  };\n\n  // Apply filter based on mode and keywords\n  const applyFilter = (questions, mode, keyword) => {\n    let filtered = mode === 'mine' ? questions.filter(q => q.CustomerID == customerId) : questions;\n    if (keyword.trim()) {\n      filtered = filtered.filter(q => q.Question.toLowerCase().includes(keyword.toLowerCase()));\n    }\n    setFilteredQuestions(filtered);\n  };\n  const handleFilterChange = mode => {\n    setFilterMode(mode);\n    applyFilter(submittedQuestions, mode, searchKeyword);\n  };\n  const handleKeywordSearch = e => {\n    const keyword = e.target.value;\n    setSearchKeyword(keyword);\n    applyFilter(submittedQuestions, filterMode, keyword);\n  };\n  const handleSubmitQuestion = async () => {\n    if (!customerId) {\n      setError('Customer ID not found.');\n      return;\n    }\n    if (!question.trim()) {\n      setError('Question cannot be empty.');\n      return;\n    }\n    try {\n      await axiosInstance.post('/customer/questions', {\n        customerId,\n        questionText: question\n      });\n      setSuccess('Question submitted successfully!');\n      setQuestion('');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error submitting question:', err);\n      setError('Failed to submit question.');\n    }\n  };\n  const handleDeleteQuestion = async questionId => {\n    try {\n      await axiosInstance.delete(`/customer/questions/${questionId}`);\n      setSuccess('Question deleted successfully!');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error deleting question:', err);\n      setError('Failed to delete question.');\n    }\n  };\n  const handleEditQuestion = async () => {\n    try {\n      await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n        updatedQuestion: editText\n      });\n      setSuccess('Question updated successfully!');\n      setEditQuestionId(null);\n      setEditText('');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error updating question:', err);\n      setError('Failed to update question.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Ask a Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your question\",\n        value: question,\n        onChange: e => setQuestion(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitQuestion,\n        children: \"Submit Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleFilterChange('all'),\n        style: {\n          backgroundColor: filterMode === 'all' ? '#4CAF50' : '#f0f0f0',\n          color: filterMode === 'all' ? 'white' : 'black',\n          marginRight: '10px'\n        },\n        children: \"All Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleFilterChange('mine'),\n        style: {\n          backgroundColor: filterMode === 'mine' ? '#4CAF50' : '#f0f0f0',\n          color: filterMode === 'mine' ? 'white' : 'black'\n        },\n        children: \"My Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search questions...\",\n        value: searchKeyword,\n        onChange: handleKeywordSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: filterMode === 'mine' ? 'My Submitted Questions' : 'All Questions'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 7\n    }, this), filteredQuestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredQuestions.map(q => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: editQuestionId === q.QuestionID ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editText,\n            onChange: e => setEditText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleEditQuestion,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditQuestionId(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Question:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 21\n            }, this), \" \", q.Question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 21\n            }, this), \" \", q.Answer || 'Not answered yet']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 19\n          }, this), filterMode === 'mine' && customerId == q.CustomerID && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteQuestion(q.QuestionID),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setEditQuestionId(q.QuestionID);\n                setEditText(q.Question);\n              },\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 17\n        }, this)\n      }, q.QuestionID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No questions available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 629,\n    columnNumber: 5\n  }, this);\n};\n_s(AskQuestionTab, \"2NCdZcE36qaJbbxaqXKoW/rfZGs=\");\n_c = AskQuestionTab;\nexport default AskQuestionTab;\nvar _c;\n$RefreshReg$(_c, \"AskQuestionTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","AskQuestionTab","_s","question","setQuestion","submittedQuestions","setSubmittedQuestions","filteredQuestions","setFilteredQuestions","filterMode","setFilterMode","searchKeyword","setSearchKeyword","error","setError","success","setSuccess","editQuestionId","setEditQuestionId","editText","setEditText","customerId","localStorage","getItem","fetchQuestions","response","get","data","questions","applyFilter","err","console","mode","keyword","filtered","filter","q","CustomerID","trim","Question","toLowerCase","includes","handleFilterChange","handleKeywordSearch","e","target","value","handleSubmitQuestion","post","questionText","handleDeleteQuestion","questionId","delete","handleEditQuestion","put","updatedQuestion","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","className","style","backgroundColor","color","marginRight","margin","length","map","QuestionID","Answer","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/AskQuestionTab.js"],"sourcesContent":["// // // // AskQuestionTab.js\n// // // import React, { useState, useEffect } from 'react';\n// // // import axiosInstance from '../utils/axiosInstance';\n\n// // // const AskQuestionTab = () => {\n// // //   const [question, setQuestion] = useState('');\n// // //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// // //   const [error, setError] = useState('');\n\n// // //   useEffect(() => {\n// // //     fetchQuestions();\n// // //   }, []);\n\n// // //   // Fetch all previously asked questions by the customer\n// // //   const fetchQuestions = async () => {\n// // //     try {\n// // //       const response = await axiosInstance.get('/customer/questions');\n// // //       setSubmittedQuestions(response.data.questions);\n// // //     } catch (err) {\n// // //       console.error('Error fetching questions:', err);\n// // //     }\n// // //   };\n\n// // //   // Handle question submission\n// // //   const handleSubmitQuestion = async () => {\n// // //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n  \n// // //     if (!customerId) {\n// // //       setError('Customer ID not found. Please log in again.');\n// // //       return;\n// // //     }\n  \n// // //     if (!questionText.trim()) {\n// // //       setError('Question cannot be empty.');\n// // //       return;\n// // //     }\n  \n// // //     try {\n// // //       const response = await axiosInstance.post('/customer/questions', {\n// // //         customerId, // Include customerId\n// // //         questionText,\n// // //       });\n  \n// // //       setSuccess('Your question has been submitted successfully!');\n// // //       setQuestionText('');\n// // //       setError('');\n// // //     } catch (err) {\n// // //       console.error('Error submitting question:', err);\n// // //       setError('Failed to submit the question. Please try again.');\n// // //     }\n// // //   };\n  \n\n// // //   return (\n// // //     <div>\n// // //       <h3>Ask a Question</h3>\n// // //       <div>\n// // //         <input\n// // //           type=\"text\"\n// // //           placeholder=\"Enter your question\"\n// // //           value={question}\n// // //           onChange={(e) => setQuestion(e.target.value)}\n// // //         />\n// // //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// // //       </div>\n// // //       {error && <p className=\"error\">{error}</p>}\n\n// // //       <div>\n// // //         <h4>Your Submitted Questions</h4>\n// // //         {submittedQuestions.length > 0 ? (\n// // //           <ul>\n// // //             {submittedQuestions.map((q) => (\n// // //               <li key={q.QuestionID}>\n// // //                 <p><strong>Question:</strong> {q.Question}</p>\n// // //                 <p><strong>Answer:</strong> {q.Answer ? q.Answer : 'Not answered yet'}</p>\n// // //               </li>\n// // //             ))}\n// // //           </ul>\n// // //         ) : (\n// // //           <p>No questions submitted yet.</p>\n// // //         )}\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default AskQuestionTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const AskQuestionTab = () => {\n// //   const [question, setQuestion] = useState('');\n// //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// //   const [error, setError] = useState('');\n// //   const [success, setSuccess] = useState('');\n\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //   }, []);\n\n// //   // Fetch all previously asked questions by the customer\n// //   const fetchQuestions = async () => {\n// //     const customerId = localStorage.getItem('customerId'); // Ensure customer ID exists\n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.get('/customer/questions', {\n// //         params: { customerId }, // Pass customerId as query param\n// //       });\n// //       setSubmittedQuestions(response.data.questions);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching questions:', err);\n// //       setError('Failed to fetch questions.');\n// //     }\n// //   };\n\n// //   // Handle question submission\n// //   const handleSubmitQuestion = async () => {\n// //     const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n// //     if (!customerId) {\n// //       setError('Customer ID not found. Please log in again.');\n// //       return;\n// //     }\n\n// //     if (!question.trim()) {\n// //       setError('Question cannot be empty.');\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axiosInstance.post('/customer/questions', {\n// //         customerId, // Include customerId\n// //         questionText: question, // Use the correct state variable\n// //       });\n\n// //       setSuccess('Your question has been submitted successfully!');\n// //       setQuestion(''); // Clear the input field\n// //       fetchQuestions(); // Re-fetch questions to update the list\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error submitting question:', err);\n// //       setError('Failed to submit the question. Please try again.');\n// //       setSuccess('');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Ask a Question</h3>\n// //       <div>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter your question\"\n// //           value={question}\n// //           onChange={(e) => setQuestion(e.target.value)}\n// //         />\n// //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// //       </div>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       {success && <p className=\"success\">{success}</p>}\n\n// //       <div>\n// //         <h4>Your Submitted Questions</h4>\n// //         {submittedQuestions.length > 0 ? (\n// //           <ul>\n// //             {submittedQuestions.map((q) => (\n// //               <li key={q.QuestionID}>\n// //                 <p>\n// //                   <strong>Question:</strong> {q.Question}\n// //                 </p>\n// //                 <p>\n// //                   <strong>Answer:</strong>{' '}\n// //                   {q.Answer ? q.Answer : 'Not answered yet'}\n// //                 </p>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         ) : (\n// //           <p>No questions submitted yet.</p>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default AskQuestionTab;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const AskQuestionTab = () => {\n// //   const [question, setQuestion] = useState('');\n// //   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n// //   const [error, setError] = useState('');\n// //   const [success, setSuccess] = useState('');\n// //   const [editQuestionId, setEditQuestionId] = useState(null);\n// //   const [editText, setEditText] = useState('');\n// //   const customerId = localStorage.getItem('customerId');\n\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //   }, []);\n\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const response = await axiosInstance.get('/customer/questions');\n// //       setSubmittedQuestions(response.data.questions);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching questions:', err);\n// //       setError('Failed to fetch questions.');\n// //     }\n// //   };\n\n// //   const handleSubmitQuestion = async () => {\n// //     const customerId = localStorage.getItem('customerId');\n// //     if (!customerId) {\n// //       setError('Customer ID not found.');\n// //       return;\n// //     }\n// //     if (!question.trim()) {\n// //       setError('Question cannot be empty.');\n// //       return;\n// //     }\n// //     try {\n// //       await axiosInstance.post('/customer/questions', {\n// //         customerId,\n// //         questionText: question,\n// //       });\n// //       setSuccess('Question submitted successfully!');\n// //       setQuestion('');\n// //       fetchQuestions();\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error submitting question:', err);\n// //       setError('Failed to submit question.');\n// //     }\n// //   };\n\n// //   const handleDeleteQuestion = async (questionId) => {\n// //     try {\n// //       await axiosInstance.delete(`/customer/questions/${questionId}`);\n// //       setSuccess('Question deleted successfully!');\n// //       fetchQuestions();\n// //     } catch (err) {\n// //       console.error('Error deleting question:', err);\n// //       setError('Failed to delete question.');\n// //     }\n// //   };\n\n// //   const handleEditQuestion = async () => {\n// //     try {\n// //       await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n// //         updatedQuestion: editText,\n// //       });\n// //       setSuccess('Question updated successfully!');\n// //       setEditQuestionId(null);\n// //       setEditText('');\n// //       fetchQuestions();\n// //     } catch (err) {\n// //       console.error('Error updating question:', err);\n// //       setError('Failed to update question.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Ask a Question</h3>\n// //       <div>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Enter your question\"\n// //           value={question}\n// //           onChange={(e) => setQuestion(e.target.value)}\n// //         />\n// //         <button onClick={handleSubmitQuestion}>Submit Question</button>\n// //       </div>\n// //       {error && <p className=\"error\">{error}</p>}\n// //       {success && <p className=\"success\">{success}</p>}\n\n// //       <h4>All Questions</h4>\n// //       {submittedQuestions.length > 0 ? (\n// //         <ul>\n// //           {submittedQuestions.map((q) => (\n// //             <li key={q.QuestionID}>\n// //               {editQuestionId === q.QuestionID ? (\n// //                 <div>\n// //                   <input\n// //                     type=\"text\"\n// //                     value={editText}\n// //                     onChange={(e) => setEditText(e.target.value)}\n// //                   />\n// //                   <button onClick={handleEditQuestion}>Save</button>\n// //                   <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n// //                 </div>\n// //               ) : (\n// //                 <div>\n// //                   <p><strong>Question:</strong> {q.Question}</p>\n// //                   <p><strong>Answer:</strong> {q.Answer || 'Not answered yet'}</p>\n// //                   {customerId == q.CustomerID && (<div>\n// //                     <button onClick={() => handleDeleteQuestion(q.QuestionID)}>Delete</button>\n// //                   <button onClick={() => {\n// //                     setEditQuestionId(q.QuestionID);\n// //                     setEditText(q.Question);\n// //                   }}>\n// //                     Edit\n// //                   </button>\n// //                 </div>)}\n// //                 </div>\n// //               )}\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       ) : (\n// //         <p>No questions submitted yet.</p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default AskQuestionTab;\n\n\n// import React, { useState, useEffect } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const AskQuestionTab = () => {\n//   const [question, setQuestion] = useState('');\n//   const [submittedQuestions, setSubmittedQuestions] = useState([]);\n//   const [filteredQuestions, setFilteredQuestions] = useState([]);\n//   const [filterMode, setFilterMode] = useState('all'); // all | mine\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [editQuestionId, setEditQuestionId] = useState(null);\n//   const [editText, setEditText] = useState('');\n//   const customerId = localStorage.getItem('customerId');\n\n//   // Fetch all questions on component mount\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const response = await axiosInstance.get('/customer/questions');\n//       setSubmittedQuestions(response.data.questions);\n//       applyFilter(response.data.questions, filterMode);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching questions:', err);\n//       setError('Failed to fetch questions.');\n//     }\n//   };\n\n//   // Apply filter based on the selected mode\n//   const applyFilter = (questions, mode) => {\n//     if (mode === 'mine') {\n//       const filtered = questions.filter((q) => q.CustomerID == customerId);\n//       setFilteredQuestions(filtered);\n//     } else {\n//       setFilteredQuestions(questions);\n//     }\n//   };\n\n//   // Handle question submission\n//   const handleSubmitQuestion = async () => {\n//     if (!customerId) {\n//       setError('Customer ID not found.');\n//       return;\n//     }\n//     if (!question.trim()) {\n//       setError('Question cannot be empty.');\n//       return;\n//     }\n//     try {\n//       await axiosInstance.post('/customer/questions', {\n//         customerId,\n//         questionText: question,\n//       });\n//       setSuccess('Question submitted successfully!');\n//       setQuestion('');\n//       fetchQuestions();\n//       setError('');\n//     } catch (err) {\n//       console.error('Error submitting question:', err);\n//       setError('Failed to submit question.');\n//     }\n//   };\n\n//   // Handle question deletion\n//   const handleDeleteQuestion = async (questionId) => {\n//     try {\n//       await axiosInstance.delete(`/customer/questions/${questionId}`);\n//       setSuccess('Question deleted successfully!');\n//       fetchQuestions();\n//     } catch (err) {\n//       console.error('Error deleting question:', err);\n//       setError('Failed to delete question.');\n//     }\n//   };\n\n//   // Handle question editing\n//   const handleEditQuestion = async () => {\n//     try {\n//       await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n//         updatedQuestion: editText,\n//       });\n//       setSuccess('Question updated successfully!');\n//       setEditQuestionId(null);\n//       setEditText('');\n//       fetchQuestions();\n//     } catch (err) {\n//       console.error('Error updating question:', err);\n//       setError('Failed to update question.');\n//     }\n//   };\n\n//   // Switch between All Questions and My Questions\n//   const handleFilterChange = (mode) => {\n//     setFilterMode(mode);\n//     applyFilter(submittedQuestions, mode);\n//   };\n\n//   return (\n//     <div>\n//       <h3>Ask a Question</h3>\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter your question\"\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         />\n//         <button onClick={handleSubmitQuestion}>Submit Question</button>\n//       </div>\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       {/* Buttons to switch between All Questions and My Questions */}\n//       <div>\n//         <button\n//           onClick={() => handleFilterChange('all')}\n//           style={{\n//             backgroundColor: filterMode === 'all' ? '#4CAF50' : '#f0f0f0',\n//             color: filterMode === 'all' ? 'white' : 'black',\n//             marginRight: '10px',\n//           }}\n//         >\n//           All Questions\n//         </button>\n//         <button\n//           onClick={() => handleFilterChange('mine')}\n//           style={{\n//             backgroundColor: filterMode === 'mine' ? '#4CAF50' : '#f0f0f0',\n//             color: filterMode === 'mine' ? 'white' : 'black',\n//           }}\n//         >\n//           My Questions\n//         </button>\n//       </div>\n\n//       <h4>{filterMode === 'mine' ? 'My Submitted Questions' : 'All Questions'}</h4>\n//       {filteredQuestions.length > 0 ? (\n//         <ul>\n//           {filteredQuestions.map((q) => (\n//             <li key={q.QuestionID}>\n//               {editQuestionId === q.QuestionID ? (\n//                 <div>\n//                   <input\n//                     type=\"text\"\n//                     value={editText}\n//                     onChange={(e) => setEditText(e.target.value)}\n//                   />\n//                   <button onClick={handleEditQuestion}>Save</button>\n//                   <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n//                 </div>\n//               ) : (\n//                 <div>\n//                   <p>\n//                     <strong>Question:</strong> {q.Question}\n//                   </p>\n//                   <p>\n//                     <strong>Answer:</strong> {q.Answer || 'Not answered yet'}\n//                   </p>\n//                   {customerId == q.CustomerID && (\n//                     <div>\n//                       <button onClick={() => handleDeleteQuestion(q.QuestionID)}>\n//                         Delete\n//                       </button>\n//                       <button\n//                         onClick={() => {\n//                           setEditQuestionId(q.QuestionID);\n//                           setEditText(q.Question);\n//                         }}\n//                       >\n//                         Edit\n//                       </button>\n//                     </div>\n//                   )}\n//                 </div>\n//               )}\n//             </li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No questions available.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AskQuestionTab;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axiosInstance from '../utils/axiosInstance';\n\nconst AskQuestionTab = () => {\n  const [question, setQuestion] = useState('');\n  const [submittedQuestions, setSubmittedQuestions] = useState([]);\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\n  const [filterMode, setFilterMode] = useState('all'); // all | mine\n  const [searchKeyword, setSearchKeyword] = useState(''); // For keyword filtering\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [editQuestionId, setEditQuestionId] = useState(null);\n  const [editText, setEditText] = useState('');\n  const customerId = localStorage.getItem('customerId');\n\n  // Fetch all questions on component mount\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  const fetchQuestions = async () => {\n    try {\n      const response = await axiosInstance.get('/customer/questions');\n      setSubmittedQuestions(response.data.questions);\n      applyFilter(response.data.questions, filterMode, searchKeyword);\n      setError('');\n    } catch (err) {\n      console.error('Error fetching questions:', err);\n      setError('Failed to fetch questions.');\n    }\n  };\n\n  // Apply filter based on mode and keywords\n  const applyFilter = (questions, mode, keyword) => {\n    let filtered = mode === 'mine'\n      ? questions.filter((q) => q.CustomerID == customerId)\n      : questions;\n\n    if (keyword.trim()) {\n      filtered = filtered.filter((q) =>\n        q.Question.toLowerCase().includes(keyword.toLowerCase())\n      );\n    }\n\n    setFilteredQuestions(filtered);\n  };\n\n  const handleFilterChange = (mode) => {\n    setFilterMode(mode);\n    applyFilter(submittedQuestions, mode, searchKeyword);\n  };\n\n  const handleKeywordSearch = (e) => {\n    const keyword = e.target.value;\n    setSearchKeyword(keyword);\n    applyFilter(submittedQuestions, filterMode, keyword);\n  };\n\n  const handleSubmitQuestion = async () => {\n    if (!customerId) {\n      setError('Customer ID not found.');\n      return;\n    }\n    if (!question.trim()) {\n      setError('Question cannot be empty.');\n      return;\n    }\n    try {\n      await axiosInstance.post('/customer/questions', {\n        customerId,\n        questionText: question,\n      });\n      setSuccess('Question submitted successfully!');\n      setQuestion('');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error submitting question:', err);\n      setError('Failed to submit question.');\n    }\n  };\n\n  const handleDeleteQuestion = async (questionId) => {\n    try {\n      await axiosInstance.delete(`/customer/questions/${questionId}`);\n      setSuccess('Question deleted successfully!');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error deleting question:', err);\n      setError('Failed to delete question.');\n    }\n  };\n\n  const handleEditQuestion = async () => {\n    try {\n      await axiosInstance.put(`/customer/questions/${editQuestionId}`, {\n        updatedQuestion: editText,\n      });\n      setSuccess('Question updated successfully!');\n      setEditQuestionId(null);\n      setEditText('');\n      fetchQuestions();\n    } catch (err) {\n      console.error('Error updating question:', err);\n      setError('Failed to update question.');\n    }\n  };\n\n  return (\n    <div>\n      <h3>Ask a Question</h3>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your question\"\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n        />\n        <button onClick={handleSubmitQuestion}>Submit Question</button>\n      </div>\n\n      {error && <p className=\"error\">{error}</p>}\n      {success && <p className=\"success\">{success}</p>}\n\n      {/* Buttons to toggle between All Questions and My Questions */}\n      <div>\n        <button\n          onClick={() => handleFilterChange('all')}\n          style={{\n            backgroundColor: filterMode === 'all' ? '#4CAF50' : '#f0f0f0',\n            color: filterMode === 'all' ? 'white' : 'black',\n            marginRight: '10px',\n          }}\n        >\n          All Questions\n        </button>\n        <button\n          onClick={() => handleFilterChange('mine')}\n          style={{\n            backgroundColor: filterMode === 'mine' ? '#4CAF50' : '#f0f0f0',\n            color: filterMode === 'mine' ? 'white' : 'black',\n          }}\n        >\n          My Questions\n        </button>\n      </div>\n\n      {/* Search input for keyword filtering */}\n      <div style={{ margin: '10px 0' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Search questions...\"\n          value={searchKeyword}\n          onChange={handleKeywordSearch}\n        />\n      </div>\n\n      <h4>{filterMode === 'mine' ? 'My Submitted Questions' : 'All Questions'}</h4>\n      {filteredQuestions.length > 0 ? (\n        <ul>\n          {filteredQuestions.map((q) => (\n            <li key={q.QuestionID}>\n              {editQuestionId === q.QuestionID ? (\n                <div>\n                  <input\n                    type=\"text\"\n                    value={editText}\n                    onChange={(e) => setEditText(e.target.value)}\n                  />\n                  <button onClick={handleEditQuestion}>Save</button>\n                  <button onClick={() => setEditQuestionId(null)}>Cancel</button>\n                </div>\n              ) : (\n                <div>\n                  <p>\n                    <strong>Question:</strong> {q.Question}\n                  </p>\n                  <p>\n                    <strong>Answer:</strong> {q.Answer || 'Not answered yet'}\n                  </p>\n                  {filterMode === 'mine' && customerId == q.CustomerID && (\n                    <div>\n                      <button onClick={() => handleDeleteQuestion(q.QuestionID)}>\n                        Delete\n                      </button>\n                      <button\n                        onClick={() => {\n                          setEditQuestionId(q.QuestionID);\n                          setEditText(q.Question);\n                        }}\n                      >\n                        Edit\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No questions available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default AskQuestionTab;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}