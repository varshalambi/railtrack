{"ast":null,"code":"var _jsxFileName = \"/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/TrainSchedulesTab.js\",\n  _s = $RefreshSig$();\n// // // TrainSchedulesTab.js\n// // import React, { useState } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const TrainSchedulesTab = ({ stations }) => {\n// //   const [originStation, setOriginStation] = useState('');\n// //   const [destinationStation, setDestinationStation] = useState('');\n// //   const [travelDate, setTravelDate] = useState('');\n// //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// //   const [error, setError] = useState('');\n\n// //   const handleSearchSchedules = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError('Please select all fields.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get('/customer/train-schedules', {\n// //         params: {\n// //           originStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setAvailableSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching train schedules:', err);\n// //       setError('Failed to fetch train schedules.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Search & Book Train Schedules</h3>\n// //       <div>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Origin Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Destination Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// //       </div>\n\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {availableSchedules.length > 0 && (\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Departure Time</th>\n// //               <th>Arrival Time</th>\n// //               <th>Action</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {availableSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.DepartureDateTime}</td>\n// //                 <td>{schedule.ArrivalDateTime}</td>\n// //                 <td>\n// //                   <button>Book Now</button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default TrainSchedulesTab;\n\n// // import React, { useState } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const TrainSchedulesTab = ({ stations }) => {\n// //   const [originStation, setOriginStation] = useState('');\n// //   const [destinationStation, setDestinationStation] = useState('');\n// //   const [travelDate, setTravelDate] = useState('');\n// //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// //   const [error, setError] = useState('');\n// //   const [successMessage, setSuccessMessage] = useState('');\n\n// //   const handleSearchSchedules = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError('Please select all fields.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get('/customer/train-schedules', {\n// //         params: {\n// //           originStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setAvailableSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching train schedules:', err);\n// //       setError('Failed to fetch train schedules.');\n// //     }\n// //   };\n\n// //   const handleBookNow = async (scheduleId) => {\n// //     try {\n// //       // Assuming the API takes `scheduleId` and creates a reservation\n// //       await axiosInstance.post('/customer/reservations', {\n// //         scheduleId,\n// //         tripType: 'one-way', // or 'round-trip' depending on your logic\n// //       });\n// //       setSuccessMessage('Reservation successfully booked!');\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error booking reservation:', err);\n// //       setError('Failed to book reservation.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Search & Book Train Schedules</h3>\n// //       <div>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Origin Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Destination Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// //       </div>\n\n// //       {error && <p className=\"error\">{error}</p>}\n// //       {successMessage && <p className=\"success\">{successMessage}</p>}\n\n// //       {availableSchedules.length > 0 && (\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Departure Time</th>\n// //               <th>Arrival Time</th>\n// //               <th>Action</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {availableSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                 <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                 <td>\n// //                   <button onClick={() => handleBookNow(schedule.ScheduleID)}>\n// //                     Book Now\n// //                   </button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default TrainSchedulesTab;\n\n// // TrainSchedulesTab.js\n// import React, { useState } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const TrainSchedulesTab = ({ stations, customerId }) => {\n//   const [originStation, setOriginStation] = useState('');\n//   const [destinationStation, setDestinationStation] = useState('');\n//   const [travelDate, setTravelDate] = useState('');\n//   const [availableSchedules, setAvailableSchedules] = useState([]);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   const handleSearchSchedules = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError('Please select all fields.');\n//       setSuccess('');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get('/customer/train-schedules', {\n//         params: {\n//           originStation,\n//           destinationStation,\n//           travelDate,\n//         },\n//       });\n//       setAvailableSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching train schedules:', err);\n//       setError('Failed to fetch train schedules.');\n//       setSuccess('');\n//     }\n//   };\n\n//   const handleBookNow = async (scheduleId) => {\n//     try {\n//       const payload = {\n//         customerId,\n//         scheduleId,\n//         originStation,\n//         destinationStation,\n//         tripType: 'one-way', // Adjust if you want to allow round-trip bookings\n//       };\n//       const response = await axiosInstance.post('/customer/reservations', payload);\n//       setSuccess('Reservation successfully booked!');\n//       setError('');\n//     } catch (err) {\n//       console.error('Error booking reservation:', err);\n//       setError('Failed to book reservation.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Search & Book Train Schedules</h3>\n//       <div>\n//         <select\n//           value={originStation}\n//           onChange={(e) => setOriginStation(e.target.value)}\n//         >\n//           <option value=\"\">Select Origin Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n//         <select\n//           value={destinationStation}\n//           onChange={(e) => setDestinationStation(e.target.value)}\n//         >\n//           <option value=\"\">Select Destination Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n//         <input\n//           type=\"date\"\n//           value={travelDate}\n//           onChange={(e) => setTravelDate(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules</button>\n//       </div>\n\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       {availableSchedules.length > 0 && (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Departure Time</th>\n//               <th>Arrival Time</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {availableSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.DepartureDateTime}</td>\n//                 <td>{schedule.ArrivalDateTime}</td>\n//                 <td>\n//                   <button onClick={() => handleBookNow(schedule.ScheduleID)}>\n//                     Book Now\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TrainSchedulesTab;\n\n// TrainSchedulesTab.js\nimport React, { useState, useEffect } from \"react\";\nimport axiosInstance from \"../utils/axiosInstance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrainSchedulesTab = ({\n  stations\n}) => {\n  _s();\n  const [originStation, setOriginStation] = useState(\"\");\n  const [destinationStation, setDestinationStation] = useState(\"\");\n  const [travelDate, setTravelDate] = useState(\"\");\n  const [availableSchedules, setAvailableSchedules] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [selectedSchedule, setSelectedSchedule] = useState(null);\n  const [passengerType, setPassengerType] = useState(\"adult\");\n  const [reservationDetails, setReservationDetails] = useState(null);\n  useEffect(() => {\n    // Clear selected schedule when inputs change\n    setSelectedSchedule(null);\n  }, [originStation, destinationStation, travelDate]);\n  const handleSearchSchedules = async () => {\n    if (!originStation || !destinationStation || !travelDate) {\n      setError(\"Please select all fields.\");\n      return;\n    }\n    try {\n      const response = await axiosInstance.get(\"/customer/train-schedules\", {\n        params: {\n          originStation,\n          destinationStation,\n          travelDate\n        }\n      });\n      setAvailableSchedules(response.data.trainSchedules);\n      setError(\"\");\n    } catch (err) {\n      console.error(\"Error fetching train schedules:\", err);\n      setError(\"Failed to fetch train schedules.\");\n    }\n  };\n  const handleBookNow = async schedule => {\n    const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n\n    if (!customerId) {\n      setError('Customer ID not found. Please log in again.');\n      return;\n    }\n    try {\n      const response = await axiosInstance.post('/customer/reservations', {\n        customerId,\n        transitLineName: schedule.TransitLineName,\n        originStation,\n        destinationStation,\n        travelDate,\n        tripType: \"One-Way\",\n        isRoundTrip: false,\n        passengerType\n      });\n      setReservationDetails({\n        reservationId: response.data.reservationId,\n        fare: response.data.fare\n      });\n      setError('');\n    } catch (err) {\n      console.error('Error creating reservation:', err);\n      setError('Failed to create reservation. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search & Book Train Schedules\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: originStation,\n        onChange: e => setOriginStation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Origin Station\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: destinationStation,\n        onChange: e => setDestinationStation(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Destination Station\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), stations.map(station => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: station.StationName,\n          children: station.StationName\n        }, station.StationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: travelDate,\n        onChange: e => setTravelDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchSchedules,\n        children: \"Search Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 17\n    }, this), availableSchedules.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Available Train Schedules\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Schedule ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transit Line Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Departure Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Arrival Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: availableSchedules.map(schedule => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ScheduleID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.TransitLineName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.DepartureDateTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: schedule.ArrivalDateTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleBookNow(schedule),\n                children: \"Book Now\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 19\n            }, this)]\n          }, schedule.ScheduleID, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }, this), selectedSchedule && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Passenger Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: passengerType,\n        onChange: e => setPassengerType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"adult\",\n          children: \"Adult\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"child\",\n          children: \"Child\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"senior\",\n          children: \"Senior\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"disabled\",\n          children: \"Disabled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBookNow,\n        children: \"Confirm Reservation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 9\n    }, this), reservationDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Reservation Successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Reservation ID: \", reservationDetails.reservationId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Fare: $\", reservationDetails.fare]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 5\n  }, this);\n};\n_s(TrainSchedulesTab, \"aBfVnWh+N/yzK7Q/YwDF6Yzu7tE=\");\n_c = TrainSchedulesTab;\nexport default TrainSchedulesTab;\nvar _c;\n$RefreshReg$(_c, \"TrainSchedulesTab\");","map":{"version":3,"names":["React","useState","useEffect","axiosInstance","jsxDEV","_jsxDEV","TrainSchedulesTab","stations","_s","originStation","setOriginStation","destinationStation","setDestinationStation","travelDate","setTravelDate","availableSchedules","setAvailableSchedules","error","setError","selectedSchedule","setSelectedSchedule","passengerType","setPassengerType","reservationDetails","setReservationDetails","handleSearchSchedules","response","get","params","data","trainSchedules","err","console","handleBookNow","schedule","customerId","localStorage","getItem","post","transitLineName","TransitLineName","tripType","isRoundTrip","reservationId","fare","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","station","StationName","StationID","type","onClick","className","length","ScheduleID","DepartureDateTime","ArrivalDateTime","_c","$RefreshReg$"],"sources":["/Users/pavanmadamsetty/Documents/DBDS/railway-booking-frontend/src/tabs/TrainSchedulesTab.js"],"sourcesContent":["\n// // // TrainSchedulesTab.js\n// // import React, { useState } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const TrainSchedulesTab = ({ stations }) => {\n// //   const [originStation, setOriginStation] = useState('');\n// //   const [destinationStation, setDestinationStation] = useState('');\n// //   const [travelDate, setTravelDate] = useState('');\n// //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// //   const [error, setError] = useState('');\n\n// //   const handleSearchSchedules = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError('Please select all fields.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get('/customer/train-schedules', {\n// //         params: {\n// //           originStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setAvailableSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching train schedules:', err);\n// //       setError('Failed to fetch train schedules.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Search & Book Train Schedules</h3>\n// //       <div>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Origin Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Destination Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// //       </div>\n\n// //       {error && <p className=\"error\">{error}</p>}\n\n// //       {availableSchedules.length > 0 && (\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Departure Time</th>\n// //               <th>Arrival Time</th>\n// //               <th>Action</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {availableSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{schedule.DepartureDateTime}</td>\n// //                 <td>{schedule.ArrivalDateTime}</td>\n// //                 <td>\n// //                   <button>Book Now</button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default TrainSchedulesTab;\n\n// // import React, { useState } from 'react';\n// // import axiosInstance from '../utils/axiosInstance';\n\n// // const TrainSchedulesTab = ({ stations }) => {\n// //   const [originStation, setOriginStation] = useState('');\n// //   const [destinationStation, setDestinationStation] = useState('');\n// //   const [travelDate, setTravelDate] = useState('');\n// //   const [availableSchedules, setAvailableSchedules] = useState([]);\n// //   const [error, setError] = useState('');\n// //   const [successMessage, setSuccessMessage] = useState('');\n\n// //   const handleSearchSchedules = async () => {\n// //     if (!originStation || !destinationStation || !travelDate) {\n// //       setError('Please select all fields.');\n// //       return;\n// //     }\n// //     try {\n// //       const response = await axiosInstance.get('/customer/train-schedules', {\n// //         params: {\n// //           originStation,\n// //           destinationStation,\n// //           travelDate,\n// //         },\n// //       });\n// //       setAvailableSchedules(response.data.trainSchedules);\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error fetching train schedules:', err);\n// //       setError('Failed to fetch train schedules.');\n// //     }\n// //   };\n\n// //   const handleBookNow = async (scheduleId) => {\n// //     try {\n// //       // Assuming the API takes `scheduleId` and creates a reservation\n// //       await axiosInstance.post('/customer/reservations', {\n// //         scheduleId,\n// //         tripType: 'one-way', // or 'round-trip' depending on your logic\n// //       });\n// //       setSuccessMessage('Reservation successfully booked!');\n// //       setError('');\n// //     } catch (err) {\n// //       console.error('Error booking reservation:', err);\n// //       setError('Failed to book reservation.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h3>Search & Book Train Schedules</h3>\n// //       <div>\n// //         <select\n// //           value={originStation}\n// //           onChange={(e) => setOriginStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Origin Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <select\n// //           value={destinationStation}\n// //           onChange={(e) => setDestinationStation(e.target.value)}\n// //         >\n// //           <option value=\"\">Select Destination Station</option>\n// //           {stations.map((station) => (\n// //             <option key={station.StationID} value={station.StationName}>\n// //               {station.StationName}\n// //             </option>\n// //           ))}\n// //         </select>\n// //         <input\n// //           type=\"date\"\n// //           value={travelDate}\n// //           onChange={(e) => setTravelDate(e.target.value)}\n// //         />\n// //         <button onClick={handleSearchSchedules}>Search Schedules</button>\n// //       </div>\n\n// //       {error && <p className=\"error\">{error}</p>}\n// //       {successMessage && <p className=\"success\">{successMessage}</p>}\n\n// //       {availableSchedules.length > 0 && (\n// //         <table>\n// //           <thead>\n// //             <tr>\n// //               <th>Schedule ID</th>\n// //               <th>Transit Line Name</th>\n// //               <th>Departure Time</th>\n// //               <th>Arrival Time</th>\n// //               <th>Action</th>\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {availableSchedules.map((schedule) => (\n// //               <tr key={schedule.ScheduleID}>\n// //                 <td>{schedule.ScheduleID}</td>\n// //                 <td>{schedule.TransitLineName}</td>\n// //                 <td>{new Date(schedule.DepartureDateTime).toLocaleString()}</td>\n// //                 <td>{new Date(schedule.ArrivalDateTime).toLocaleString()}</td>\n// //                 <td>\n// //                   <button onClick={() => handleBookNow(schedule.ScheduleID)}>\n// //                     Book Now\n// //                   </button>\n// //                 </td>\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default TrainSchedulesTab;\n\n// // TrainSchedulesTab.js\n// import React, { useState } from 'react';\n// import axiosInstance from '../utils/axiosInstance';\n\n// const TrainSchedulesTab = ({ stations, customerId }) => {\n//   const [originStation, setOriginStation] = useState('');\n//   const [destinationStation, setDestinationStation] = useState('');\n//   const [travelDate, setTravelDate] = useState('');\n//   const [availableSchedules, setAvailableSchedules] = useState([]);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   const handleSearchSchedules = async () => {\n//     if (!originStation || !destinationStation || !travelDate) {\n//       setError('Please select all fields.');\n//       setSuccess('');\n//       return;\n//     }\n//     try {\n//       const response = await axiosInstance.get('/customer/train-schedules', {\n//         params: {\n//           originStation,\n//           destinationStation,\n//           travelDate,\n//         },\n//       });\n//       setAvailableSchedules(response.data.trainSchedules);\n//       setError('');\n//     } catch (err) {\n//       console.error('Error fetching train schedules:', err);\n//       setError('Failed to fetch train schedules.');\n//       setSuccess('');\n//     }\n//   };\n\n//   const handleBookNow = async (scheduleId) => {\n//     try {\n//       const payload = {\n//         customerId,\n//         scheduleId,\n//         originStation,\n//         destinationStation,\n//         tripType: 'one-way', // Adjust if you want to allow round-trip bookings\n//       };\n//       const response = await axiosInstance.post('/customer/reservations', payload);\n//       setSuccess('Reservation successfully booked!');\n//       setError('');\n//     } catch (err) {\n//       console.error('Error booking reservation:', err);\n//       setError('Failed to book reservation.');\n//       setSuccess('');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Search & Book Train Schedules</h3>\n//       <div>\n//         <select\n//           value={originStation}\n//           onChange={(e) => setOriginStation(e.target.value)}\n//         >\n//           <option value=\"\">Select Origin Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n//         <select\n//           value={destinationStation}\n//           onChange={(e) => setDestinationStation(e.target.value)}\n//         >\n//           <option value=\"\">Select Destination Station</option>\n//           {stations.map((station) => (\n//             <option key={station.StationID} value={station.StationName}>\n//               {station.StationName}\n//             </option>\n//           ))}\n//         </select>\n//         <input\n//           type=\"date\"\n//           value={travelDate}\n//           onChange={(e) => setTravelDate(e.target.value)}\n//         />\n//         <button onClick={handleSearchSchedules}>Search Schedules</button>\n//       </div>\n\n//       {error && <p className=\"error\">{error}</p>}\n//       {success && <p className=\"success\">{success}</p>}\n\n//       {availableSchedules.length > 0 && (\n//         <table>\n//           <thead>\n//             <tr>\n//               <th>Schedule ID</th>\n//               <th>Transit Line Name</th>\n//               <th>Departure Time</th>\n//               <th>Arrival Time</th>\n//               <th>Action</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {availableSchedules.map((schedule) => (\n//               <tr key={schedule.ScheduleID}>\n//                 <td>{schedule.ScheduleID}</td>\n//                 <td>{schedule.TransitLineName}</td>\n//                 <td>{schedule.DepartureDateTime}</td>\n//                 <td>{schedule.ArrivalDateTime}</td>\n//                 <td>\n//                   <button onClick={() => handleBookNow(schedule.ScheduleID)}>\n//                     Book Now\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TrainSchedulesTab;\n\n// TrainSchedulesTab.js\nimport React, { useState, useEffect } from \"react\";\nimport axiosInstance from \"../utils/axiosInstance\";\n\nconst TrainSchedulesTab = ({ stations }) => {\n  const [originStation, setOriginStation] = useState(\"\");\n  const [destinationStation, setDestinationStation] = useState(\"\");\n  const [travelDate, setTravelDate] = useState(\"\");\n  const [availableSchedules, setAvailableSchedules] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [selectedSchedule, setSelectedSchedule] = useState(null);\n  const [passengerType, setPassengerType] = useState(\"adult\");\n  const [reservationDetails, setReservationDetails] = useState(null);\n\n  useEffect(() => {\n    // Clear selected schedule when inputs change\n    setSelectedSchedule(null);\n  }, [originStation, destinationStation, travelDate]);\n\n  const handleSearchSchedules = async () => {\n    if (!originStation || !destinationStation || !travelDate) {\n      setError(\"Please select all fields.\");\n      return;\n    }\n    try {\n      const response = await axiosInstance.get(\"/customer/train-schedules\", {\n        params: {\n          originStation,\n          destinationStation,\n          travelDate,\n        },\n      });\n      setAvailableSchedules(response.data.trainSchedules);\n      setError(\"\");\n    } catch (err) {\n      console.error(\"Error fetching train schedules:\", err);\n      setError(\"Failed to fetch train schedules.\");\n    }\n  };\n\n  const handleBookNow = async (schedule) => {\n    const customerId = localStorage.getItem('customerId'); // Retrieve customer ID from localStorage\n  \n    if (!customerId) {\n      setError('Customer ID not found. Please log in again.');\n      return;\n    }\n  \n    try {\n      const response = await axiosInstance.post('/customer/reservations', {\n        customerId,\n        transitLineName: schedule.TransitLineName,\n        originStation,\n        destinationStation,\n        travelDate,\n        tripType: \"One-Way\",\n        isRoundTrip: false,\n        passengerType,\n      });\n  \n      setReservationDetails({\n        reservationId: response.data.reservationId,\n        fare: response.data.fare,\n      });\n  \n      setError('');\n    } catch (err) {\n      console.error('Error creating reservation:', err);\n      setError('Failed to create reservation. Please try again.');\n    }\n  };\n  \n\n  return (\n    <div>\n      <h3>Search & Book Train Schedules</h3>\n      <div>\n        <select\n          value={originStation}\n          onChange={(e) => setOriginStation(e.target.value)}\n        >\n          <option value=\"\">Select Origin Station</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n        <select\n          value={destinationStation}\n          onChange={(e) => setDestinationStation(e.target.value)}\n        >\n          <option value=\"\">Select Destination Station</option>\n          {stations.map((station) => (\n            <option key={station.StationID} value={station.StationName}>\n              {station.StationName}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"date\"\n          value={travelDate}\n          onChange={(e) => setTravelDate(e.target.value)}\n        />\n        <button onClick={handleSearchSchedules}>Search Schedules</button>\n      </div>\n\n      {error && <p className=\"error\">{error}</p>}\n\n      {availableSchedules.length > 0 && (\n        <div>\n          <h4>Available Train Schedules</h4>\n          <table>\n            <thead>\n              <tr>\n                <th>Schedule ID</th>\n                <th>Transit Line Name</th>\n                <th>Departure Time</th>\n                <th>Arrival Time</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {availableSchedules.map((schedule) => (\n                <tr key={schedule.ScheduleID}>\n                  <td>{schedule.ScheduleID}</td>\n                  <td>{schedule.TransitLineName}</td>\n                  <td>{schedule.DepartureDateTime}</td>\n                  <td>{schedule.ArrivalDateTime}</td>\n                  <td>\n                    <button onClick={() => handleBookNow(schedule)}>\n                      Book Now\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {selectedSchedule && (\n        <div>\n          <h4>Passenger Details</h4>\n          <select\n            value={passengerType}\n            onChange={(e) => setPassengerType(e.target.value)}\n          >\n            <option value=\"adult\">Adult</option>\n            <option value=\"child\">Child</option>\n            <option value=\"senior\">Senior</option>\n            <option value=\"disabled\">Disabled</option>\n          </select>\n          <button onClick={handleBookNow}>Confirm Reservation</button>\n        </div>\n      )}\n\n      {reservationDetails && (\n        <div>\n          <h4>Reservation Successful!</h4>\n          <p>Reservation ID: {reservationDetails.reservationId}</p>\n          <p>Total Fare: ${reservationDetails.fare}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TrainSchedulesTab;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}